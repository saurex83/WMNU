###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               09/Feb/2020  19:54:12
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\action_manager.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EWBC2F.tmp
#        (E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\action_manager.c -lC
#        "E:\WMNU\IAR_new_arch\PRJ Test\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRJ Test\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --mfc
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\alarm_timer.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\buffer.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\cpu.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\frame.c "E:\WMNU\IAR_NEW_ARCH\PRJ
#        Test\main.c" E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_slots.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_utils.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\model.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\rtc.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\time_manager.c
#        "E:\WMNU\IAR_new_arch\PRJ Test\u_alarm_timer.c"
#        "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_debug.c" "E:\WMNU\IAR_NEW_ARCH\PRJ
#        Test\u_macros.c" "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_mem_slots.c"
#        "E:\WMNU\IAR_new_arch\PRJ Test\u_mem_utils.c"
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\ustimer.c)
#    Locale             =  Russian_Russia.1251
#    List file          =  
#        E:\WMNU\IAR_new_arch\PRJ Test\Debug\List\action_manager.lst
#    Object file        =  
#        E:\WMNU\IAR_new_arch\PRJ Test\Debug\Obj\action_manager.r51
#
###############################################################################

E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\action_manager.c
      1          #include "action_manager.h"
      2          #include "modules_list.h"
      3          #include "model.h"
      4          #include "debug.h"

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1
      5          
      6          /**
      7          @file
      8          */
      9          
     10          /* Определения */
     11          #define ITEMS_COUNT(name) (sizeof(name)/sizeof(module_s*))
     12          #define RUNNER(array, fun) {\
     13          for (char i = 0; i < ITEMS_COUNT(array); i++){\
     14              ASSERT(array[i]->fun != NULL);\
     15              array[i]->fun();\
     16              }\
     17          };
     18          
     19          
     20          /* Локальные переменные */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static module_s* COLD_MOD[] = COLD_MOD_DEF;
   \                     ??COLD_MOD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static module_s* HOT_MOD[] = HOT_MOD_DEF;
   \                     ??HOT_MOD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          static module_s* HW_MOD[] = HW_MOD_DEF;
   \                     ??HW_MOD:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for HW_MOD>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     24          static module_s* SW_MOD[] = SW_MOD_DEF;
   \                     ??SW_MOD:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for SW_MOD>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          static module_s* POW_MOD[] = POW_MOD_DEF;
   \                     ??POW_MOD:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for POW_MOD>`
   \   000002                REQUIRE __INIT_XDATA_I
     26          
     27          /* Локальные функции */
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void AM_Cold_start(void){
   \                     AM_Cold_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     30            RUNNER(COLD_MOD, Cold_Start);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Cold_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Cold_start_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??COLD_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   2408         ADD       A,#0x8
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Cold_start_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION__ & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION__ >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..1E       MOV       ?V0,#0x1e
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"COLD_MOD[i]->Cold_St...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"COLD_MOD[i]->Cold_St...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Cold_start_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??COLD_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   2408         ADD       A,#0x8
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Cold_start_0 & 0xFFFF
     31          }
   \                     ??AM_Cold_start_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     32          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          void AM_Hot_start(void){
   \                     AM_Hot_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     34            RUNNER(HOT_MOD, Hot_Start);  
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Hot_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Hot_start_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??HOT_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   240A         ADD       A,#0xa
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Hot_start_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION___1 & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION___1 >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..22       MOV       ?V0,#0x22
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"HOT_MOD[i]->Hot_Star...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"HOT_MOD[i]->Hot_Star...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Hot_start_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??HOT_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   240A         ADD       A,#0xa
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Hot_start_0 & 0xFFFF
     35          }
   \                     ??AM_Hot_start_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     36          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          void AM_HW_Init(void){
   \                     AM_HW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     38            RUNNER(HW_MOD, HW_Init);      
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_HW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9403         SUBB      A,#0x3
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_HW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??HW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   7037         JNZ       ??AM_HW_Init_2
   \   000044                ; Setup parameters for call to function printf
   \   000044   75....       MOV       ?V0,#??__FUNCTION___2 & 0xff
   \   000047   75....       MOV       ?V1,#(??__FUNCTION___2 >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..26       MOV       ?V0,#0x26
   \   000052   75..00       MOV       ?V1,#0x0
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005D   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   000069   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006C   7406         MOV       A,#0x6
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071                ; Setup parameters for call to function printf
   \   000071   7A..         MOV       R2,#`?<Constant "\\"HW_MOD[i]->HW_Init !...">` & 0xff
   \   000073   7B..         MOV       R3,#(`?<Constant "\\"HW_MOD[i]->HW_Init !...">` >> 8) & 0xff
   \   000075   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000078                ; Setup parameters for call to function DBG_CORE_HALT
   \   000078   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_HW_Init_2:
   \   00007B                ; Setup parameters for indirect call
   \   00007B   EE           MOV       A,R6
   \   00007C   F8           MOV       R0,A
   \   00007D   7900         MOV       R1,#0x0
   \   00007F   E8           MOV       A,R0
   \   000080   75F002       MOV       B,#0x2
   \   000083   A4           MUL       AB
   \   000084   C8           XCH       A,R0
   \   000085   AAF0         MOV       R2,B
   \   000087   75F000       MOV       B,#0x0
   \   00008A   A4           MUL       AB
   \   00008B   2A           ADD       A,R2
   \   00008C   FA           MOV       R2,A
   \   00008D   75F002       MOV       B,#0x2
   \   000090   E9           MOV       A,R1
   \   000091   A4           MUL       AB
   \   000092   2A           ADD       A,R2
   \   000093   F9           MOV       R1,A
   \   000094   74..         MOV       A,#??HW_MOD & 0xff
   \   000096   28           ADD       A,R0
   \   000097   F582         MOV       DPL,A
   \   000099   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   00009B   39           ADDC      A,R1
   \   00009C   F583         MOV       DPH,A
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F8           MOV       R0,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   8882         MOV       DPL,R0
   \   0000AE   12....       LCALL     ?CALL_IND
   \   0000B1   0E           INC       R6
   \   0000B2   02....       LJMP      ??AM_HW_Init_0 & 0xFFFF
     39          }
   \                     ??AM_HW_Init_1:
   \   0000B5   7F02         MOV       R7,#0x2
   \   0000B7   02....       LJMP      ?BANKED_LEAVE_XDATA
     40          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     41          void AM_SW_Init(void){
   \                     AM_SW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     42            RUNNER(SW_MOD, SW_Init);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_SW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9405         SUBB      A,#0x5
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_SW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??SW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   E8           MOV       A,R0
   \   000043   49           ORL       A,R1
   \   000044   7037         JNZ       ??AM_SW_Init_2
   \   000046                ; Setup parameters for call to function printf
   \   000046   75....       MOV       ?V0,#??__FUNCTION___3 & 0xff
   \   000049   75....       MOV       ?V1,#(??__FUNCTION___3 >> 8) & 0xff
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..2A       MOV       ?V0,#0x2a
   \   000054   75..00       MOV       ?V1,#0x0
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005F   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000069   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006E   7406         MOV       A,#0x6
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073                ; Setup parameters for call to function printf
   \   000073   7A..         MOV       R2,#`?<Constant "\\"SW_MOD[i]->SW_Init !...">` & 0xff
   \   000075   7B..         MOV       R3,#(`?<Constant "\\"SW_MOD[i]->SW_Init !...">` >> 8) & 0xff
   \   000077   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_SW_Init_2:
   \   00007D                ; Setup parameters for indirect call
   \   00007D   EE           MOV       A,R6
   \   00007E   F8           MOV       R0,A
   \   00007F   7900         MOV       R1,#0x0
   \   000081   E8           MOV       A,R0
   \   000082   75F002       MOV       B,#0x2
   \   000085   A4           MUL       AB
   \   000086   C8           XCH       A,R0
   \   000087   AAF0         MOV       R2,B
   \   000089   75F000       MOV       B,#0x0
   \   00008C   A4           MUL       AB
   \   00008D   2A           ADD       A,R2
   \   00008E   FA           MOV       R2,A
   \   00008F   75F002       MOV       B,#0x2
   \   000092   E9           MOV       A,R1
   \   000093   A4           MUL       AB
   \   000094   2A           ADD       A,R2
   \   000095   F9           MOV       R1,A
   \   000096   74..         MOV       A,#??SW_MOD & 0xff
   \   000098   28           ADD       A,R0
   \   000099   F582         MOV       DPL,A
   \   00009B   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   00009D   39           ADDC      A,R1
   \   00009E   F583         MOV       DPH,A
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   8882         MOV       DPL,R0
   \   0000B2   12....       LCALL     ?CALL_IND
   \   0000B5   0E           INC       R6
   \   0000B6   02....       LJMP      ??AM_SW_Init_0 & 0xFFFF
     43          }
   \                     ??AM_SW_Init_1:
   \   0000B9   7F02         MOV       R7,#0x2
   \   0000BB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          void AM_Sleep(void){
   \                     AM_Sleep:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     45            RUNNER(POW_MOD, Sleep);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Sleep_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Sleep_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??POW_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F583         MOV       DPH,A
   \   000036   8882         MOV       DPL,R0
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7037         JNZ       ??AM_Sleep_2
   \   000045                ; Setup parameters for call to function printf
   \   000045   75....       MOV       ?V0,#??__FUNCTION___4 & 0xff
   \   000048   75....       MOV       ?V1,#(??__FUNCTION___4 >> 8) & 0xff
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..2D       MOV       ?V0,#0x2d
   \   000053   75..00       MOV       ?V1,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005E   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000068   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006D   7406         MOV       A,#0x6
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072                ; Setup parameters for call to function printf
   \   000072   7A..         MOV       R2,#`?<Constant "\\"POW_MOD[i]->Sleep !=...">` & 0xff
   \   000074   7B..         MOV       R3,#(`?<Constant "\\"POW_MOD[i]->Sleep !=...">` >> 8) & 0xff
   \   000076   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000079                ; Setup parameters for call to function DBG_CORE_HALT
   \   000079   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Sleep_2:
   \   00007C                ; Setup parameters for indirect call
   \   00007C   EE           MOV       A,R6
   \   00007D   F8           MOV       R0,A
   \   00007E   7900         MOV       R1,#0x0
   \   000080   E8           MOV       A,R0
   \   000081   75F002       MOV       B,#0x2
   \   000084   A4           MUL       AB
   \   000085   C8           XCH       A,R0
   \   000086   AAF0         MOV       R2,B
   \   000088   75F000       MOV       B,#0x0
   \   00008B   A4           MUL       AB
   \   00008C   2A           ADD       A,R2
   \   00008D   FA           MOV       R2,A
   \   00008E   75F002       MOV       B,#0x2
   \   000091   E9           MOV       A,R1
   \   000092   A4           MUL       AB
   \   000093   2A           ADD       A,R2
   \   000094   F9           MOV       R1,A
   \   000095   74..         MOV       A,#??POW_MOD & 0xff
   \   000097   28           ADD       A,R0
   \   000098   F582         MOV       DPL,A
   \   00009A   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F8           MOV       R0,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F8           MOV       R0,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   8882         MOV       DPL,R0
   \   0000B3   12....       LCALL     ?CALL_IND
   \   0000B6   0E           INC       R6
   \   0000B7   02....       LJMP      ??AM_Sleep_0 & 0xFFFF
     46          }
   \                     ??AM_Sleep_1:
   \   0000BA   7F02         MOV       R7,#0x2
   \   0000BC   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          void AM_Wakeup(void){
   \                     AM_Wakeup:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     48            RUNNER(POW_MOD, Wakeup);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Wakeup_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Wakeup_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??POW_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   2406         ADD       A,#0x6
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Wakeup_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION___5 & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION___5 >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..30       MOV       ?V0,#0x30
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"POW_MOD[i]->Wakeup !...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"POW_MOD[i]->Wakeup !...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Wakeup_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??POW_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   2406         ADD       A,#0x6
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Wakeup_0 & 0xFFFF
     49          }
   \                     ??AM_Wakeup_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\alarm_timer.c
      1          #include "alarm_timer.h"
      2          #include "time_manager.h"
      3          #include "action_manager.h"
      4          #include "ioCC2530.h"
      5          #include "stdbool.h"
      6          #include "stdint.h"
      7          #include "debug.h"
      8          #include "cpu.h"
      9          
     10          /**
     11          @file
     12          */
     13          
     14          #define MAX_NWTIME (nwtime_t)32767
     15          
     16          static void HW_Init(void);  
     17          static inline void IRQEnable(bool state);
     18          static uint32_t ReadTimer(void);
     19          static inline bool isIRQEnable(void);
     20          static inline uint32_t calcCompareTime(nwtime_t time);
     21          static void loadTimerCompare(uint32_t ticks);
     22          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          module_s AT_MODULE = {ALIAS(HW_Init)};
   \                     AT_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for AT_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static nwtime_t TOFFSET; 
   \                     ??TOFFSET:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          static uint32_t COMPARE_TIME; //!< Значение в регистре compare
   \                     ??COMPARE_TIME:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          static void HW_Init(void){
   \                     ??HW_Init:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     28            TOFFSET = 0;
   \   000004   90....       MOV       DPTR,#??TOFFSET
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
     29            COMPARE_TIME = 0;
   \   00000E   90....       MOV       DPTR,#??COMPARE_TIME
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
     30          }; 
   \   000020   D083         POP       DPH
   \   000022   D082         POP       DPL
   \   000024   02....       LJMP      ?BRET
     31          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void AT_set_time(nwtime_t time){
   \                     AT_set_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     33            ASSERT(time <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_set_time_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___6 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___6 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..21       MOV       ?V0,#0x21
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"time <= MAX_NWTIME\\" ...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"time <= MAX_NWTIME\\" ...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     34            nwtime_t timer = ReadTimer();
   \                     ??AT_set_time_0:
   \   000049                ; Setup parameters for call to function ReadTimer
   \   000049   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   \   000050   8C..         MOV       ?V2,R4
   \   000052   8D..         MOV       ?V3,R5
   \   000054   85....       MOV       ?V4,?V0
   \   000057   85....       MOV       ?V5,?V1
     35            TOFFSET = time - timer;
   \   00005A   EE           MOV       A,R6
   \   00005B   C3           CLR       C
   \   00005C   95..         SUBB      A,?V4
   \   00005E   F8           MOV       R0,A
   \   00005F   EF           MOV       A,R7
   \   000060   95..         SUBB      A,?V5
   \   000062   F9           MOV       R1,A
   \   000063   90....       MOV       DPTR,#??TOFFSET
   \   000066   E8           MOV       A,R0
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E9           MOV       A,R1
   \   00006A   F0           MOVX      @DPTR,A
     36            TOFFSET &= 0x7FFF;
   \   00006B   90....       MOV       DPTR,#??TOFFSET
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   54FF         ANL       A,#0xff
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   547F         ANL       A,#0x7f
   \   000076   F0           MOVX      @DPTR,A
     37            // После установки времени нужно изменить compare time в таймере
     38            // Но только в случаи если прерывание активно
     39            if (isIRQEnable())
   \   000077                ; Setup parameters for call to function isIRQEnable
   \   000077   12....       LCALL     `??isIRQEnable::?relay`; Banked call to: isIRQEnable
   \   00007A   500F         JNC       ??AT_set_time_1
     40              AT_set_alarm(COMPARE_TIME);
   \   00007C                ; Setup parameters for call to function AT_set_alarm
   \   00007C   90....       MOV       DPTR,#??COMPARE_TIME
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?L_MOV_X
   \   000084   AA..         MOV       R2,?V0
   \   000086   AB..         MOV       R3,?V1
   \   000088   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     41          }
   \                     ??AT_set_time_1:
   \   00008B   7F06         MOV       R7,#0x6
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          nwtime_t AT_time(void){
   \                     AT_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     44            uint32_t val = ReadTimer();
   \   000005                ; Setup parameters for call to function ReadTimer
   \   000005   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   8C..         MOV       ?V6,R4
   \   00000E   8D..         MOV       ?V7,R5
     45            // TOFFSET = NETWORK TIME - TIMER
     46            // NETWORK TIME = TIMER + TOFFSET
     47            val +=TOFFSET;
   \   000010   90....       MOV       DPTR,#??TOFFSET
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V1,A
   \   00001A   E4           CLR       A
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   F5..         MOV       ?V3,A
   \   00001F   78..         MOV       R0,#?V4
   \   000021   79..         MOV       R1,#?V0
   \   000023   12....       LCALL     ?L_ADD
     48            val &= 0x7FFF; // Приводим значения таймера к 0-32767
   \   000026   90....       MOV       DPTR,#__Constant_7fff
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_AND_X
     49            return val;
   \   00002E   AA..         MOV       R2,?V4
   \   000030   AB..         MOV       R3,?V5
   \   000032   7F08         MOV       R7,#0x8
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          }
     51          
     52          /**
     53          @brief Ждем наступления определенного момента времени
     54          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          void AT_wait(nwtime_t time){
   \                     AT_wait:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     56            ASSERT(time <= MAX_NWTIME);  
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_wait_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___7 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___7 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..38       MOV       ?V0,#0x38
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"time <= MAX_NWTIME\\" ...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"time <= MAX_NWTIME\\" ...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     57            static union 
     58            {
     59              uint32_t val;
     60              uint8_t fild[4];
     61            } val;
     62            val.val = 0;
   \                     ??AT_wait_0:
   \   000049   90....       MOV       DPTR,#??val
   \   00004C   7400         MOV       A,#0x0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   7400         MOV       A,#0x0
   \   00005A   F0           MOVX      @DPTR,A
     63            // TOFFSET = NETWORK TIME - TIMER
     64            // NETWORK TIME = TIMER + TOFFSET
     65            // Ждем синхронизацию таймера после пробуждения
     66            while (!(SLEEPSTA & 0x01));
   \                     ??AT_wait_1:
   \   00005B   E59D         MOV       A,0x9d
   \   00005D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005F   50FA         JNC       ??AT_wait_1
     67            do{
     68              // Соблюдаем порядок чтения регисторов ST  
     69              val.fild[0] = ST0;
   \                     ??AT_wait_2:
   \   000061   E595         MOV       A,0x95
   \   000063   90....       MOV       DPTR,#??val
   \   000066   F0           MOVX      @DPTR,A
     70              val.fild[1] = ST1;
   \   000067   E596         MOV       A,0x96
   \   000069   90....       MOV       DPTR,#??val + 1
   \   00006C   F0           MOVX      @DPTR,A
     71              val.fild[2] = ST2;
   \   00006D   E597         MOV       A,0x97
   \   00006F   90....       MOV       DPTR,#??val + 2
   \   000072   F0           MOVX      @DPTR,A
     72              val.val +=TOFFSET;
   \   000073   90....       MOV       DPTR,#??TOFFSET
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V0,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F5..         MOV       ?V1,A
   \   00007D   E4           CLR       A
   \   00007E   F5..         MOV       ?V2,A
   \   000080   F5..         MOV       ?V3,A
   \   000082   90....       MOV       DPTR,#??val
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?L_ADD_TO_X
     73              val.val &= 0x7FFF; // Приводим значения таймера к 0-32767    
   \   00008A   90....       MOV       DPTR,#__Constant_7fff
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?L_MOV_X
   \   000092   90....       MOV       DPTR,#??val
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?L_AND_TO_X
     74            } while (val.val < time);
   \   00009A   8E..         MOV       ?V0,R6
   \   00009C   8F..         MOV       ?V1,R7
   \   00009E   E4           CLR       A
   \   00009F   F5..         MOV       ?V2,A
   \   0000A1   F5..         MOV       ?V3,A
   \   0000A3   90....       MOV       DPTR,#??val
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?UL_GT_X
   \   0000AB   40B4         JC        ??AT_wait_2
     75          }
   \   0000AD   7F04         MOV       R7,#0x4
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000B2                REQUIRE SLEEPSTA
   \   0000B2                REQUIRE ST0
   \   0000B2                REQUIRE ST1
   \   0000B2                REQUIRE ST2

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     76          
     77          /**
     78          @brief Разрешение прерываний таймера сна
     79          @params[in] state = true - разрешить обработку прерываний
     80          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          static inline void IRQEnable(bool state){
   \                     ??IRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   A2F0         MOV       C,B.0
   \   000002   92F0         MOV       B.0,C
     82            if (state)
   \   000004   A2F0         MOV       C,B.0
   \   000006   5004         JNC       ??IRQEnable_1
     83              STIE = 1;
   \   000008   D2AD         SETB      0xa8.5
   \   00000A   8002         SJMP      ??IRQEnable_2
     84            else
     85              STIE = 0;
   \                     ??IRQEnable_1:
   \   00000C   C2AD         CLR       0xa8.5
     86          }
   \                     ??IRQEnable_2:
   \   00000E   02....       LJMP      ?BRET
   \   000011                REQUIRE _A_IEN0
     87          
     88          /**
     89          @brief Устанавливает время прерывания
     90          @details Время прерывания устанавливается относительно времени сети
     91          ,к примеру, что бы проснуться в таймслот номер 0, нужно установить ticks = 0.
     92          Процедура учитывает текущее значение таймера и перерасчитывает значение ticks. 
     93          @params[in] ticks время сети в тиках когда нужно проснуться
     94          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          void AT_set_alarm(nwtime_t alarm){
   \                     AT_set_alarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     96            ASSERT(alarm <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_set_alarm_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___8 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___8 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..60       MOV       ?V0,#0x60
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"alarm <= MAX_NWTIME\\"...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"alarm <= MAX_NWTIME\\"...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     97            COMPARE_TIME = alarm; // Сохраняем установленное значение
   \                     ??AT_set_alarm_0:
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   E4           CLR       A
   \   00004E   FC           MOV       R4,A
   \   00004F   FD           MOV       R5,A
   \   000050   90....       MOV       DPTR,#??COMPARE_TIME
   \   000053   EA           MOV       A,R2
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   EB           MOV       A,R3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   EC           MOV       A,R4
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   ED           MOV       A,R5
   \   00005D   F0           MOVX      @DPTR,A
     98            uint32_t compare_time = calcCompareTime(alarm);
   \   00005E                ; Setup parameters for call to function calcCompareTime
   \   00005E   EE           MOV       A,R6
   \   00005F   FA           MOV       R2,A
   \   000060   EF           MOV       A,R7
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??calcCompareTime::?relay`; Banked call to: calcCompareTime
   \   000065   8A..         MOV       ?V0,R2
   \   000067   8B..         MOV       ?V1,R3
   \   000069   8C..         MOV       ?V2,R4
   \   00006B   8D..         MOV       ?V3,R5
     99            loadTimerCompare(compare_time);
   \   00006D                ; Setup parameters for call to function loadTimerCompare
   \   00006D   AA..         MOV       R2,?V0
   \   00006F   AB..         MOV       R3,?V1
   \   000071   AC..         MOV       R4,?V2
   \   000073   AD..         MOV       R5,?V3
   \   000075   12....       LCALL     `??loadTimerCompare::?relay`; Banked call to: loadTimerCompare
    100            IRQEnable(true);
   \   000078                ; Setup parameters for call to function IRQEnable
   \   000078   D2F0         SETB      B.0
   \   00007A   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    101          }
   \   00007D   7F04         MOV       R7,#0x4
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    102          
    103          /**
    104          @brief Вычисляет значение, которое нужно установить в регистр compare таймера.
    105          @params[in] time время сети в тикак
    106          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          static inline uint32_t calcCompareTime(nwtime_t time){   
   \                     ??calcCompareTime:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    108              uint32_t timer = ReadTimer(); // Текущее значение счетчика
   \   000014                ; Setup parameters for call to function ReadTimer
   \   000014   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000017   8A..         MOV       ?V4,R2
   \   000019   8B..         MOV       ?V5,R3
   \   00001B   8C..         MOV       ?V6,R4
   \   00001D   8D..         MOV       ?V7,R5
    109              //NETWORK TIME = TIMER + TOFFSET  
    110              // Приводим такты к тактам таймера
    111              uint16_t ticks_offset = (time - TOFFSET) & 0x7FFF;
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   C082         PUSH      DPL
   \   000026   C083         PUSH      DPH
   \   000028   90....       MOV       DPTR,#??TOFFSET
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   D083         POP       DPH
   \   000032   D082         POP       DPL
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C3           CLR       C
   \   000036   98           SUBB      A,R0
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   99           SUBB      A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   E8           MOV       A,R0
   \   00003D   54FF         ANL       A,#0xff
   \   00003F   FE           MOV       R6,A
   \   000040   E9           MOV       A,R1
   \   000041   547F         ANL       A,#0x7f
   \   000043   FF           MOV       R7,A
    112              uint32_t cmp_time = timer & ~0x7FFF; // Убираем младшие 15 бит
   \   000044   85....       MOV       ?V0,?V4
   \   000047   85....       MOV       ?V1,?V5
   \   00004A   85....       MOV       ?V2,?V6
   \   00004D   85....       MOV       ?V3,?V7
   \   000050   90....       MOV       DPTR,#__Constant_ffff8000
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?L_AND_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_MOV_TO_X
    113              cmp_time |= ticks_offset; // Вычисляем новое время
   \   000063   8E..         MOV       ?V0,R6
   \   000065   8F..         MOV       ?V1,R7
   \   000067   E4           CLR       A
   \   000068   F5..         MOV       ?V2,A
   \   00006A   F5..         MOV       ?V3,A
   \   00006C   85..82       MOV       DPL,?XSP + 0
   \   00006F   85..83       MOV       DPH,?XSP + 1
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?L_IOR_TO_X
    114              if (cmp_time <= timer){
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?UL_GE_X
   \   000082   5026         JNC       ??calcCompareTime_1
    115                cmp_time += 0x8000;
   \   000084   90....       MOV       DPTR,#__Constant_8000
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_MOV_X
   \   00008C   85..82       MOV       DPL,?XSP + 0
   \   00008F   85..83       MOV       DPH,?XSP + 1
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?L_ADD_TO_X
    116                cmp_time &=0xFFFFFF;
   \   000097   90....       MOV       DPTR,#__Constant_ffffff
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_X
   \   00009F   85..82       MOV       DPL,?XSP + 0
   \   0000A2   85..83       MOV       DPH,?XSP + 1
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?L_AND_TO_X
    117              }
    118               LOG_OFF("Timer = %lu, Ticks = %d,CMP = %lu \r\n",
    119                    timer, ticks, cmp_time );
    120              return cmp_time;
   \                     ??calcCompareTime_1:
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   12....       LCALL     ?XLOAD_R2345
   \   0000B3   7406         MOV       A,#0x6
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B8   7F08         MOV       R7,#0x8
   \   0000BA   02....       LJMP      ?BANKED_LEAVE_XDATA
    121          }
    122          
    123          /**
    124          @brief Возвращает текущее значение таймера
    125          @return Текущие ticks
    126          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          static uint32_t ReadTimer(void){
   \                     ??ReadTimer:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    128            static union 
    129            {
    130              uint32_t val;
    131              uint8_t fild[4];
    132            } ret_val;
    133            ret_val.val = 0;
   \   000004   90....       MOV       DPTR,#??ret_val
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
    134            // Ждем синхронизацию таймера после пробуждения
    135            while (!(SLEEPSTA & 0x01));
   \                     ??ReadTimer_1:
   \   000016   E59D         MOV       A,0x9d
   \   000018   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001A   50FA         JNC       ??ReadTimer_1
    136            // Соблюдаем порядок чтения регисторов ST  
    137            ret_val.fild[0] = ST0;
   \   00001C   E595         MOV       A,0x95
   \   00001E   90....       MOV       DPTR,#??ret_val
   \   000021   F0           MOVX      @DPTR,A
    138            ret_val.fild[1] = ST1;
   \   000022   E596         MOV       A,0x96
   \   000024   90....       MOV       DPTR,#??ret_val + 1
   \   000027   F0           MOVX      @DPTR,A
    139            ret_val.fild[2] = ST2;
   \   000028   E597         MOV       A,0x97
   \   00002A   90....       MOV       DPTR,#??ret_val + 2
   \   00002D   F0           MOVX      @DPTR,A
    140            return ret_val.val;
   \   00002E   90....       MOV       DPTR,#??ret_val
   \   000031   12....       LCALL     ?XLOAD_R2345
   \   000034   D083         POP       DPH
   \   000036   D082         POP       DPL
   \   000038   02....       LJMP      ?BRET
   \   00003B                REQUIRE SLEEPSTA
   \   00003B                REQUIRE ST0
   \   00003B                REQUIRE ST1
   \   00003B                REQUIRE ST2
    141          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??ret_val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    142          
    143          /**
    144          @brief Устанавливает время пробуждения микроконтролера
    145          @params[in] ticks 24 битное значение времени пробуждения в ticks
    146          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          static void loadTimerCompare(uint32_t ticks){
   \                     ??loadTimerCompare:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    148            union 
    149            {
    150              uint32_t val;
    151              uint8_t fild[4];
    152            } value;
    153            value.val = ticks;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
    154            // Ждем разрешения на запись нового значения
    155            while (!(STLOAD & 0x01));
   \                     ??loadTimerCompare_1:
   \   00001D   E5AD         MOV       A,0xad
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   50FA         JNC       ??loadTimerCompare_1
    156            // Регистр ST0 должен быть записан в последнию очередь
    157            ST2 = value.fild[2];
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F597         MOV       0x97,A
    158            ST1 = value.fild[1];
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F596         MOV       0x96,A
    159            ST0 = value.fild[0];
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F595         MOV       0x95,A
    160          }
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   7F04         MOV       R7,#0x4
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000046                REQUIRE STLOAD
   \   000046                REQUIRE ST2
   \   000046                REQUIRE ST1
   \   000046                REQUIRE ST0
    161          
    162          /**
    163          @brief Проверка активности прерывания таймера
    164          @return true если прерывание установленно
    165          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          static inline bool isIRQEnable(void){
   \                     ??isIRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    167            return STIE;
   \   000000   A2AD         MOV       C,0xa8.5
   \   000002   02....       LJMP      ?BRET
   \   000005                REQUIRE _A_IEN0
    168          }
    169          
    170          /**
    171          @brief Обработчик прерывания таймера сна
    172          */
    173          #pragma vector=ST_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    174          __interrupt void TimerCompareInterrupt(void){ 
   \                     TimerCompareInterrupt:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   C0E0         PUSH      A
   \   000002   74F1         MOV       A,#-0xf
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    175            INTERRUPT_DISABLE();  
   \   000007   C2AF         CLR       0xa8.7
    176            nwtime_t time = AT_time();
   \   000009                ; Setup parameters for call to function AT_time
   \   000009   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AE..         MOV       R6,?V0
   \   000012   AF..         MOV       R7,?V1
    177            // Отключаем прерывание таймера. Забота пользователя его включить
    178            IRQEnable(false); 
   \   000014                ; Setup parameters for call to function IRQEnable
   \   000014   C2F0         CLR       B.0
   \   000016   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    179            TM_IRQ(time); // Передаем управление менеджеру времени
   \   000019                ; Setup parameters for call to function TM_IRQ
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??TM_IRQ::?relay`; Banked call to: TM_IRQ
    180            STIF = 0; // Очищаем флаг прерывания
   \   000020   C2C7         CLR       0xc0.7
    181            INTERRUPT_ENABLE();
   \   000022   D2AF         SETB      0xa8.7
    182          }
   \   000024   7F02         MOV       R7,#0x2
   \   000026   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000029                REQUIRE _A_IEN0
   \   000029                REQUIRE _A_IRCON
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\buffer.c
      1          #include "debug.h"
      2          #include "macros.h"
      3          #include "frame.h"
      4          #include "stdbool.h"
      5          
      6          #include "action_manager.h"
      7          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          module_s BF_MODULE = {ALIAS(SW_Init)};
   \                     BF_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for BF_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
      9          
     10          struct property{
     11            union{
     12              struct {
     13              char tx_ready: 1;
     14              char rx_ready: 1;
     15             };
     16             char val;
     17            };
     18          };
     19          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static struct property BUFFER_PROP[MAX_TXRX_BUFFER];
   \                     ??BUFFER_PROP:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static struct frame* BUFFER[MAX_TXRX_BUFFER];
   \                     ??BUFFER:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          static void SW_Init(void){
   \                     ??SW_Init:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     24            for_each_type(struct property, BUFFER_PROP, prop){
   \   000004   7582..       MOV       DPL,#??BUFFER_PROP & 0xff
   \   000007   7583..       MOV       DPH,#(??BUFFER_PROP >> 8) & 0xff
   \                     ??SW_Init_6:
   \   00000A   C3           CLR       C
   \   00000B   E582         MOV       A,DPL
   \   00000D   94..         SUBB      A,#(??BUFFER_PROP + 20) & 0xff
   \   00000F   E583         MOV       A,DPH
   \   000011   94..         SUBB      A,#((??BUFFER_PROP + 20) >> 8) & 0xff
   \   000013   5006         JNC       ??SW_Init_7
     25              prop->val = 0;
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
     26            }
   \   000018   A3           INC       DPTR
   \   000019   80EF         SJMP      ??SW_Init_6
     27          };
   \                     ??SW_Init_7:
   \   00001B   D083         POP       DPH
   \   00001D   D082         POP       DPL
   \   00001F   02....       LJMP      ?BRET
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          static inline int free_idx(void){
   \                     ??free_idx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     30            int idx = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
     31            for_each_type(struct property, BUFFER_PROP, prop)
   \   000009   7582..       MOV       DPL,#??BUFFER_PROP & 0xff
   \   00000C   7583..       MOV       DPH,#(??BUFFER_PROP >> 8) & 0xff
   \                     ??free_idx_1:
   \   00000F   C3           CLR       C
   \   000010   E582         MOV       A,DPL
   \   000012   94..         SUBB      A,#(??BUFFER_PROP + 20) & 0xff
   \   000014   E583         MOV       A,DPH
   \   000016   94..         SUBB      A,#((??BUFFER_PROP + 20) >> 8) & 0xff
   \   000018   5011         JNC       ??free_idx_2
     32              if (!prop->val)
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   7006         JNZ       ??free_idx_3
     33                return idx;
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   8043         SJMP      ??free_idx_4
     34              else
     35                idx++;
   \                     ??free_idx_3:
   \   000023   0E           INC       R6
   \   000024   EE           MOV       A,R6
   \   000025   7001         JNZ       ??free_idx_5
   \   000027   0F           INC       R7
   \                     ??free_idx_5:
   \   000028   A3           INC       DPTR
   \   000029   80E4         SJMP      ??free_idx_1
     36            HALT("No free idx");
   \                     ??free_idx_2:
   \   00002B                ; Setup parameters for call to function printf
   \   00002B   75....       MOV       ?V0,#??__FUNCTION___9 & 0xff
   \   00002E   75....       MOV       ?V1,#(??__FUNCTION___9 >> 8) & 0xff
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..24       MOV       ?V0,#0x24
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75....       MOV       ?V0,#`?<Constant "buffer.c">` & 0xff
   \   000044   75....       MOV       ?V1,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00004E   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000050   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000053   7406         MOV       A,#0x6
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058                ; Setup parameters for call to function printf
   \   000058   7A..         MOV       R2,#`?<Constant "No free idx">` & 0xff
   \   00005A   7B..         MOV       R3,#(`?<Constant "No free idx">` >> 8) & 0xff
   \   00005C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00005F                ; Setup parameters for call to function DBG_CORE_HALT
   \   00005F   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     37            return -1;
   \   000062   7AFF         MOV       R2,#-0x1
   \   000064   7BFF         MOV       R3,#-0x1
   \                     ??free_idx_4:
   \   000066   7F02         MOV       R7,#0x2
   \   000068   02....       LJMP      ?BANKED_LEAVE_XDATA
     38          };
     39          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          int BF_add_rx(struct frame* frame){
   \                     BF_add_rx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     41            int idx = free_idx();
   \   000009                ; Setup parameters for call to function free_idx
   \   000009   12....       LCALL     `??free_idx::?relay`; Banked call to: free_idx
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AA..         MOV       R2,?V0
   \   000012   AB..         MOV       R3,?V1
     42            BUFFER_PROP[idx].rx_ready = true;
   \   000014   74..         MOV       A,#??BUFFER_PROP & 0xff
   \   000016   2A           ADD       A,R2
   \   000017   F582         MOV       DPL,A
   \   000019   74..         MOV       A,#(??BUFFER_PROP >> 8) & 0xff
   \   00001B   3B           ADDC      A,R3
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E1         SETB      0xE0 /* A   */.1
   \   000021   F0           MOVX      @DPTR,A
     43            BUFFER[idx] = frame;
   \   000022   EA           MOV       A,R2
   \   000023   F8           MOV       R0,A
   \   000024   EB           MOV       A,R3
   \   000025   F9           MOV       R1,A
   \   000026   E8           MOV       A,R0
   \   000027   75F002       MOV       B,#0x2
   \   00002A   A4           MUL       AB
   \   00002B   C8           XCH       A,R0
   \   00002C   ACF0         MOV       R4,B
   \   00002E   75F000       MOV       B,#0x0
   \   000031   A4           MUL       AB
   \   000032   2C           ADD       A,R4
   \   000033   FC           MOV       R4,A
   \   000034   75F002       MOV       B,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   A4           MUL       AB
   \   000039   2C           ADD       A,R4
   \   00003A   F9           MOV       R1,A
   \   00003B   74..         MOV       A,#??BUFFER & 0xff
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   74..         MOV       A,#(??BUFFER >> 8) & 0xff
   \   000042   39           ADDC      A,R1
   \   000043   F583         MOV       DPH,A
   \   000045   EE           MOV       A,R6
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   EF           MOV       A,R7
   \   000049   F0           MOVX      @DPTR,A
     44            return idx;
   \   00004A   7F02         MOV       R7,#0x2
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
     45          };
     46          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          int  BF_add_tx(struct frame* frame){
   \                     BF_add_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     48            int idx = free_idx();
   \   000009                ; Setup parameters for call to function free_idx
   \   000009   12....       LCALL     `??free_idx::?relay`; Banked call to: free_idx
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AA..         MOV       R2,?V0
   \   000012   AB..         MOV       R3,?V1
     49            BUFFER_PROP[idx].tx_ready = true;
   \   000014   74..         MOV       A,#??BUFFER_PROP & 0xff
   \   000016   2A           ADD       A,R2
   \   000017   F582         MOV       DPL,A
   \   000019   74..         MOV       A,#(??BUFFER_PROP >> 8) & 0xff
   \   00001B   3B           ADDC      A,R3
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E0         SETB      0xE0 /* A   */.0
   \   000021   F0           MOVX      @DPTR,A
     50            BUFFER[idx] = frame;
   \   000022   EA           MOV       A,R2
   \   000023   F8           MOV       R0,A
   \   000024   EB           MOV       A,R3
   \   000025   F9           MOV       R1,A
   \   000026   E8           MOV       A,R0
   \   000027   75F002       MOV       B,#0x2
   \   00002A   A4           MUL       AB
   \   00002B   C8           XCH       A,R0
   \   00002C   ACF0         MOV       R4,B
   \   00002E   75F000       MOV       B,#0x0
   \   000031   A4           MUL       AB
   \   000032   2C           ADD       A,R4
   \   000033   FC           MOV       R4,A
   \   000034   75F002       MOV       B,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   A4           MUL       AB
   \   000039   2C           ADD       A,R4
   \   00003A   F9           MOV       R1,A
   \   00003B   74..         MOV       A,#??BUFFER & 0xff
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   74..         MOV       A,#(??BUFFER >> 8) & 0xff
   \   000042   39           ADDC      A,R1
   \   000043   F583         MOV       DPH,A
   \   000045   EE           MOV       A,R6
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   EF           MOV       A,R7
   \   000049   F0           MOVX      @DPTR,A
     51            return idx;
   \   00004A   7F02         MOV       R7,#0x2
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
     52          };
     53          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          void BF_del(int idx){
   \                     BF_del:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     55            ASSERT (idx >= 0 && idx < MAX_TXRX_BUFFER);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   400E         JC        ??BF_del_0
   \   000017   C3           CLR       C
   \   000018   EE           MOV       A,R6
   \   000019   9414         SUBB      A,#0x14
   \   00001B   EF           MOV       A,R7
   \   00001C   9400         SUBB      A,#0x0
   \   00001E   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000020   65D0         XRL       A,PSW
   \   000022   33           RLC       A
   \   000023   4037         JC        ??BF_del_1
   \                     ??BF_del_0:
   \   000025                ; Setup parameters for call to function printf
   \   000025   75....       MOV       ?V0,#??__FUNCTION___10 & 0xff
   \   000028   75....       MOV       ?V1,#(??__FUNCTION___10 >> 8) & 0xff
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..37       MOV       ?V0,#0x37
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   75....       MOV       ?V0,#`?<Constant "buffer.c">` & 0xff
   \   00003E   75....       MOV       ?V1,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   000048   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   00004A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004D   7406         MOV       A,#0x6
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052                ; Setup parameters for call to function printf
   \   000052   7A..         MOV       R2,#`?<Constant "\\"idx >= 0 && idx < MA...">` & 0xff
   \   000054   7B..         MOV       R3,#(`?<Constant "\\"idx >= 0 && idx < MA...">` >> 8) & 0xff
   \   000056   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000059                ; Setup parameters for call to function DBG_CORE_HALT
   \   000059   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     56            ASSERT(BUFFER_PROP[idx].val != 0);
   \                     ??BF_del_1:
   \   00005C   74..         MOV       A,#??BUFFER_PROP & 0xff
   \   00005E   2E           ADD       A,R6
   \   00005F   F582         MOV       DPL,A
   \   000061   74..         MOV       A,#(??BUFFER_PROP >> 8) & 0xff
   \   000063   3F           ADDC      A,R7
   \   000064   F583         MOV       DPH,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   7037         JNZ       ??BF_del_2
   \   000069                ; Setup parameters for call to function printf
   \   000069   75....       MOV       ?V0,#??__FUNCTION___10 & 0xff
   \   00006C   75....       MOV       ?V1,#(??__FUNCTION___10 >> 8) & 0xff
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..38       MOV       ?V0,#0x38
   \   000077   75..00       MOV       ?V1,#0x0
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   75....       MOV       ?V0,#`?<Constant "buffer.c">` & 0xff
   \   000082   75....       MOV       ?V1,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   00008E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000091   7406         MOV       A,#0x6
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096                ; Setup parameters for call to function printf
   \   000096   7A..         MOV       R2,#`?<Constant "\\"BUFFER_PROP[idx].val...">` & 0xff
   \   000098   7B..         MOV       R3,#(`?<Constant "\\"BUFFER_PROP[idx].val...">` >> 8) & 0xff
   \   00009A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00009D                ; Setup parameters for call to function DBG_CORE_HALT
   \   00009D   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     57            BUFFER_PROP[idx].val = 0;
   \                     ??BF_del_2:
   \   0000A0   74..         MOV       A,#??BUFFER_PROP & 0xff
   \   0000A2   2E           ADD       A,R6
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   74..         MOV       A,#(??BUFFER_PROP >> 8) & 0xff
   \   0000A7   3F           ADDC      A,R7
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   7400         MOV       A,#0x0
   \   0000AC   F0           MOVX      @DPTR,A
     58          };
   \   0000AD   7F02         MOV       R7,#0x2
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
     59          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     60          struct frame* BF_get_tx(int *idx){
   \                     BF_get_tx:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
     61            struct frame* ret = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
     62            while (*idx < MAX_TXRX_BUFFER){
   \                     ??BF_get_tx_0:
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   C3           CLR       C
   \   000012   E0           MOVX      A,@DPTR
   \   000013   9414         SUBB      A,#0x14
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   9400         SUBB      A,#0x0
   \   000019   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001B   65D0         XRL       A,PSW
   \   00001D   33           RLC       A
   \   00001E   504E         JNC       ??BF_get_tx_1
     63              if (BUFFER_PROP[*idx].tx_ready){
   \   000020   8882         MOV       DPL,R0
   \   000022   8983         MOV       DPH,R1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   24..         ADD       A,#??BUFFER_PROP & 0xff
   \   000027   FC           MOV       R4,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   34..         ADDC      A,#(??BUFFER_PROP >> 8) & 0xff
   \   00002C   FD           MOV       R5,A
   \   00002D   8C82         MOV       DPL,R4
   \   00002F   8D83         MOV       DPH,R5
   \   000031   E0           MOVX      A,@DPTR
   \   000032   A2E0         MOV       C,0xE0 /* A   */.0
   \   000034   50D7         JNC       ??BF_get_tx_0
     64                  ret = BUFFER[*idx];
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FC           MOV       R4,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FD           MOV       R5,A
   \   00003F   EC           MOV       A,R4
   \   000040   75F002       MOV       B,#0x2
   \   000043   A4           MUL       AB
   \   000044   CC           XCH       A,R4
   \   000045   AEF0         MOV       R6,B
   \   000047   75F000       MOV       B,#0x0
   \   00004A   A4           MUL       AB
   \   00004B   2E           ADD       A,R6
   \   00004C   FE           MOV       R6,A
   \   00004D   75F002       MOV       B,#0x2
   \   000050   ED           MOV       A,R5
   \   000051   A4           MUL       AB
   \   000052   2E           ADD       A,R6
   \   000053   FD           MOV       R5,A
   \   000054   74..         MOV       A,#??BUFFER & 0xff
   \   000056   2C           ADD       A,R4
   \   000057   F582         MOV       DPL,A
   \   000059   74..         MOV       A,#(??BUFFER >> 8) & 0xff
   \   00005B   3D           ADDC      A,R5
   \   00005C   F583         MOV       DPH,A
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FC           MOV       R4,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FD           MOV       R5,A
   \   000063   EC           MOV       A,R4
   \   000064   FA           MOV       R2,A
   \   000065   ED           MOV       A,R5
   \   000066   FB           MOV       R3,A
     65                  idx++;
   \   000067   E8           MOV       A,R0
   \   000068   2402         ADD       A,#0x2
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??BF_get_tx_1
   \   00006D   09           INC       R1
     66                  break;
     67              }
     68            }
     69            return ret;
   \                     ??BF_get_tx_1:
   \   00006E   7F01         MOV       R7,#0x1
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
     70          };
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          struct frame* BF_get_rx(int *idx){
   \                     BF_get_rx:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
     73            struct frame* ret = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
     74            while (*idx < MAX_TXRX_BUFFER){
   \                     ??BF_get_rx_0:
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   C3           CLR       C
   \   000012   E0           MOVX      A,@DPTR
   \   000013   9414         SUBB      A,#0x14
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   9400         SUBB      A,#0x0
   \   000019   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001B   65D0         XRL       A,PSW
   \   00001D   33           RLC       A
   \   00001E   504E         JNC       ??BF_get_rx_1
     75              if (BUFFER_PROP[*idx].rx_ready){
   \   000020   8882         MOV       DPL,R0
   \   000022   8983         MOV       DPH,R1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   24..         ADD       A,#??BUFFER_PROP & 0xff
   \   000027   FC           MOV       R4,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   34..         ADDC      A,#(??BUFFER_PROP >> 8) & 0xff
   \   00002C   FD           MOV       R5,A
   \   00002D   8C82         MOV       DPL,R4
   \   00002F   8D83         MOV       DPH,R5
   \   000031   E0           MOVX      A,@DPTR
   \   000032   A2E1         MOV       C,0xE0 /* A   */.1
   \   000034   50D7         JNC       ??BF_get_rx_0
     76                  ret = BUFFER[*idx];
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FC           MOV       R4,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FD           MOV       R5,A
   \   00003F   EC           MOV       A,R4
   \   000040   75F002       MOV       B,#0x2
   \   000043   A4           MUL       AB
   \   000044   CC           XCH       A,R4
   \   000045   AEF0         MOV       R6,B
   \   000047   75F000       MOV       B,#0x0
   \   00004A   A4           MUL       AB
   \   00004B   2E           ADD       A,R6
   \   00004C   FE           MOV       R6,A
   \   00004D   75F002       MOV       B,#0x2
   \   000050   ED           MOV       A,R5
   \   000051   A4           MUL       AB
   \   000052   2E           ADD       A,R6
   \   000053   FD           MOV       R5,A
   \   000054   74..         MOV       A,#??BUFFER & 0xff
   \   000056   2C           ADD       A,R4
   \   000057   F582         MOV       DPL,A
   \   000059   74..         MOV       A,#(??BUFFER >> 8) & 0xff
   \   00005B   3D           ADDC      A,R5
   \   00005C   F583         MOV       DPH,A
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FC           MOV       R4,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FD           MOV       R5,A
   \   000063   EC           MOV       A,R4
   \   000064   FA           MOV       R2,A
   \   000065   ED           MOV       A,R5
   \   000066   FB           MOV       R3,A
     77                  idx++;
   \   000067   E8           MOV       A,R0
   \   000068   2402         ADD       A,#0x2
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??BF_get_rx_1
   \   00006D   09           INC       R1
     78                  break;
     79              }
     80            }
     81            return ret;
   \                     ??BF_get_rx_1:
   \   00006E   7F01         MOV       R7,#0x1
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
     82          };
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\cpu.c
      1          #include "action_manager.h"
      2          #include "ioCC2530.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);   
      9           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          module_s CPU_MODULE = {ALIAS(HW_Init)};
   \                     CPU_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for CPU_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static void HW_Init(void){
   \                     ??HW_Init_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     13            /* Сбрасываем бит OSC32K, будет выбран 32.768 кварц */
     14            CLKCONCMD &= ~(1<<7); 
   \   000000   53C67F       ANL       0xc6,#0x7f
     15            /* Ждем пока бит не станет 0 */
     16            while (CLKCONSTA & (1<<7)); 
   \                     ??HW_Init_4:
   \   000003   E59E         MOV       A,0x9e
   \   000005   A2E7         MOV       C,0xE0 /* A   */.7
   \   000007   40FA         JC        ??HW_Init_4
     17            /* Переходим на 32 Мгц */
     18            CLKCONCMD = 0;// (1<<3);
   \   000009   75C600       MOV       0xc6,#0x0
     19            while (CLKCONSTA&(1<<6));
   \                     ??HW_Init_5:
   \   00000C   E59E         MOV       A,0x9e
   \   00000E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000010   40FA         JC        ??HW_Init_5
     20          };  
   \   000012   02....       LJMP      ?BRET
   \   000015                REQUIRE CLKCONCMD
   \   000015                REQUIRE CLKCONSTA
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
      1          #include "debug.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);  
      9          static void uart_init(void);
     10           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     11          module_s DBG_MODULE = {ALIAS(HW_Init)};
   \                     DBG_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for DBG_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     12          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     13          static void HW_Init(void){
   \                     ??HW_Init_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     14          #ifndef DEBUG
     15            return;
     16          #endif
     17          #ifndef PRINT_TO_TERMINAL  
     18            uart_init();
     19          #endif
     20          };  
   \   000000   02....       LJMP      ?BRET
     21          
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          void DBG_CORE_HALT(void){
   \                     DBG_CORE_HALT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     24            while(1);
   \                     ??DBG_CORE_HALT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_HALT_0
     25          }
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          void DBG_CORE_FAULT(void){
   \                     DBG_CORE_FAULT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     28            while(1);
   \                     ??DBG_CORE_FAULT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_FAULT_0
     29          }
     30          
     31          // Настройка порта uart для отладки
     32          static void uart_init(void){
     33            // Выбор расположения UART на выводах
     34            char U0CFG = 0; // 0={TX=P0_3, RX=P0_2
     35            PERCFG |= (U0CFG<<0); 
     36            // U0UCR регистр настройки режима uart. меня устраивает по умолчанию
     37            U0CSR = (1<<7); // Выбираем режим uart  
     38            // Настройка скорости передачи данных на 2М  
     39            U0BAUD = 0;  // табличные значения из pdf
     40            U0GCR =  16;
     41            // Включаем альтернативные функции выводов
     42            P0SEL = (1<<2)|(1<<3);
     43            U0CSR |= (1<<6);
     44          }
     45          
     46          #ifndef PRINT_TO_TERMINAL 
     47          #include <yfuns.h>
     48          _STD_BEGIN
     49          #pragma module_name = "?__write"
     50          
     51          int MyLowLevelPutchar(int x){
     52            while( U0CSR&(1<<0));
     53            U0DBUF = x;
     54            return x;
     55          }
     56          
     57          size_t __write(int handle, const unsigned char * buffer, size_t size){
     58            /* Remove the #if #endif pair to enable the implementation */
     59            size_t nChars = 0;
     60            if (buffer == 0)  {
     61              return 0;
     62            }
     63            /* This template only writes to "standard out" and "standard err",
     64             * for all other file handles it returns failure. */
     65            if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR)  {
     66              return _LLIO_ERROR;
     67            }
     68          
     69            for (/* Empty */; size != 0; --size){
     70              if (MyLowLevelPutchar(*buffer++) < 0){
     71                return _LLIO_ERROR;
     72              }
     73              ++nChars;
     74            }
     75            return nChars;
     76          }
     77          _STD_END
     78          
     79          #endif
     80          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\frame.c
      1          #include "action_manager.h"
      2          #include "frame.h"
      3          #include "debug.h"
      4          #include "global.h"
      5          #include "mem_utils.h"
      6          #include "mem_slots.h"
      7          
      8          /**
      9          @file Статическое хранение принятых пакетов
     10          */
     11          static void SW_Init(void); 
     12          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     13          module_s FR_MODULE = {ALIAS(SW_Init)};
   \                     FR_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for FR_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          static int FRAME_COUNT = 0;
   \                     ??FRAME_COUNT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          static void SW_Init(void){ 
   \                     ??SW_Init_1:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     17            FRAME_COUNT = 0;
   \   000004   90....       MOV       DPTR,#??FRAME_COUNT
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
     18          }; 
   \   00000E   D083         POP       DPH
   \   000010   D082         POP       DPL
   \   000012   02....       LJMP      ?BRET
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          struct frame* FR_create(){
   \                     FR_create:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     21            FRAME_COUNT++;
   \   000004   90....       MOV       DPTR,#??FRAME_COUNT
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2401         ADD       A,#0x1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   3400         ADDC      A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
     22            return (struct frame*)SL_alloc();
   \   000010                ; Setup parameters for call to function SL_alloc
   \   000010   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000013   D083         POP       DPH
   \   000015   D082         POP       DPL
   \   000017   02....       LJMP      ?BRET
     23          };
     24          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          void FR_delete(struct frame *frame){
   \                     FR_delete:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     26            FRAME_COUNT--;
   \   000009   90....       MOV       DPTR,#??FRAME_COUNT
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   24FF         ADD       A,#-0x1
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   34FF         ADDC      A,#-0x1
   \   000014   F0           MOVX      @DPTR,A
     27            SL_free((char*)frame);
   \   000015                ; Setup parameters for call to function SL_free
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
     28          }
   \   00001C   7F01         MOV       R7,#0x1
   \   00001E   02....       LJMP      ?BANKED_LEAVE_XDATA
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          void FR_add_header(struct frame* frame ,void *head, char len){
   \                     FR_add_header:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
   \   000012   89..         MOV       ?V2,R1
     31            int new_len = frame->len + len;
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FA           MOV       R2,A
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   E5..         MOV       A,?V2
   \   000020   F8           MOV       R0,A
   \   000021   7900         MOV       R1,#0x0
   \   000023   EA           MOV       A,R2
   \   000024   28           ADD       A,R0
   \   000025   FE           MOV       R6,A
   \   000026   EB           MOV       A,R3
   \   000027   39           ADDC      A,R1
   \   000028   FF           MOV       R7,A
     32            ASSERT( new_len < MAX_PAYLOAD_SIZE);
   \   000029   C3           CLR       C
   \   00002A   EE           MOV       A,R6
   \   00002B   9480         SUBB      A,#-0x80
   \   00002D   EF           MOV       A,R7
   \   00002E   9400         SUBB      A,#0x0
   \   000030   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000032   65D0         XRL       A,PSW
   \   000034   33           RLC       A
   \   000035   4037         JC        ??FR_add_header_0
   \   000037                ; Setup parameters for call to function printf
   \   000037   75....       MOV       ?V4,#??__FUNCTION___11 & 0xff
   \   00003A   75....       MOV       ?V5,#(??__FUNCTION___11 >> 8) & 0xff
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..20       MOV       ?V4,#0x20
   \   000045   75..00       MOV       ?V5,#0x0
   \   000048   78..         MOV       R0,#?V4
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   75....       MOV       ?V4,#`?<Constant "frame.c">` & 0xff
   \   000050   75....       MOV       ?V5,#(`?<Constant "frame.c">` >> 8) & 0xff
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_3` & 0xff
   \   00005A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_3` >> 8) & 0xff
   \   00005C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00005F   7406         MOV       A,#0x6
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064                ; Setup parameters for call to function printf
   \   000064   7A..         MOV       R2,#`?<Constant "\\"new_len < MAX_PAYLOA...">` & 0xff
   \   000066   7B..         MOV       R3,#(`?<Constant "\\"new_len < MAX_PAYLOA...">` >> 8) & 0xff
   \   000068   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00006B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     33            
     34            // Сдвинем данные на размер вставки
     35            struct memcpy memcpy = {
     36              .src = frame->payload,
     37              .dst = &frame->payload[len],
     38              .len = frame->len
     39            };
   \                     ??FR_add_header_0:
   \   00006E   E5..         MOV       A,?V2
   \   000070   F8           MOV       R0,A
   \   000071   7900         MOV       R1,#0x0
   \   000073   E5..         MOV       A,?V0
   \   000075   28           ADD       A,R0
   \   000076   F8           MOV       R0,A
   \   000077   E5..         MOV       A,?V1
   \   000079   39           ADDC      A,R1
   \   00007A   F9           MOV       R1,A
   \   00007B   E8           MOV       A,R0
   \   00007C   2415         ADD       A,#0x15
   \   00007E   F8           MOV       R0,A
   \   00007F   5001         JNC       ??FR_add_header_1
   \   000081   09           INC       R1
   \                     ??FR_add_header_1:
   \   000082   85..82       MOV       DPL,?XSP + 0
   \   000085   85..83       MOV       DPH,?XSP + 1
   \   000088   E8           MOV       A,R0
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   E9           MOV       A,R1
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   E5..         MOV       A,?V0
   \   00008F   2415         ADD       A,#0x15
   \   000091   F8           MOV       R0,A
   \   000092   E4           CLR       A
   \   000093   35..         ADDC      A,?V1
   \   000095   F9           MOV       R1,A
   \   000096   7402         MOV       A,#0x2
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   E8           MOV       A,R0
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   E9           MOV       A,R1
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   85..82       MOV       DPL,?V0
   \   0000A3   85..83       MOV       DPH,?V1
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   C0E0         PUSH      A
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   D0E0         POP       A
   \   0000B0   F0           MOVX      @DPTR,A
     40            MEM_memcpy(&memcpy);
   \   0000B1                ; Setup parameters for call to function MEM_memcpy
   \   0000B1   AA..         MOV       R2,?XSP + 0
   \   0000B3   AB..         MOV       R3,?XSP + 1
   \   0000B5   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     41            // Скопируем новые данные
     42            memcpy.src = head;
   \   0000B8   7402         MOV       A,#0x2
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   E5..         MOV       A,?V6
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E5..         MOV       A,?V7
   \   0000C3   F0           MOVX      @DPTR,A
     43            memcpy.dst = frame->payload;
   \   0000C4   E5..         MOV       A,?V0
   \   0000C6   2415         ADD       A,#0x15
   \   0000C8   F8           MOV       R0,A
   \   0000C9   E4           CLR       A
   \   0000CA   35..         ADDC      A,?V1
   \   0000CC   F9           MOV       R1,A
   \   0000CD   85..82       MOV       DPL,?XSP + 0
   \   0000D0   85..83       MOV       DPH,?XSP + 1
   \   0000D3   E8           MOV       A,R0
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E9           MOV       A,R1
   \   0000D7   F0           MOVX      @DPTR,A
     44            memcpy.len = len;
   \   0000D8   E5..         MOV       A,?V2
   \   0000DA   C0E0         PUSH      A
   \   0000DC   7404         MOV       A,#0x4
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   D0E0         POP       A
   \   0000E3   F0           MOVX      @DPTR,A
     45            MEM_memcpy(&memcpy);
   \   0000E4                ; Setup parameters for call to function MEM_memcpy
   \   0000E4   AA..         MOV       R2,?XSP + 0
   \   0000E6   AB..         MOV       R3,?XSP + 1
   \   0000E8   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     46            frame->len = new_len;
   \   0000EB   EE           MOV       A,R6
   \   0000EC   C0E0         PUSH      A
   \   0000EE   85..82       MOV       DPL,?V0
   \   0000F1   85..83       MOV       DPH,?V1
   \   0000F4   D0E0         POP       A
   \   0000F6   F0           MOVX      @DPTR,A
     47          };
   \   0000F7   7405         MOV       A,#0x5
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   7F08         MOV       R7,#0x8
   \   0000FE   02....       LJMP      ?BANKED_LEAVE_XDATA
     48          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     49          void FR_del_header(struct frame* frame, char len){
   \                     FR_del_header:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   89..         MOV       ?V2,R1
     50            ASSERT(frame->len >= len);
   \   000010   85..82       MOV       DPL,?V0
   \   000013   85..83       MOV       DPH,?V1
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C3           CLR       C
   \   000018   95..         SUBB      A,?V2
   \   00001A   5037         JNC       ??FR_del_header_0
   \   00001C                ; Setup parameters for call to function printf
   \   00001C   75....       MOV       ?V4,#??__FUNCTION___12 & 0xff
   \   00001F   75....       MOV       ?V5,#(??__FUNCTION___12 >> 8) & 0xff
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   75..32       MOV       ?V4,#0x32
   \   00002A   75..00       MOV       ?V5,#0x0
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75....       MOV       ?V4,#`?<Constant "frame.c">` & 0xff
   \   000035   75....       MOV       ?V5,#(`?<Constant "frame.c">` >> 8) & 0xff
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_3` & 0xff
   \   00003F   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_3` >> 8) & 0xff
   \   000041   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000044   7406         MOV       A,#0x6
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function printf
   \   000049   7A..         MOV       R2,#`?<Constant "\\"frame->len >= len\\" F...">` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant "\\"frame->len >= len\\" F...">` >> 8) & 0xff
   \   00004D   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000050                ; Setup parameters for call to function DBG_CORE_HALT
   \   000050   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     51            int new_len = frame->len - len;
   \                     ??FR_del_header_0:
   \   000053   85..82       MOV       DPL,?V0
   \   000056   85..83       MOV       DPH,?V1
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FA           MOV       R2,A
   \   00005B   7B00         MOV       R3,#0x0
   \   00005D   E5..         MOV       A,?V2
   \   00005F   F8           MOV       R0,A
   \   000060   7900         MOV       R1,#0x0
   \   000062   EA           MOV       A,R2
   \   000063   C3           CLR       C
   \   000064   98           SUBB      A,R0
   \   000065   FE           MOV       R6,A
   \   000066   EB           MOV       A,R3
   \   000067   99           SUBB      A,R1
   \   000068   FF           MOV       R7,A
     52            frame->len = new_len;
   \   000069   EE           MOV       A,R6
   \   00006A   C0E0         PUSH      A
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   D0E0         POP       A
   \   000074   F0           MOVX      @DPTR,A
     53            struct memcpy memcpy = {
     54              .src = &frame->payload[len],
     55              .dst = frame->payload,
     56              .len = new_len
     57            };  
   \   000075   E5..         MOV       A,?V0
   \   000077   2415         ADD       A,#0x15
   \   000079   F8           MOV       R0,A
   \   00007A   E4           CLR       A
   \   00007B   35..         ADDC      A,?V1
   \   00007D   F9           MOV       R1,A
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   E8           MOV       A,R0
   \   000085   F0           MOVX      @DPTR,A
   \   000086   A3           INC       DPTR
   \   000087   E9           MOV       A,R1
   \   000088   F0           MOVX      @DPTR,A
   \   000089   E5..         MOV       A,?V2
   \   00008B   F8           MOV       R0,A
   \   00008C   7900         MOV       R1,#0x0
   \   00008E   E5..         MOV       A,?V0
   \   000090   28           ADD       A,R0
   \   000091   F8           MOV       R0,A
   \   000092   E5..         MOV       A,?V1
   \   000094   39           ADDC      A,R1
   \   000095   F9           MOV       R1,A
   \   000096   E8           MOV       A,R0
   \   000097   2415         ADD       A,#0x15
   \   000099   F8           MOV       R0,A
   \   00009A   5001         JNC       ??FR_del_header_1
   \   00009C   09           INC       R1
   \                     ??FR_del_header_1:
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E8           MOV       A,R0
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E9           MOV       A,R1
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   EE           MOV       A,R6
   \   0000A8   C0E0         PUSH      A
   \   0000AA   7404         MOV       A,#0x4
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   D0E0         POP       A
   \   0000B1   F0           MOVX      @DPTR,A
     58            MEM_memcpy(&memcpy);  
   \   0000B2                ; Setup parameters for call to function MEM_memcpy
   \   0000B2   AA..         MOV       R2,?XSP + 0
   \   0000B4   AB..         MOV       R3,?XSP + 1
   \   0000B6   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     59          }
   \   0000B9   7405         MOV       A,#0x5
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE   7F06         MOV       R7,#0x6
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          int FR_busy(){
   \                     FR_busy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     62            return SL_busy();
   \   000004                ; Setup parameters for call to function SL_busy
   \   000004   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     63          }
     64          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     65          int FR_available(){
   \                     FR_available:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     66            return SL_available();
   \   000004                ; Setup parameters for call to function SL_available
   \   000004   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     67          };
E:\WMNU\IAR_NEW_ARCH\PRJ Test\main.c
      1          #include "action_manager.h"
      2          #include "debug.h"
      3          
      4          extern void u_test(void);
      5          extern void u_alarm_timer(void);
      6          extern void u_mem_utils(void);
      7          extern void u_macros(void);
      8          extern void u_mem_slots(void);
      9          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     10          void main(){
   \                     main:
   \   000000                ; Auto size: 0
     11          //  AM_HW_Init();
     12              AM_SW_Init();
   \   000000                ; Setup parameters for call to function AM_SW_Init
   \   000000   12....       LCALL     `??AM_SW_Init::?relay`; Banked call to: AM_SW_Init
     13            
     14            //u_test();
     15           // u_alarm_timer();
     16            //u_macros();
     17            //u_mem_utils(); // TODO красные зоны
     18            u_mem_slots();
   \   000003                ; Setup parameters for call to function u_mem_slots
   \   000003   12....       LCALL     `??u_mem_slots::?relay`; Banked call to: u_mem_slots
     19            DBG_CORE_HALT();
   \   000006                ; Setup parameters for call to function DBG_CORE_HALT
   \   000006   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     20          }
   \   000009   02....       LJMP      ?BRET
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_slots.c
      1          #include "debug.h"
      2          #include "global.h"
      3          #include "macros.h"
      4          #include "stdbool.h"
      5          #include "action_manager.h"
      6          #include "mem_utils.h"  
      7           
      8          
      9          //!< Максимальный размер данных в одном слоте
     10          #define SLOT_BUFFER_SIZE 150
     11          #define RED_ZONE_CODE 0x73
     12          
     13          typedef char red_zone_t;
     14          
     15          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     16          module_s MS_MODULE = {ALIAS(SW_Init)};
   \                     MS_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for MS_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     17          
     18          struct property{
     19            char taken: 1;
     20          };
     21          
     22          struct slot{
     23            struct property property;
     24            red_zone_t red_zone_1;
     25            char buffer[SLOT_BUFFER_SIZE];
     26            red_zone_t red_zone_2;
     27          };
     28          
     29          //!< Хранилище слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          static struct slot SLOT_POOL[SLOT_POOL_ITEMS];
   \                     ??SLOT_POOL:
   \   000000                DS 3060
   \   000BF4                REQUIRE __INIT_XDATA_Z
     31          //!< Указатель на текщий элемент поиска

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     32          static struct slot *slot_ptr;
   \                     ??slot_ptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     33          //!< Количество занятых слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34          static int slot_busy;
   \                     ??slot_busy:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          void SW_Init(void){
   \                     ??SW_Init_2:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     37            slot_busy = 0;
   \   000004   90....       MOV       DPTR,#??slot_busy
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
     38            slot_ptr = NULL;
   \   00000E   90....       MOV       DPTR,#??slot_ptr
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
     39            for_each_type(struct slot, SLOT_POOL, slot){
   \   000018   78..         MOV       R0,#??SLOT_POOL & 0xff
   \   00001A   79..         MOV       R1,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SW_Init_8:
   \   00001C   C3           CLR       C
   \   00001D   E8           MOV       A,R0
   \   00001E   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000020   E9           MOV       A,R1
   \   000021   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000023   5025         JNC       ??SW_Init_9
     40              slot->property.taken = false;
   \   000025   8882         MOV       DPL,R0
   \   000027   8983         MOV       DPH,R1
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C2E0         CLR       0xE0 /* A   */.0
   \   00002C   F0           MOVX      @DPTR,A
     41              slot->red_zone_1 = RED_ZONE_CODE;
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   7473         MOV       A,#0x73
   \   000034   F0           MOVX      @DPTR,A
     42              slot->red_zone_2 = RED_ZONE_CODE;
   \   000035   E8           MOV       A,R0
   \   000036   2498         ADD       A,#-0x68
   \   000038   F582         MOV       DPL,A
   \   00003A   E4           CLR       A
   \   00003B   39           ADDC      A,R1
   \   00003C   F583         MOV       DPH,A
   \   00003E   7473         MOV       A,#0x73
   \   000040   F0           MOVX      @DPTR,A
     43            }
   \   000041   E8           MOV       A,R0
   \   000042   2499         ADD       A,#-0x67
   \   000044   F8           MOV       R0,A
   \   000045   50D5         JNC       ??SW_Init_8
   \   000047   09           INC       R1
   \   000048   80D2         SJMP      ??SW_Init_8
     44          };
   \                     ??SW_Init_9:
   \   00004A   D083         POP       DPH
   \   00004C   D082         POP       DPL
   \   00004E   02....       LJMP      ?BRET
     45          
     46          /**
     47          @brief Выделяем свободный слот
     48          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     49          static inline struct slot* alloc(void){
   \                     ??alloc:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     50            for (slot_ptr = SLOT_POOL; 
   \   000004   90....       MOV       DPTR,#??slot_ptr
   \   000007   74..         MOV       A,#??SLOT_POOL & 0xff
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   74..         MOV       A,#(??SLOT_POOL >> 8) & 0xff
   \   00000D   F0           MOVX      @DPTR,A
     51                 slot_ptr < &SLOT_POOL[SLOT_POOL_ITEMS]; 
   \                     ??alloc_1:
   \   00000E   90....       MOV       DPTR,#??slot_ptr
   \   000011   C3           CLR       C
   \   000012   E0           MOVX      A,@DPTR
   \   000013   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000019   503F         JNC       ??alloc_2
     52                 slot_ptr++){  
     53              if (!slot_ptr->property.taken){
   \   00001B   90....       MOV       DPTR,#??slot_ptr
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F583         MOV       DPH,A
   \   000024   8882         MOV       DPL,R0
   \   000026   E0           MOVX      A,@DPTR
   \   000027   A2E0         MOV       C,0xE0 /* A   */.0
   \   000029   4019         JC        ??alloc_3
     54                slot_ptr->property.taken = true;
   \   00002B   90....       MOV       DPTR,#??slot_ptr
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F583         MOV       DPH,A
   \   000034   8882         MOV       DPL,R0
   \   000036   E0           MOVX      A,@DPTR
   \   000037   D2E0         SETB      0xE0 /* A   */.0
   \   000039   F0           MOVX      @DPTR,A
     55                return slot_ptr;
   \   00003A   90....       MOV       DPTR,#??slot_ptr
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
   \   000042   801A         SJMP      ??alloc_4
     56              }
     57            };
   \                     ??alloc_3:
   \   000044   90....       MOV       DPTR,#??slot_ptr
   \   000047   E0           MOVX      A,@DPTR
   \   000048   2499         ADD       A,#-0x67
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   3400         ADDC      A,#0x0
   \   00004F   F9           MOV       R1,A
   \   000050   90....       MOV       DPTR,#??slot_ptr
   \   000053   E8           MOV       A,R0
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   E9           MOV       A,R1
   \   000057   F0           MOVX      @DPTR,A
   \   000058   80B4         SJMP      ??alloc_1
     58            return NULL;
   \                     ??alloc_2:
   \   00005A   7A00         MOV       R2,#0x0
   \   00005C   7B00         MOV       R3,#0x0
   \                     ??alloc_4:
   \   00005E   D083         POP       DPH
   \   000060   D082         POP       DPL
   \   000062   02....       LJMP      ?BRET
     59          }
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          static inline void fill_zero_slot(struct slot *slot){
   \                     ??fill_zero_slot:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
     62            struct memset memset = {
     63              .dst = slot->buffer,
     64              .len = SLOT_BUFFER_SIZE,
     65              .val = 0};
   \   00000E   90....       MOV       DPTR,#`?<Constant {(char *)0, 150, 0}>`
   \   000011   AC..         MOV       R4,?XSP + 0
   \   000013   AD..         MOV       R5,?XSP + 1
   \   000015   7404         MOV       A,#0x4
   \   000017   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00001A   EE           MOV       A,R6
   \   00001B   2402         ADD       A,#0x2
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F9           MOV       R1,A
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   E8           MOV       A,R0
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E9           MOV       A,R1
   \   00002B   F0           MOVX      @DPTR,A
     66            MEM_memset(&memset);
   \   00002C                ; Setup parameters for call to function MEM_memset
   \   00002C   AA..         MOV       R2,?XSP + 0
   \   00002E   AB..         MOV       R3,?XSP + 1
   \   000030   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     67          }
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   7F01         MOV       R7,#0x1
   \   00003A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {(char *)0, 150, 0}>`:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for <Constant {(char *)0, 150, 0`
   \   000004                REQUIRE __INIT_XDATA_I
     68          
     69          /**
     70          @brief Выделяем свободный слот, но в поиске не участвует slot_ptr.
     71          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          static inline struct slot* protect_alloc(void){
   \                     ??protect_alloc:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     73            for_each_type(struct slot, SLOT_POOL, slot){
   \   000004   7A..         MOV       R2,#??SLOT_POOL & 0xff
   \   000006   7B..         MOV       R3,#(??SLOT_POOL >> 8) & 0xff
   \                     ??protect_alloc_1:
   \   000008   C3           CLR       C
   \   000009   EA           MOV       A,R2
   \   00000A   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   00000C   EB           MOV       A,R3
   \   00000D   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   00000F   502C         JNC       ??protect_alloc_2
     74              if (slot == slot_ptr)
   \   000011   90....       MOV       DPTR,#??slot_ptr
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   EA           MOV       A,R2
   \   00001A   68           XRL       A,R0
   \   00001B   7002         JNZ       ??protect_alloc_3
   \   00001D   EB           MOV       A,R3
   \   00001E   69           XRL       A,R1
   \                     ??protect_alloc_3:
   \   00001F   6013         JZ        ??protect_alloc_4
     75                continue;
     76              if (!slot->property.taken){
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   400A         JC        ??protect_alloc_4
     77                slot->property.taken = true;
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   D2E0         SETB      0xE0 /* A   */.0
   \   000031   F0           MOVX      @DPTR,A
     78                return slot;
   \   000032   800D         SJMP      ??protect_alloc_5
     79              }
     80            };
   \                     ??protect_alloc_4:
   \   000034   EA           MOV       A,R2
   \   000035   2499         ADD       A,#-0x67
   \   000037   FA           MOV       R2,A
   \   000038   50CE         JNC       ??protect_alloc_1
   \   00003A   0B           INC       R3
   \   00003B   80CB         SJMP      ??protect_alloc_1
     81            return NULL;  
   \                     ??protect_alloc_2:
   \   00003D   7A00         MOV       R2,#0x0
   \   00003F   7B00         MOV       R3,#0x0
   \                     ??protect_alloc_5:
   \   000041   D083         POP       DPH
   \   000043   D082         POP       DPL
   \   000045   02....       LJMP      ?BRET
     82          }
     83          
     84          /**
     85          @brief Выделяем слот.
     86          @detail Алгоритм имеет защиту от повторного входа. Защита организована
     87          через использование глобального указателя slot_ptr. Если slot_ptr NULL,
     88          для выделения слота вызывается фун-я alloc, которая в качестве итератора
     89          использует slot_ptr. При повторном вхождении если slot_ptr не равен NULL,
     90          используется функ-я protect_alloc, которая пропускает при поиске элемент
     91          slot_ptr. Буфер заполнен нулями.
     92          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          char* SL_alloc(void){  
   \                     SL_alloc:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     94            struct slot *ret;
     95            
     96            if (slot_ptr == NULL){
   \   000005   90....       MOV       DPTR,#??slot_ptr
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   49           ORL       A,R1
   \   00000F   7017         JNZ       ??SL_alloc_0
     97              ret = alloc();
   \   000011                ; Setup parameters for call to function alloc
   \   000011   12....       LCALL     `??alloc::?relay`; Banked call to: alloc
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A   AF..         MOV       R7,?V1
     98              slot_ptr = NULL;
   \   00001C   90....       MOV       DPTR,#??slot_ptr
   \   00001F   7400         MOV       A,#0x0
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   7400         MOV       A,#0x0
   \   000025   F0           MOVX      @DPTR,A
   \   000026   800B         SJMP      ??SL_alloc_1
     99            }
    100            else 
    101              ret = protect_alloc();
   \                     ??SL_alloc_0:
   \   000028                ; Setup parameters for call to function protect_alloc
   \   000028   12....       LCALL     `??protect_alloc::?relay`; Banked call to: protect_alloc
   \   00002B   8A..         MOV       ?V0,R2
   \   00002D   8B..         MOV       ?V1,R3
   \   00002F   AE..         MOV       R6,?V0
   \   000031   AF..         MOV       R7,?V1
    102            
    103            if (ret != NULL){
   \                     ??SL_alloc_1:
   \   000033   EE           MOV       A,R6
   \   000034   4F           ORL       A,R7
   \   000035   601C         JZ        ??SL_alloc_2
    104              fill_zero_slot(ret);
   \   000037                ; Setup parameters for call to function fill_zero_slot
   \   000037   EE           MOV       A,R6
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??fill_zero_slot::?relay`; Banked call to: fill_zero_slot
    105              slot_busy++;
   \   00003E   90....       MOV       DPTR,#??slot_busy
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2401         ADD       A,#0x1
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   3400         ADDC      A,#0x0
   \   000049   F0           MOVX      @DPTR,A
    106              return ret->buffer;
   \   00004A   EE           MOV       A,R6
   \   00004B   2402         ADD       A,#0x2
   \   00004D   FA           MOV       R2,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   FB           MOV       R3,A
   \   000051   8004         SJMP      ??SL_alloc_3
    107            }
    108            return NULL;
   \                     ??SL_alloc_2:
   \   000053   7A00         MOV       R2,#0x0
   \   000055   7B00         MOV       R3,#0x0
   \                     ??SL_alloc_3:
   \   000057   7F02         MOV       R7,#0x2
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
    109          };
    110          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void SL_free(char *buff){
   \                     SL_free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
    112            struct slot *slot = container_of(buff, struct slot, buffer);
   \   000009   E5..         MOV       A,?V6
   \   00000B   24FE         ADD       A,#-0x2
   \   00000D   FE           MOV       R6,A
   \   00000E   E5..         MOV       A,?V7
   \   000010   34FF         ADDC      A,#-0x1
   \   000012   FF           MOV       R7,A
    113            // Найдем индекс в массиве по указателю
    114            size_t index = ptr_distance(slot, SLOT_POOL) / sizeof(struct slot);
   \   000013   EE           MOV       A,R6
   \   000014   C3           CLR       C
   \   000015   94..         SUBB      A,#??SLOT_POOL & 0xff
   \   000017   F8           MOV       R0,A
   \   000018   EF           MOV       A,R7
   \   000019   94..         SUBB      A,#(??SLOT_POOL >> 8) & 0xff
   \   00001B   F9           MOV       R1,A
   \   00001C   7A99         MOV       R2,#-0x67
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     ?US_DIV_MOD
   \   000023   88..         MOV       ?V0,R0
   \   000025   89..         MOV       ?V1,R1
   \   000027   85....       MOV       ?V2,?V0
   \   00002A   85....       MOV       ?V3,?V1
    115            size_t offset = ptr_distance(slot, SLOT_POOL) % sizeof(struct slot);
   \   00002D   EE           MOV       A,R6
   \   00002E   C3           CLR       C
   \   00002F   94..         SUBB      A,#??SLOT_POOL & 0xff
   \   000031   F8           MOV       R0,A
   \   000032   EF           MOV       A,R7
   \   000033   94..         SUBB      A,#(??SLOT_POOL >> 8) & 0xff
   \   000035   F9           MOV       R1,A
   \   000036   7A99         MOV       R2,#-0x67
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     ?US_DIV_MOD
   \   00003D   8A..         MOV       ?V4,R2
   \   00003F   8B..         MOV       ?V5,R3
   \   000041   85....       MOV       ?V0,?V4
   \   000044   85....       MOV       ?V1,?V5
    116            
    117            ASSERT(index < SLOT_BUFFER_SIZE);
   \   000047   C3           CLR       C
   \   000048   E5..         MOV       A,?V2
   \   00004A   9496         SUBB      A,#-0x6a
   \   00004C   E5..         MOV       A,?V3
   \   00004E   9400         SUBB      A,#0x0
   \   000050   4037         JC        ??SL_free_0
   \   000052                ; Setup parameters for call to function printf
   \   000052   75....       MOV       ?V4,#??__FUNCTION___13 & 0xff
   \   000055   75....       MOV       ?V5,#(??__FUNCTION___13 >> 8) & 0xff
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75..75       MOV       ?V4,#0x75
   \   000060   75..00       MOV       ?V5,#0x0
   \   000063   78..         MOV       R0,#?V4
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   75....       MOV       ?V4,#`?<Constant "mem_slots.c">` & 0xff
   \   00006B   75....       MOV       ?V5,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   00006E   78..         MOV       R0,#?V4
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   000075   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   000077   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007A   7406         MOV       A,#0x6
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F                ; Setup parameters for call to function printf
   \   00007F   7A..         MOV       R2,#`?<Constant "\\"index < SLOT_BUFFER_...">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "\\"index < SLOT_BUFFER_...">` >> 8) & 0xff
   \   000083   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000086                ; Setup parameters for call to function DBG_CORE_HALT
   \   000086   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    118            ASSERT(offset == 0);
   \                     ??SL_free_0:
   \   000089   E5..         MOV       A,?V0
   \   00008B   45..         ORL       A,?V1
   \   00008D   6037         JZ        ??SL_free_1
   \   00008F                ; Setup parameters for call to function printf
   \   00008F   75....       MOV       ?V4,#??__FUNCTION___13 & 0xff
   \   000092   75....       MOV       ?V5,#(??__FUNCTION___13 >> 8) & 0xff
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   75..76       MOV       ?V4,#0x76
   \   00009D   75..00       MOV       ?V5,#0x0
   \   0000A0   78..         MOV       R0,#?V4
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   75....       MOV       ?V4,#`?<Constant "mem_slots.c">` & 0xff
   \   0000A8   75....       MOV       ?V5,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   0000AB   78..         MOV       R0,#?V4
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   0000B2   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   0000B4   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000B7   7406         MOV       A,#0x6
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC                ; Setup parameters for call to function printf
   \   0000BC   7A..         MOV       R2,#`?<Constant "\\"offset == 0\\" Faild! \\r\\n">` & 0xff
   \   0000BE   7B..         MOV       R3,#(`?<Constant "\\"offset == 0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   0000C0   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C3                ; Setup parameters for call to function DBG_CORE_HALT
   \   0000C3   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    119            ASSERT(slot->property.taken == true);
   \                     ??SL_free_1:
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   4037         JC        ??SL_free_2
   \   0000CF                ; Setup parameters for call to function printf
   \   0000CF   75....       MOV       ?V4,#??__FUNCTION___13 & 0xff
   \   0000D2   75....       MOV       ?V5,#(??__FUNCTION___13 >> 8) & 0xff
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   75..77       MOV       ?V4,#0x77
   \   0000DD   75..00       MOV       ?V5,#0x0
   \   0000E0   78..         MOV       R0,#?V4
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   75....       MOV       ?V4,#`?<Constant "mem_slots.c">` & 0xff
   \   0000E8   75....       MOV       ?V5,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   0000EB   78..         MOV       R0,#?V4
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   0000F2   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   0000F4   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000F7   7406         MOV       A,#0x6
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC                ; Setup parameters for call to function printf
   \   0000FC   7A..         MOV       R2,#`?<Constant "\\"slot->property.taken...">` & 0xff
   \   0000FE   7B..         MOV       R3,#(`?<Constant "\\"slot->property.taken...">` >> 8) & 0xff
   \   000100   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000103                ; Setup parameters for call to function DBG_CORE_HALT
   \   000103   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    120            
    121            slot->property.taken = false;
   \                     ??SL_free_2:
   \   000106   8E82         MOV       DPL,R6
   \   000108   8F83         MOV       DPH,R7
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   C2E0         CLR       0xE0 /* A   */.0
   \   00010D   F0           MOVX      @DPTR,A
    122            slot_busy--;
   \   00010E   90....       MOV       DPTR,#??slot_busy
   \   000111   E0           MOVX      A,@DPTR
   \   000112   24FF         ADD       A,#-0x1
   \   000114   F0           MOVX      @DPTR,A
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   34FF         ADDC      A,#-0x1
   \   000119   F0           MOVX      @DPTR,A
    123          };
   \   00011A   7F08         MOV       R7,#0x8
   \   00011C   02....       LJMP      ?BANKED_LEAVE_XDATA
    124          
    125          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          int SL_busy(){
   \                     SL_busy:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    127            ASSERT(slot_busy < SLOT_POOL_ITEMS);
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9414         SUBB      A,#0x14
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4037         JC        ??SL_busy_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75....       MOV       ?V0,#??__FUNCTION___14 & 0xff
   \   00001A   75....       MOV       ?V1,#(??__FUNCTION___14 >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..7F       MOV       ?V0,#0x7f
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000030   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   00003A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   00003C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003F   7406         MOV       A,#0x6
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function printf
   \   000044   7A..         MOV       R2,#`?<Constant "\\"slot_busy < SLOT_POO...">` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "\\"slot_busy < SLOT_POO...">` >> 8) & 0xff
   \   000048   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00004B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    128            return slot_busy;
   \                     ??SL_busy_0:
   \   00004E   90....       MOV       DPTR,#??slot_busy
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FA           MOV       R2,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FB           MOV       R3,A
   \   000056   7F02         MOV       R7,#0x2
   \   000058   02....       LJMP      ?BANKED_LEAVE_XDATA
    129          };
    130          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          int SL_available(){
   \                     SL_available:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    132            ASSERT(slot_busy < SLOT_POOL_ITEMS);  
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9414         SUBB      A,#0x14
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4037         JC        ??SL_available_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75....       MOV       ?V0,#??__FUNCTION___15 & 0xff
   \   00001A   75....       MOV       ?V1,#(??__FUNCTION___15 >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..84       MOV       ?V0,#-0x7c
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000030   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   00003A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   00003C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003F   7406         MOV       A,#0x6
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function printf
   \   000044   7A..         MOV       R2,#`?<Constant "\\"slot_busy < SLOT_POO...">` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "\\"slot_busy < SLOT_POO...">` >> 8) & 0xff
   \   000048   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00004B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    133            return SLOT_POOL_ITEMS - slot_busy;
   \                     ??SL_available_0:
   \   00004E   90....       MOV       DPTR,#??slot_busy
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   7414         MOV       A,#0x14
   \   000058   C3           CLR       C
   \   000059   98           SUBB      A,R0
   \   00005A   FA           MOV       R2,A
   \   00005B   7400         MOV       A,#0x0
   \   00005D   99           SUBB      A,R1
   \   00005E   FB           MOV       R3,A
   \   00005F   7F02         MOV       R7,#0x2
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    134          };
    135          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          int SL_zone_check(){
   \                     SL_zone_check:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    137            int index = 0;
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
    138            for_each_type(struct slot, SLOT_POOL, slot){
   \   000008   78..         MOV       R0,#??SLOT_POOL & 0xff
   \   00000A   79..         MOV       R1,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SL_zone_check_0:
   \   00000C   C3           CLR       C
   \   00000D   E8           MOV       A,R0
   \   00000E   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000010   E9           MOV       A,R1
   \   000011   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000013   502C         JNC       ??SL_zone_check_1
    139              if (!(slot->red_zone_1 == RED_ZONE_CODE &&
    140                    slot->red_zone_2 == RED_ZONE_CODE))
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6473         XRL       A,#0x73
   \   00001D   700E         JNZ       ??SL_zone_check_2
   \   00001F   E8           MOV       A,R0
   \   000020   2498         ADD       A,#-0x68
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6473         XRL       A,#0x73
   \   00002B   6006         JZ        ??SL_zone_check_3
    141                return index;
   \                     ??SL_zone_check_2:
   \   00002D   EC           MOV       A,R4
   \   00002E   FA           MOV       R2,A
   \   00002F   ED           MOV       A,R5
   \   000030   FB           MOV       R3,A
   \   000031   8012         SJMP      ??SL_zone_check_4
    142              index++;
   \                     ??SL_zone_check_3:
   \   000033   0C           INC       R4
   \   000034   EC           MOV       A,R4
   \   000035   7001         JNZ       ??SL_zone_check_5
   \   000037   0D           INC       R5
    143            }
   \                     ??SL_zone_check_5:
   \   000038   E8           MOV       A,R0
   \   000039   2499         ADD       A,#-0x67
   \   00003B   F8           MOV       R0,A
   \   00003C   50CE         JNC       ??SL_zone_check_0
   \   00003E   09           INC       R1
   \   00003F   80CB         SJMP      ??SL_zone_check_0
    144            return -1;
   \                     ??SL_zone_check_1:
   \   000041   7AFF         MOV       R2,#-0x1
   \   000043   7BFF         MOV       R3,#-0x1
   \                     ??SL_zone_check_4:
   \   000045   D083         POP       DPH
   \   000047   D082         POP       DPL
   \   000049   02....       LJMP      ?BRET
    145          };
    146          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_utils.c
      1          #include "mem_utils.h"
      2          #include "debug.h"
      3          
      4          /**
      5          @file Реентерабельное копирование
      6          */
      7          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      8          void MEM_memcpy(struct memcpy *memcpy){
   \                     MEM_memcpy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
      9            while (memcpy->len > 0){
   \                     ??MEM_memcpy_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   605E         JZ        ??MEM_memcpy_1
     10              *memcpy->dst = *memcpy->src;
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F583         MOV       DPH,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C0E0         PUSH      A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F583         MOV       DPH,A
   \   00002A   8882         MOV       DPL,R0
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
     11              memcpy->dst++;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2401         ADD       A,#0x1
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   3400         ADDC      A,#0x0
   \   00003B   F9           MOV       R1,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
     12              memcpy->src++;
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   2401         ADD       A,#0x1
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   3400         ADDC      A,#0x0
   \   000053   F9           MOV       R1,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   F0           MOVX      @DPTR,A
     13              memcpy->len--;
   \   00005F   8A82         MOV       DPL,R2
   \   000061   8B83         MOV       DPH,R3
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   24FF         ADD       A,#-0x1
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   8097         SJMP      ??MEM_memcpy_0
     14            }
     15          };
   \                     ??MEM_memcpy_1:
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   02....       LJMP      ?BRET
     16          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     17          void MEM_memset(struct memset *memset){
   \                     MEM_memset:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     18            while (memset->len > 0){
   \                     ??MEM_memset_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6025         JZ        ??MEM_memset_1
     19              *memset->dst = memset->val;
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C0E0         PUSH      A
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
     20              memset->len--;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   24FF         ADD       A,#-0x1
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   80D2         SJMP      ??MEM_memset_0
     21            }  
     22          };
   \                     ??MEM_memset_1:
   \   000032   D083         POP       DPH
   \   000034   D082         POP       DPL
   \   000036   02....       LJMP      ?BRET
     23          
     24          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\model.c
      1          #include "model.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          MODEL_s MODEL;
   \                     MODEL:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
      9          
     10          static void HW_Init(void);  
     11          static void SW_Init(void); 
     12          static void Sleep(void); 
     13          static void Wakeup(void); 
     14          static void Cold_Start(void); 
     15          static void Hot_Start(void); 
     16          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          module_s MD_MODULE = {ALIAS(HW_Init),ALIAS(SW_Init),ALIAS(Sleep),
   \                     MD_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for MD_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     18            ALIAS(Wakeup),ALIAS(Cold_Start), ALIAS(Hot_Start)};
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          static void HW_Init(void){};  
   \                     ??HW_Init_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     21          static void SW_Init(void){}; 
   \                     ??SW_Init_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     22          static void Sleep(void){}; 
   \                     ??Sleep:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          static void Wakeup(void){}; 
   \                     ??Wakeup:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          static void Cold_Start(void){}; 
   \                     ??Cold_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          static void Hot_Start(void){};
   \                     ??Hot_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     26          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\rtc.c
      1          #include "action_manager.h"
      2          
      3          /**
      4          @file
      5          */
      6           
      7          static void SW_Init(void); 
      8          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          module_s RTC_MODULE = {ALIAS(SW_Init)};
   \                     RTC_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for RTC_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     10           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static void SW_Init(void){}; 
   \                     ??SW_Init_4:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\time_manager.c
      1          #include "time_manager.h"
      2          #include "model.h"
      3          #include "action_manager.h"
      4          #include "debug.h"
      5          #include "action_manager.h"
      6          
      7          /**
      8          @file
      9          */
     10          
     11          #define MAX_TIME_SLOTS 50
     12          
     13          #define ACTIVE_INTERVAL (nwtime_t)327 // 9.979 мс
     14          #define SLEEP_INTERVAL (nwtime_t)327  // 9.979 мс
     15          #define UNACCOUNTED 68 // Остаток времени после 50ого интервала.
     16          #define FULL_INTERVAL (ACTIVE_INTERVAL + SLEEP_INTERVAL)
     17          #define SLOT_TO_NWTIME(slot) ((nwtime_t)(slot * FULL_INTERVAL))
     18          
     19          static void SW_Init(void); 
     20          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          module_s TM_MODULE = {ALIAS(SW_Init)};
   \                     TM_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for TM_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     22           
     23          //!< Список задач менеджера. Индекс - номер слота, значение-действие

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static alarm_t ALARMS[MAX_TIME_SLOTS];
   \                     ??ALARMS:
   \   000000                DS 50
   \   000032                REQUIRE __INIT_XDATA_Z
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          static void SW_Init(void){}; 
   \                     ??SW_Init_5:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     27          
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void TM_SetAlarm(timeslot_t slot, alarm_t alarm){
   \                     TM_SetAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     30            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4037         JC        ??TM_SetAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75....       MOV       ?V0,#??__FUNCTION___16 & 0xff
   \   000012   75....       MOV       ?V1,#(??__FUNCTION___16 >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75..1E       MOV       ?V0,#0x1e
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   000028   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   000034   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   7A..         MOV       R2,#`?<Constant "\\"slot < MAX_TIME_SLOT...">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "\\"slot < MAX_TIME_SLOT...">` >> 8) & 0xff
   \   000040   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000043                ; Setup parameters for call to function DBG_CORE_HALT
   \   000043   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     31            ALARMS[slot] |= alarm;
   \                     ??TM_SetAlarm_0:
   \   000046   EE           MOV       A,R6
   \   000047   F8           MOV       R0,A
   \   000048   7900         MOV       R1,#0x0
   \   00004A   74..         MOV       A,#??ALARMS & 0xff
   \   00004C   28           ADD       A,R0
   \   00004D   F582         MOV       DPL,A
   \   00004F   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   000051   39           ADDC      A,R1
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   4F           ORL       A,R7
   \   000056   F0           MOVX      @DPTR,A
     32          }
   \   000057   7F02         MOV       R7,#0x2
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
     33          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void TM_ClrAlarm(timeslot_t slot, alarm_t alarm){
   \                     TM_ClrAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     35            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4037         JC        ??TM_ClrAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75....       MOV       ?V0,#??__FUNCTION___17 & 0xff
   \   000012   75....       MOV       ?V1,#(??__FUNCTION___17 >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75..23       MOV       ?V0,#0x23
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   000028   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   000034   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   7A..         MOV       R2,#`?<Constant "\\"slot < MAX_TIME_SLOT...">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "\\"slot < MAX_TIME_SLOT...">` >> 8) & 0xff
   \   000040   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000043                ; Setup parameters for call to function DBG_CORE_HALT
   \   000043   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     36            ALARMS[slot] &= (~alarm);
   \                     ??TM_ClrAlarm_0:
   \   000046   EF           MOV       A,R7
   \   000047   F4           CPL       A
   \   000048   FA           MOV       R2,A
   \   000049   EE           MOV       A,R6
   \   00004A   F8           MOV       R0,A
   \   00004B   7900         MOV       R1,#0x0
   \   00004D   74..         MOV       A,#??ALARMS & 0xff
   \   00004F   28           ADD       A,R0
   \   000050   F582         MOV       DPL,A
   \   000052   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   000054   39           ADDC      A,R1
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   5A           ANL       A,R2
   \   000059   F0           MOVX      @DPTR,A
     37          }
   \   00005A   7F02         MOV       R7,#0x2
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
     38          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     39          void TM_AdjustTime(nwtime_t time){
   \                     TM_AdjustTime:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     40            
     41          }
   \   000000   02....       LJMP      ?BRET
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void TM_IRQ(nwtime_t time){
   \                     TM_IRQ:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     44            LOG_OFF("ALARM! %d", time);
     45            AM_Hot_start();
   \   000009                ; Setup parameters for call to function AM_Hot_start
   \   000009   12....       LCALL     `??AM_Hot_start::?relay`; Banked call to: AM_Hot_start
     46          }
   \   00000C   7F01         MOV       R7,#0x1
   \   00000E   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\WMNU\IAR_new_arch\PRJ Test\u_alarm_timer.c
      1          #include "debug.h"
      2          #include "alarm_timer.h"
      3          #include "cpu.h"
      4          
      5          // тестирование вставками. Теперь переопределить функции нельзя
      6          // void TM_IRQ(nwtime_t time) теперь вручную мониторить

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      7          void u_alarm_timer(void){
   \                     u_alarm_timer:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
      8            nwtime_t alarm = 500;
   \   000005   7EF4         MOV       R6,#-0xc
   \   000007   7F01         MOV       R7,#0x1
      9            INTERRUPT_ENABLE();
   \   000009   D2AF         SETB      0xa8.7
     10            AT_set_alarm(alarm);
   \   00000B                ; Setup parameters for call to function AT_set_alarm
   \   00000B   EE           MOV       A,R6
   \   00000C   FA           MOV       R2,A
   \   00000D   EF           MOV       A,R7
   \   00000E   FB           MOV       R3,A
   \   00000F   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     11            while(1);
   \                     ??u_alarm_timer_0:
   \   000012   80FE         SJMP      ??u_alarm_timer_0
   \   000014                REQUIRE _A_IEN0
     12          }
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_debug.c
      1          #include "debug.h"
      2          
      3          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      4          void u_test(void){
   \                     u_test:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
      5            LOG_OFF("BAD")
      6            LOG_ON("HELLO");
   \   000005                ; Setup parameters for call to function printf
   \   000005   75....       MOV       ?V0,#??__FUNCTION___18 & 0xff
   \   000008   75....       MOV       ?V1,#(??__FUNCTION___18 >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..06       MOV       ?V0,#0x6
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75....       MOV       ?V0,#`?<Constant "u_debug.c">` & 0xff
   \   00001E   75....       MOV       ?V1,#(`?<Constant "u_debug.c">` >> 8) & 0xff
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_6` & 0xff
   \   000028   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_6` >> 8) & 0xff
   \   00002A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002D   7406         MOV       A,#0x6
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032                ; Setup parameters for call to function printf
   \   000032   7A..         MOV       R2,#`?<Constant "HELLO">` & 0xff
   \   000034   7B..         MOV       R3,#(`?<Constant "HELLO">` >> 8) & 0xff
   \   000036   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000039                ; Setup parameters for call to function printf
   \   000039   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00003B   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00003D   12....       LCALL     `??printf::?relay`; Banked call to: printf
      7            ASSERT(2<0);
   \   000040                ; Setup parameters for call to function printf
   \   000040   75....       MOV       ?V0,#??__FUNCTION___18 & 0xff
   \   000043   75....       MOV       ?V1,#(??__FUNCTION___18 >> 8) & 0xff
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..07       MOV       ?V0,#0x7
   \   00004E   75..00       MOV       ?V1,#0x0
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   75....       MOV       ?V0,#`?<Constant "u_debug.c">` & 0xff
   \   000059   75....       MOV       ?V1,#(`?<Constant "u_debug.c">` >> 8) & 0xff
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_6` & 0xff
   \   000063   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_6` >> 8) & 0xff
   \   000065   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000068   7406         MOV       A,#0x6
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D                ; Setup parameters for call to function printf
   \   00006D   7A..         MOV       R2,#`?<Constant "\\"2<0\\" Faild! \\r\\n">` & 0xff
   \   00006F   7B..         MOV       R3,#(`?<Constant "\\"2<0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   000071   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000074                ; Setup parameters for call to function DBG_CORE_HALT
   \   000074   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
      8            ASSERT(2>0);
      9          }
   \   000077   7F02         MOV       R7,#0x2
   \   000079   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_macros.c
      1          #include "debug.h"
      2          #include "stddef.h"
      3          #include "stdint.h"
      4          #include "macros.h"
      5          
      6          #define TIMEOUT_EXCP 1
      7          #define UNHANDLED_EXCP 2
      8          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      9          void u_macros(void){
   \                     u_macros:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 57
   \   000005   74C7         MOV       A,#-0x39
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     10            int test[] = {1};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     11            
     12            struct abc{
     13            int a;
     14            int b;
     15            int c;
     16            };
     17            
     18            struct abc oleg;
     19            struct abc *y;
     20            
     21            int *c = &oleg.c;
   \   000016   7406         MOV       A,#0x6
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   8582..       MOV       ?V2,DPL
   \   00001E   8583..       MOV       ?V3,DPH
     22            y = container_of(c, struct abc, c);
   \   000021   E5..         MOV       A,?V2
   \   000023   24FC         ADD       A,#-0x4
   \   000025   F8           MOV       R0,A
   \   000026   E5..         MOV       A,?V3
   \   000028   34FF         ADDC      A,#-0x1
   \   00002A   F9           MOV       R1,A
   \   00002B   88..         MOV       ?V0,R0
   \   00002D   89..         MOV       ?V1,R1
     23            
     24            for_each_type(int, test, item){ 
   \   00002F   A8..         MOV       R0,?XSP + 0
   \   000031   A9..         MOV       R1,?XSP + 1
   \   000033   88..         MOV       ?V4,R0
   \   000035   89..         MOV       ?V5,R1
   \   000037   AE..         MOV       R6,?V4
   \   000039   AF..         MOV       R7,?V5
   \                     ??u_macros_0:
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   C3           CLR       C
   \   000041   EE           MOV       A,R6
   \   000042   9582         SUBB      A,DPL
   \   000044   EF           MOV       A,R7
   \   000045   9583         SUBB      A,DPH
   \   000047   501C         JNC       ??u_macros_1
     25              printf("%d ",*item);
   \   000049                ; Setup parameters for call to function printf
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000050   7A..         MOV       R2,#`?<Constant "%d ">` & 0xff
   \   000052   7B..         MOV       R3,#(`?<Constant "%d ">` >> 8) & 0xff
   \   000054   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
     26            };
   \   00005C   EE           MOV       A,R6
   \   00005D   2402         ADD       A,#0x2
   \   00005F   FE           MOV       R6,A
   \   000060   50D9         JNC       ??u_macros_0
   \   000062   0F           INC       R7
   \   000063   80D6         SJMP      ??u_macros_0
     27            printf("\r\n");
   \                     ??u_macros_1:
   \   000065                ; Setup parameters for call to function printf
   \   000065   7A..         MOV       R2,#`?<Constant "\\r\\n">_1` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "\\r\\n">_1` >> 8) & 0xff
   \   000069   12....       LCALL     `??printf::?relay`; Banked call to: printf
     28            
     29            printf("Try/CATCH macro \r\n");
   \   00006C                ; Setup parameters for call to function printf
   \   00006C   7A..         MOV       R2,#`?<Constant "Try/CATCH macro \\r\\n">` & 0xff
   \   00006E   7B..         MOV       R3,#(`?<Constant "Try/CATCH macro \\r\\n">` >> 8) & 0xff
   \   000070   12....       LCALL     `??printf::?relay`; Banked call to: printf
     30            TRY{
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   7408         MOV       A,#0x8
   \   00007A                REQUIRE ?V7
   \   00007A   12....       LCALL     ?SETJMP_XDATA
   \   00007D   8A..         MOV       ?V4,R2
   \   00007F   8B..         MOV       ?V5,R3
   \   000081   78..         MOV       R0,#?V4
   \   000083   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for u_macros>_0`:
   \   000086   0000         DW        0
   \   000088   01           DB        1
   \   000089   ....         DW        ??u_macros_2
   \   00008B   ....         DW        ??u_macros_3
   \   00008D   ....         DW        ??u_macros_4
     31              y = &oleg;
   \                     ??u_macros_3:
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?XSTACK_DISP100_8
   \   000094   88..         MOV       ?V4,R0
   \   000096   89..         MOV       ?V5,R1
   \   000098   85....       MOV       ?V0,?V4
   \   00009B   85....       MOV       ?V1,?V5
     32              THROW(UNHANDLED_EXCP);
   \   00009E   7A02         MOV       R2,#0x2
   \   0000A0   7B00         MOV       R3,#0x0
   \   0000A2   7408         MOV       A,#0x8
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7408         MOV       A,#0x8
   \   0000A9                REQUIRE ?V7
   \   0000A9   02....       LJMP      ?LONGJMP_XDATA
   \   0000AC                ; Setup parameters for call to function printf
     33              printf("Code run!\r\n");
                     ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_macros.c"

    struct abc *y;
                ^
"E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_macros.c",19  Warning[Pe550]: variable "y" was
          set but never used
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_macros.c"

  static void uart_init(void){
              ^
"E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c",32  Warning[Pe177]: function
          "uart_init" was declared but never referenced
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c"
     34            }
     35            CATCH(TIMEOUT_EXCP){
     36              printf("Exception catch!\r\n");
   \                     ??u_macros_4:
   \   0000AC                ; Setup parameters for call to function printf
   \   0000AC   7A..         MOV       R2,#`?<Constant "Exception catch!\\r\\n">` & 0xff
   \   0000AE   7B..         MOV       R3,#(`?<Constant "Exception catch!\\r\\n">` >> 8) & 0xff
   \   0000B0   12....       LCALL     `??printf::?relay`; Banked call to: printf
     37            }
     38            FINALLY{
     39              printf("Finnaly!\r\n");
   \                     ??u_macros_2:
   \   0000B3                ; Setup parameters for call to function printf
   \   0000B3   7A..         MOV       R2,#`?<Constant "Finnaly!\\r\\n">` & 0xff
   \   0000B5   7B..         MOV       R3,#(`?<Constant "Finnaly!\\r\\n">` >> 8) & 0xff
   \   0000B7   12....       LCALL     `??printf::?relay`; Banked call to: printf
     40            }
     41            ETRY;
     42          }
   \   0000BA   7439         MOV       A,#0x39
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BF   7F06         MOV       R7,#0x6
   \   0000C1   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_mem_slots.c
      1          #include "debug.h"
      2          #include "mem_slots.h"
      3          
      4          
      5          
      6          //bool SL_zone_check();
      7          //int SL_available();
      8          //int SL_busy();
      9          //void SL_free(char *buff);
     10          //char* SL_alloc(void);
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          void check_create_delete(void){
   \                     check_create_delete:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
     13            int busy = SL_busy();
   \   000005                ; Setup parameters for call to function SL_busy
   \   000005   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   85....       MOV       ?V2,?V0
   \   00000F   85....       MOV       ?V3,?V1
     14            int available = SL_available();
   \   000012                ; Setup parameters for call to function SL_available
   \   000012   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   85....       MOV       ?V0,?V4
   \   00001C   85....       MOV       ?V1,?V5
     15            char *buff = SL_alloc();
   \   00001F                ; Setup parameters for call to function SL_alloc
   \   00001F   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
     16            if (SL_busy() == 1)
   \   00002A                ; Setup parameters for call to function SL_busy
   \   00002A   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00002D   8A..         MOV       ?V4,R2
   \   00002F   8B..         MOV       ?V5,R3
   \   000031   7401         MOV       A,#0x1
   \   000033   65..         XRL       A,?V4
   \   000035   7004         JNZ       ??check_create_delete_0
   \   000037   7400         MOV       A,#0x0
   \   000039   65..         XRL       A,?V5
   \                     ??check_create_delete_0:
   \   00003B   701D         JNZ       ??check_create_delete_1
     17              printf("Slot create ok\r\n");
   \   00003D                ; Setup parameters for call to function printf
   \   00003D   7A..         MOV       R2,#`?<Constant "Slot create ok\\r\\n">` & 0xff
   \   00003F   7B..         MOV       R3,#(`?<Constant "Slot create ok\\r\\n">` >> 8) & 0xff
   \   000041   12....       LCALL     `??printf::?relay`; Banked call to: printf
     18            else {
     19              printf("Slot create fails\r\n");
     20              return;
     21            }
     22            SL_free(buff); 
   \   000044                ; Setup parameters for call to function SL_free
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
     23            if (SL_busy() == 0)
   \   00004B                ; Setup parameters for call to function SL_busy
   \   00004B   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00004E   8A..         MOV       ?V4,R2
   \   000050   8B..         MOV       ?V5,R3
   \   000052   E5..         MOV       A,?V4
   \   000054   45..         ORL       A,?V5
   \   000056   7014         JNZ       ??check_create_delete_2
   \   000058   8009         SJMP      ??check_create_delete_3
   \                     ??check_create_delete_1:
   \   00005A                ; Setup parameters for call to function printf
   \   00005A   7A..         MOV       R2,#`?<Constant "Slot create fails\\r\\n">` & 0xff
   \   00005C   7B..         MOV       R3,#(`?<Constant "Slot create fails\\r\\n">` >> 8) & 0xff
   \   00005E   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000061   8010         SJMP      ??check_create_delete_4
     24              printf("Slot delete ok\r\n");
   \                     ??check_create_delete_3:
   \   000063                ; Setup parameters for call to function printf
   \   000063   7A..         MOV       R2,#`?<Constant "Slot delete ok\\r\\n">` & 0xff
   \   000065   7B..         MOV       R3,#(`?<Constant "Slot delete ok\\r\\n">` >> 8) & 0xff
   \   000067   12....       LCALL     `??printf::?relay`; Banked call to: printf
     25            else {
     26              printf("Slot delete fails\r\n");
     27              return;
     28            }
     29          }
   \   00006A   8007         SJMP      ??check_create_delete_4
   \                     ??check_create_delete_2:
   \   00006C                ; Setup parameters for call to function printf
   \   00006C   7A..         MOV       R2,#`?<Constant "Slot delete fails\\r\\n">` & 0xff
   \   00006E   7B..         MOV       R3,#(`?<Constant "Slot delete fails\\r\\n">` >> 8) & 0xff
   \   000070   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \                     ??check_create_delete_4:
   \   000073   7F06         MOV       R7,#0x6
   \   000075   02....       LJMP      ?BANKED_LEAVE_XDATA
     30          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     31          void check_max_alloc(void){
   \                     check_max_alloc:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV       A,#-0x32
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     32            int max = 0;
   \   00000A   75..00       MOV       ?V2,#0x0
   \   00000D   75..00       MOV       ?V3,#0x0
     33            char *buff[25];
     34            char *ret;
     35            while ((ret = SL_alloc())!=NULL){
   \                     ??check_max_alloc_0:
   \   000010                ; Setup parameters for call to function SL_alloc
   \   000010   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000013   8A..         MOV       ?V4,R2
   \   000015   8B..         MOV       ?V5,R3
   \   000017   A8..         MOV       R0,?V4
   \   000019   A9..         MOV       R1,?V5
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   603A         JZ        ??check_max_alloc_1
     36              buff[max] = ret; 
   \   000023   A8..         MOV       R0,?V2
   \   000025   A9..         MOV       R1,?V3
   \   000027   E8           MOV       A,R0
   \   000028   75F002       MOV       B,#0x2
   \   00002B   A4           MUL       AB
   \   00002C   C8           XCH       A,R0
   \   00002D   AAF0         MOV       R2,B
   \   00002F   75F000       MOV       B,#0x0
   \   000032   A4           MUL       AB
   \   000033   2A           ADD       A,R2
   \   000034   FA           MOV       R2,A
   \   000035   75F002       MOV       B,#0x2
   \   000038   E9           MOV       A,R1
   \   000039   A4           MUL       AB
   \   00003A   2A           ADD       A,R2
   \   00003B   F9           MOV       R1,A
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   E582         MOV       A,DPL
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   E583         MOV       A,DPH
   \   000049   39           ADDC      A,R1
   \   00004A   F583         MOV       DPH,A
   \   00004C   E5..         MOV       A,?V0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   E5..         MOV       A,?V1
   \   000052   F0           MOVX      @DPTR,A
     37              max++;
   \   000053   05..         INC       ?V2
   \   000055   E5..         MOV       A,?V2
   \   000057   70B7         JNZ       ??check_max_alloc_0
   \   000059   05..         INC       ?V3
   \   00005B   80B3         SJMP      ??check_max_alloc_0
     38            }
     39          
     40            printf("Max alloc slot %d", max);
   \                     ??check_max_alloc_1:
   \   00005D                ; Setup parameters for call to function printf
   \   00005D   78..         MOV       R0,#?V2
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7A..         MOV       R2,#`?<Constant "Max alloc slot %d">` & 0xff
   \   000064   7B..         MOV       R3,#(`?<Constant "Max alloc slot %d">` >> 8) & 0xff
   \   000066   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
     41            
     42            for (int i = 0; i < max; i++){
   \   00006E   7E00         MOV       R6,#0x0
   \   000070   7F00         MOV       R7,#0x0
   \                     ??check_max_alloc_2:
   \   000072   C3           CLR       C
   \   000073   EE           MOV       A,R6
   \   000074   95..         SUBB      A,?V2
   \   000076   EF           MOV       A,R7
   \   000077   95..         SUBB      A,?V3
   \   000079   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00007B   65D0         XRL       A,PSW
   \   00007D   33           RLC       A
   \   00007E   5038         JNC       ??check_max_alloc_3
     43              SL_free(buff[i]);
   \   000080                ; Setup parameters for call to function SL_free
   \   000080   EE           MOV       A,R6
   \   000081   F8           MOV       R0,A
   \   000082   EF           MOV       A,R7
   \   000083   F9           MOV       R1,A
   \   000084   E8           MOV       A,R0
   \   000085   75F002       MOV       B,#0x2
   \   000088   A4           MUL       AB
   \   000089   C8           XCH       A,R0
   \   00008A   AAF0         MOV       R2,B
   \   00008C   75F000       MOV       B,#0x0
   \   00008F   A4           MUL       AB
   \   000090   2A           ADD       A,R2
   \   000091   FA           MOV       R2,A
   \   000092   75F002       MOV       B,#0x2
   \   000095   E9           MOV       A,R1
   \   000096   A4           MUL       AB
   \   000097   2A           ADD       A,R2
   \   000098   F9           MOV       R1,A
   \   000099   85..82       MOV       DPL,?XSP + 0
   \   00009C   85..83       MOV       DPH,?XSP + 1
   \   00009F   E582         MOV       A,DPL
   \   0000A1   28           ADD       A,R0
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   E583         MOV       A,DPH
   \   0000A6   39           ADDC      A,R1
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   FA           MOV       R2,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   FB           MOV       R3,A
   \   0000AE   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
     44            }
   \   0000B1   0E           INC       R6
   \   0000B2   EE           MOV       A,R6
   \   0000B3   70BD         JNZ       ??check_max_alloc_2
   \   0000B5   0F           INC       R7
   \   0000B6   80BA         SJMP      ??check_max_alloc_2
     45             if (SL_busy() == 0)
   \                     ??check_max_alloc_3:
   \   0000B8                ; Setup parameters for call to function SL_busy
   \   0000B8   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   0000BB   8A..         MOV       ?V4,R2
   \   0000BD   8B..         MOV       ?V5,R3
   \   0000BF   E5..         MOV       A,?V4
   \   0000C1   45..         ORL       A,?V5
   \   0000C3   7009         JNZ       ??check_max_alloc_4
     46              printf("Slot delete ok\r\n");
   \   0000C5                ; Setup parameters for call to function printf
   \   0000C5   7A..         MOV       R2,#`?<Constant "Slot delete ok\\r\\n">` & 0xff
   \   0000C7   7B..         MOV       R3,#(`?<Constant "Slot delete ok\\r\\n">` >> 8) & 0xff
   \   0000C9   12....       LCALL     `??printf::?relay`; Banked call to: printf
     47            else {
     48              printf("Slot delete fails\r\n");
     49              return;
     50            }
     51          }
   \   0000CC   8007         SJMP      ??check_max_alloc_5
   \                     ??check_max_alloc_4:
   \   0000CE                ; Setup parameters for call to function printf
   \   0000CE   7A..         MOV       R2,#`?<Constant "Slot delete fails\\r\\n">` & 0xff
   \   0000D0   7B..         MOV       R3,#(`?<Constant "Slot delete fails\\r\\n">` >> 8) & 0xff
   \   0000D2   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \                     ??check_max_alloc_5:
   \   0000D5   7432         MOV       A,#0x32
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   7F06         MOV       R7,#0x6
   \   0000DC   02....       LJMP      ?BANKED_LEAVE_XDATA
     52          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          void aasert_test(void){
   \                     aasert_test:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     54            char *buff = SL_alloc();
   \   000005                ; Setup parameters for call to function SL_alloc
   \   000005   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   AE..         MOV       R6,?V0
   \   00000E   AF..         MOV       R7,?V1
     55            SL_free(buff);
   \   000010                ; Setup parameters for call to function SL_free
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
     56           // SL_free(buff); // Повторное удаление буфера
     57            
     58            char *bad_buff = NULL; // Удаление невыделенного буфера
   \   000017   75..00       MOV       ?V0,#0x0
   \   00001A   75..00       MOV       ?V1,#0x0
     59            SL_free(bad_buff); 
   \   00001D                ; Setup parameters for call to function SL_free
   \   00001D   AA..         MOV       R2,?V0
   \   00001F   AB..         MOV       R3,?V1
   \   000021   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
     60          }
   \   000024   7F02         MOV       R7,#0x2
   \   000026   02....       LJMP      ?BANKED_LEAVE_XDATA
     61          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     62          void red_zones(void){
   \                     red_zones:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     63          int res = SL_zone_check();
   \   000005                ; Setup parameters for call to function SL_zone_check
   \   000005   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   000008   8A..         MOV       ?V2,R2
   \   00000A   8B..         MOV       ?V3,R3
   \   00000C   85....       MOV       ?V0,?V2
   \   00000F   85....       MOV       ?V1,?V3
     64          char *buff = SL_alloc();
   \   000012                ; Setup parameters for call to function SL_alloc
   \   000012   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000015   8A..         MOV       ?V2,R2
   \   000017   8B..         MOV       ?V3,R3
   \   000019   AE..         MOV       R6,?V2
   \   00001B   AF..         MOV       R7,?V3
     65          buff = SL_alloc();
   \   00001D                ; Setup parameters for call to function SL_alloc
   \   00001D   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   AE..         MOV       R6,?V2
   \   000026   AF..         MOV       R7,?V3
     66          buff = SL_alloc();
   \   000028                ; Setup parameters for call to function SL_alloc
   \   000028   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00002B   8A..         MOV       ?V2,R2
   \   00002D   8B..         MOV       ?V3,R3
   \   00002F   AE..         MOV       R6,?V2
   \   000031   AF..         MOV       R7,?V3
     67          buff = SL_alloc();
   \   000033                ; Setup parameters for call to function SL_alloc
   \   000033   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000036   8A..         MOV       ?V2,R2
   \   000038   8B..         MOV       ?V3,R3
   \   00003A   AE..         MOV       R6,?V2
   \   00003C   AF..         MOV       R7,?V3
     68          buff = SL_alloc();
   \   00003E                ; Setup parameters for call to function SL_alloc
   \   00003E   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000041   8A..         MOV       ?V2,R2
   \   000043   8B..         MOV       ?V3,R3
   \   000045   AE..         MOV       R6,?V2
   \   000047   AF..         MOV       R7,?V3
     69          buff = SL_alloc();
   \   000049                ; Setup parameters for call to function SL_alloc
   \   000049   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00004C   8A..         MOV       ?V2,R2
   \   00004E   8B..         MOV       ?V3,R3
   \   000050   AE..         MOV       R6,?V2
   \   000052   AF..         MOV       R7,?V3
     70          buff[150] = 34;
   \   000054   EE           MOV       A,R6
   \   000055   2496         ADD       A,#-0x6a
   \   000057   F582         MOV       DPL,A
   \   000059   E4           CLR       A
   \   00005A   3F           ADDC      A,R7
   \   00005B   F583         MOV       DPH,A
   \   00005D   7422         MOV       A,#0x22
   \   00005F   F0           MOVX      @DPTR,A
     71          res = SL_zone_check();
   \   000060                ; Setup parameters for call to function SL_zone_check
   \   000060   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   000063   8A..         MOV       ?V2,R2
   \   000065   8B..         MOV       ?V3,R3
   \   000067   85....       MOV       ?V0,?V2
   \   00006A   85....       MOV       ?V1,?V3
     72          }
   \   00006D   7F04         MOV       R7,#0x4
   \   00006F   02....       LJMP      ?BANKED_LEAVE_XDATA
     73          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void u_mem_slots(void){
   \                     u_mem_slots:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     75          //aasert_test();
     76            red_zones();
   \   000004                ; Setup parameters for call to function red_zones
   \   000004   12....       LCALL     `??red_zones::?relay`; Banked call to: red_zones
     77          check_create_delete();
   \   000007                ; Setup parameters for call to function check_create_delete
   \   000007   12....       LCALL     `??check_create_delete::?relay`; Banked call to: check_create_delete
     78          check_max_alloc();
   \   00000A                ; Setup parameters for call to function check_max_alloc
   \   00000A   12....       LCALL     `??check_max_alloc::?relay`; Banked call to: check_max_alloc
     79          }
   \   00000D   D083         POP       DPH
   \   00000F   D082         POP       DPL
   \   000011   02....       LJMP      ?BRET
E:\WMNU\IAR_new_arch\PRJ Test\u_mem_utils.c
      1          #include "debug.h"
      2          #include "mem_utils.h"
      3          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      4          void u_mem_utils(void){
   \                     u_mem_utils:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
      5            char tst1[10] = {1,2,3,4,5,6,7,8,9,10};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`
   \   00000D   7409         MOV       A,#0x9
   \   00000F   12....       LCALL     ?XSTACK_DISP102_8
   \   000012   740A         MOV       A,#0xa
   \   000014   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
      6            char tst2[10];
      7            int cmp_res;
      8            
      9            struct memcpy memcpy = {.src = tst1, .dst = tst2, .len = sizeof(tst1)};
   \   000017   90....       MOV       DPTR,#`?<Constant {(char *)0, (char *)0, 10}>`
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   7405         MOV       A,#0x5
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000024   7413         MOV       A,#0x13
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E8           MOV       A,R0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
   \   000033   7409         MOV       A,#0x9
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   7406         MOV       A,#0x6
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   F0           MOVX      @DPTR,A
     10            MEM_memcpy(&memcpy);
   \   000042                ; Setup parameters for call to function MEM_memcpy
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     11            
     12            for (int i = 0; i < sizeof(tst1); i++){
   \   00004A   75..00       MOV       ?V0,#0x0
   \   00004D   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_0:
   \   000050   C3           CLR       C
   \   000051   E5..         MOV       A,?V0
   \   000053   940A         SUBB      A,#0xa
   \   000055   E5..         MOV       A,?V1
   \   000057   9400         SUBB      A,#0x0
   \   000059   5078         JNC       ??u_mem_utils_1
     13              cmp_res = tst1[i] == tst2[i];
   \   00005B   7409         MOV       A,#0x9
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E582         MOV       A,DPL
   \   000062   25..         ADD       A,?V0
   \   000064   F582         MOV       DPL,A
   \   000066   E583         MOV       A,DPH
   \   000068   35..         ADDC      A,?V1
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F8           MOV       R0,A
   \   00006E   7413         MOV       A,#0x13
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E582         MOV       A,DPL
   \   000075   25..         ADD       A,?V0
   \   000077   F582         MOV       DPL,A
   \   000079   E583         MOV       A,DPH
   \   00007B   35..         ADDC      A,?V1
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   68           XRL       A,R0
   \   000081   7006         JNZ       ??u_mem_utils_2
   \   000083   7E01         MOV       R6,#0x1
   \   000085   7F00         MOV       R7,#0x0
   \   000087   8004         SJMP      ??u_mem_utils_3
   \                     ??u_mem_utils_2:
   \   000089   7E00         MOV       R6,#0x0
   \   00008B   7F00         MOV       R7,#0x0
     14              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_3:
   \   00008D   EE           MOV       A,R6
   \   00008E   4F           ORL       A,R7
   \   00008F   6037         JZ        ??u_mem_utils_4
   \   000091                ; Setup parameters for call to function printf
   \   000091   75....       MOV       ?V2,#??__FUNCTION___19 & 0xff
   \   000094   75....       MOV       ?V3,#(??__FUNCTION___19 >> 8) & 0xff
   \   000097   78..         MOV       R0,#?V2
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   75..0E       MOV       ?V2,#0xe
   \   00009F   75..00       MOV       ?V3,#0x0
   \   0000A2   78..         MOV       R0,#?V2
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0000AA   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_7` & 0xff
   \   0000B4   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_7` >> 8) & 0xff
   \   0000B6   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000B9   7406         MOV       A,#0x6
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE                ; Setup parameters for call to function printf
   \   0000BE   7A..         MOV       R2,#`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` & 0xff
   \   0000C0   7B..         MOV       R3,#(`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   0000C2   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C5                ; Setup parameters for call to function DBG_CORE_HALT
   \   0000C5   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     15              }
   \                     ??u_mem_utils_4:
   \   0000C8   05..         INC       ?V0
   \   0000CA   E5..         MOV       A,?V0
   \   0000CC   7082         JNZ       ??u_mem_utils_0
   \   0000CE   05..         INC       ?V1
   \   0000D0   02....       LJMP      ??u_mem_utils_0 & 0xFFFF
     16            LOG_ON("MEM_memcpy ok!");
   \                     ??u_mem_utils_1:
   \   0000D3                ; Setup parameters for call to function printf
   \   0000D3   75....       MOV       ?V0,#??__FUNCTION___19 & 0xff
   \   0000D6   75....       MOV       ?V1,#(??__FUNCTION___19 >> 8) & 0xff
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   75..10       MOV       ?V0,#0x10
   \   0000E1   75..00       MOV       ?V1,#0x0
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0000EC   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_7` & 0xff
   \   0000F6   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_7` >> 8) & 0xff
   \   0000F8   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000FB   7406         MOV       A,#0x6
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   \   000100                ; Setup parameters for call to function printf
   \   000100   7A..         MOV       R2,#`?<Constant "MEM_memcpy ok!">` & 0xff
   \   000102   7B..         MOV       R3,#(`?<Constant "MEM_memcpy ok!">` >> 8) & 0xff
   \   000104   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000107                ; Setup parameters for call to function printf
   \   000107   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   000109   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   00010B   12....       LCALL     `??printf::?relay`; Banked call to: printf
     17            
     18            struct memset memset = {.dst = tst1, .val = 7, .len = sizeof(tst1)};
   \   00010E   90....       MOV       DPTR,#`?<Constant {(char *)0, 10, 7}>`
   \   000111   AC..         MOV       R4,?XSP + 0
   \   000113   AD..         MOV       R5,?XSP + 1
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00011A   7409         MOV       A,#0x9
   \   00011C   12....       LCALL     ?XSTACK_DISP100_8
   \   00011F   85..82       MOV       DPL,?XSP + 0
   \   000122   85..83       MOV       DPH,?XSP + 1
   \   000125   E8           MOV       A,R0
   \   000126   F0           MOVX      @DPTR,A
   \   000127   A3           INC       DPTR
   \   000128   E9           MOV       A,R1
   \   000129   F0           MOVX      @DPTR,A
     19            MEM_memset(&memset);
   \   00012A                ; Setup parameters for call to function MEM_memset
   \   00012A   AA..         MOV       R2,?XSP + 0
   \   00012C   AB..         MOV       R3,?XSP + 1
   \   00012E   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     20          
     21            for (int i = 0; i < sizeof(tst1); i++){
   \   000131   75..00       MOV       ?V0,#0x0
   \   000134   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_5:
   \   000137   C3           CLR       C
   \   000138   E5..         MOV       A,?V0
   \   00013A   940A         SUBB      A,#0xa
   \   00013C   E5..         MOV       A,?V1
   \   00013E   9400         SUBB      A,#0x0
   \   000140   5065         JNC       ??u_mem_utils_6
     22              cmp_res = tst1[i] == 7;
   \   000142   7409         MOV       A,#0x9
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   E582         MOV       A,DPL
   \   000149   25..         ADD       A,?V0
   \   00014B   F582         MOV       DPL,A
   \   00014D   E583         MOV       A,DPH
   \   00014F   35..         ADDC      A,?V1
   \   000151   F583         MOV       DPH,A
   \   000153   E0           MOVX      A,@DPTR
   \   000154   6407         XRL       A,#0x7
   \   000156   7006         JNZ       ??u_mem_utils_7
   \   000158   7E01         MOV       R6,#0x1
   \   00015A   7F00         MOV       R7,#0x0
   \   00015C   8004         SJMP      ??u_mem_utils_8
   \                     ??u_mem_utils_7:
   \   00015E   7E00         MOV       R6,#0x0
   \   000160   7F00         MOV       R7,#0x0
     23              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_8:
   \   000162   EE           MOV       A,R6
   \   000163   4F           ORL       A,R7
   \   000164   6037         JZ        ??u_mem_utils_9
   \   000166                ; Setup parameters for call to function printf
   \   000166   75....       MOV       ?V2,#??__FUNCTION___19 & 0xff
   \   000169   75....       MOV       ?V3,#(??__FUNCTION___19 >> 8) & 0xff
   \   00016C   78..         MOV       R0,#?V2
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000171   75..17       MOV       ?V2,#0x17
   \   000174   75..00       MOV       ?V3,#0x0
   \   000177   78..         MOV       R0,#?V2
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   00017F   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   000182   78..         MOV       R0,#?V2
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_7` & 0xff
   \   000189   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_7` >> 8) & 0xff
   \   00018B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00018E   7406         MOV       A,#0x6
   \   000190   12....       LCALL     ?DEALLOC_XSTACK8
   \   000193                ; Setup parameters for call to function printf
   \   000193   7A..         MOV       R2,#`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` & 0xff
   \   000195   7B..         MOV       R3,#(`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   000197   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00019A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00019A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     24              }
   \                     ??u_mem_utils_9:
   \   00019D   05..         INC       ?V0
   \   00019F   E5..         MOV       A,?V0
   \   0001A1   7094         JNZ       ??u_mem_utils_5
   \   0001A3   05..         INC       ?V1
   \   0001A5   8090         SJMP      ??u_mem_utils_5
     25            LOG_ON("MEM_memset ok!");
   \                     ??u_mem_utils_6:
   \   0001A7                ; Setup parameters for call to function printf
   \   0001A7   75....       MOV       ?V0,#??__FUNCTION___19 & 0xff
   \   0001AA   75....       MOV       ?V1,#(??__FUNCTION___19 >> 8) & 0xff
   \   0001AD   78..         MOV       R0,#?V0
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   75..19       MOV       ?V0,#0x19
   \   0001B5   75..00       MOV       ?V1,#0x0
   \   0001B8   78..         MOV       R0,#?V0
   \   0001BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BD   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0001C0   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0001C3   78..         MOV       R0,#?V0
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_7` & 0xff
   \   0001CA   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_7` >> 8) & 0xff
   \   0001CC   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001CF   7406         MOV       A,#0x6
   \   0001D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D4                ; Setup parameters for call to function printf
   \   0001D4   7A..         MOV       R2,#`?<Constant "MEM_memset ok!">` & 0xff
   \   0001D6   7B..         MOV       R3,#(`?<Constant "MEM_memset ok!">` >> 8) & 0xff
   \   0001D8   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001DB                ; Setup parameters for call to function printf
   \   0001DB   7A..         MOV       R2,#`?<Constant "\\r\\n">_2` & 0xff
   \   0001DD   7B..         MOV       R3,#(`?<Constant "\\r\\n">_2` >> 8) & 0xff
   \   0001DF   12....       LCALL     `??printf::?relay`; Banked call to: printf
     26          }
   \   0001E2   741D         MOV       A,#0x1d
   \   0001E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E7   7F04         MOV       R7,#0x4
   \   0001E9   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {(char *)0, (char *)0, 10}>`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant {(char *)0, (char `
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {(char *)0, 10, 7}>`:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for <Constant {(char *)0, 10, 7}`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??TimerCompareInterrupt::??INTVEC 43`:
   \   00002B   02....       LJMP       (TimerCompareInterrupt)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>`:
   \   000000   414D5F43     DB "AM_Cold_start"
   \            6F6C645F
   \            73746172
   \            7400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "action_manager.c"`:
   \   000000   61637469     DB "action_manager.c"
   \            6F6E5F6D
   \            616E6167
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"COLD_MOD[i]->Co`:
   \   000000   22434F4C     DB "\"COLD_MOD[i]->Cold_Start != NULL\" Faild! \015\012"
   \            445F4D4F
   \            445B695D
   \            2D3E436F
   \            6C645F53
   \            74617274
   \            20213D20
   \            4E554C4C
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_1`:
   \   000000   414D5F48     DB "AM_Hot_start"
   \            6F745F73
   \            74617274
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"HOT_MOD[i]->Hot`:
   \   000000   22484F54     DB "\"HOT_MOD[i]->Hot_Start != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E486F74
   \            5F537461
   \            72742021
   \            3D204E55
   \            4C4C2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_2`:
   \   000000   414D5F48     DB "AM_HW_Init"
   \            575F496E
   \            697400  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"HW_MOD[i]->HW_I`:
   \   000000   2248575F     DB "\"HW_MOD[i]->HW_Init != NULL\" Faild! \015\012"
   \            4D4F445B
   \            695D2D3E
   \            48575F49
   \            6E697420
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_3`:
   \   000000   414D5F53     DB "AM_SW_Init"
   \            575F496E
   \            697400  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"SW_MOD[i]->SW_I`:
   \   000000   2253575F     DB "\"SW_MOD[i]->SW_Init != NULL\" Faild! \015\012"
   \            4D4F445B
   \            695D2D3E
   \            53575F49
   \            6E697420
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_4`:
   \   000000   414D5F53     DB "AM_Sleep"
   \            6C656570
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"POW_MOD[i]->Sle`:
   \   000000   22504F57     DB "\"POW_MOD[i]->Sleep != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E536C65
   \            65702021
   \            3D204E55
   \            4C4C2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_5`:
   \   000000   414D5F57     DB "AM_Wakeup"
   \            616B6575
   \            7000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"POW_MOD[i]->Wak`:
   \   000000   22504F57     DB "\"POW_MOD[i]->Wakeup != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E57616B
   \            65757020
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_6`:
   \   000000   41545F73     DB "AT_set_time"
   \            65745F74
   \            696D6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_1`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "alarm_timer.c">>`:
   \   000000   616C6172     DB "alarm_timer.c"
   \            6D5F7469
   \            6D65722E
   \            6300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"time <= MAX_NWT`:
   \   000000   2274696D     DB "\"time <= MAX_NWTIME\" Faild! \015\012"
   \            65203C3D
   \            204D4158
   \            5F4E5754
   \            494D4522
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_7`:
   \   000000   41545F77     DB "AT_wait"
   \            61697400

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_8`:
   \   000000   41545F73     DB "AT_set_alarm"
   \            65745F61
   \            6C61726D
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"alarm <= MAX_NW`:
   \   000000   22616C61     DB "\"alarm <= MAX_NWTIME\" Faild! \015\012"
   \            726D203C
   \            3D204D41
   \            585F4E57
   \            54494D45
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_9`:
   \   000000   66726565     DB "free_idx"
   \            5F696478
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_2`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "buffer.c">>`:
   \   000000   62756666     DB "buffer.c"
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "No free idx">>`:
   \   000000   4E6F2066     DB "No free idx"
   \            72656520
   \            69647800

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_10`:
   \   000000   42465F64     DB "BF_del"
   \            656C00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"idx >= 0 && idx`:
   \   000000   22696478     DB "\"idx >= 0 && idx < MAX_TXRX_BUFFER\" Faild! \015\012"
   \            203E3D20
   \            30202626
   \            20696478
   \            203C204D
   \            41585F54
   \            5852585F
   \            42554646
   \            45522220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"BUFFER_PROP[idx`:
   \   000000   22425546     DB "\"BUFFER_PROP[idx].val != 0\" Faild! \015\012"
   \            4645525F
   \            50524F50
   \            5B696478
   \            5D2E7661
   \            6C20213D
   \            20302220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_11`:
   \   000000   46525F61     DB "FR_add_header"
   \            64645F68
   \            65616465
   \            7200    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_3`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "frame.c">>`:
   \   000000   6672616D     DB "frame.c"
   \            652E6300

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"new_len < MAX_P`:
   \   000000   226E6577     DB "\"new_len < MAX_PAYLOAD_SIZE\" Faild! \015\012"
   \            5F6C656E
   \            203C204D
   \            41585F50
   \            41594C4F
   \            41445F53
   \            495A4522
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_12`:
   \   000000   46525F64     DB "FR_del_header"
   \            656C5F68
   \            65616465
   \            7200    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"frame->len >= l`:
   \   000000   22667261     DB "\"frame->len >= len\" Faild! \015\012"
   \            6D652D3E
   \            6C656E20
   \            3E3D206C
   \            656E2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_13`:
   \   000000   534C5F66     DB "SL_free"
   \            72656500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_4`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "mem_slots.c">>`:
   \   000000   6D656D5F     DB "mem_slots.c"
   \            736C6F74
   \            732E6300

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"index < SLOT_BU`:
   \   000000   22696E64     DB "\"index < SLOT_BUFFER_SIZE\" Faild! \015\012"
   \            6578203C
   \            20534C4F
   \            545F4255
   \            46464552
   \            5F53495A
   \            45222046
   \            61696C64
   \            21200D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"offset == 0\\" F`:
   \   000000   226F6666     DB "\"offset == 0\" Faild! \015\012"
   \            73657420
   \            3D3D2030
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"slot->property.`:
   \   000000   22736C6F     DB "\"slot->property.taken == true\" Faild! \015\012"
   \            742D3E70
   \            726F7065
   \            7274792E
   \            74616B65
   \            6E203D3D
   \            20747275
   \            65222046
   \            61696C64
   \            21200D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_14`:
   \   000000   534C5F62     DB "SL_busy"
   \            75737900

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"slot_busy < SLO`:
   \   000000   22736C6F     DB "\"slot_busy < SLOT_POOL_ITEMS\" Faild! \015\012"
   \            745F6275
   \            7379203C
   \            20534C4F
   \            545F504F
   \            4F4C5F49
   \            54454D53
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_15`:
   \   000000   534C5F61     DB "SL_available"
   \            7661696C
   \            61626C65
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_16`:
   \   000000   544D5F53     DB "TM_SetAlarm"
   \            6574416C
   \            61726D00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_5`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "time_manager.c">>`:
   \   000000   74696D65     DB "time_manager.c"
   \            5F6D616E
   \            61676572
   \            2E6300  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"slot < MAX_TIME`:
   \   000000   22736C6F     DB "\"slot < MAX_TIME_SLOTS\" Faild! \015\012"
   \            74203C20
   \            4D41585F
   \            54494D45
   \            5F534C4F
   \            54532220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_17`:
   \   000000   544D5F43     DB "TM_ClrAlarm"
   \            6C72416C
   \            61726D00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_18`:
   \   000000   755F7465     DB "u_test"
   \            737400  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_6`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "u_debug.c">>`:
   \   000000   755F6465     DB "u_debug.c"
   \            6275672E
   \            6300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HELLO">>`:
   \   000000   48454C4C     DB "HELLO"
   \            4F00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n">>`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"2<0\\" Faild! \\r`:
   \   000000   22323C30     DB "\"2<0\" Faild! \015\012"
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {1}>>`:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%d ">>`:
   \   000000   25642000     DB "%d "

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n">>_1`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Try/CATCH macro \\`:
   \   000000   5472792F     DB "Try/CATCH macro \015\012"
   \            43415443
   \            48206D61
   \            63726F20
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Code run!\\r\\n">>`:
   \   000000   436F6465     DB "Code run!\015\012"
   \            2072756E
   \            210D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Exception catch!\\`:
   \   000000   45786365     DB "Exception catch!\015\012"
   \            7074696F
   \            6E206361
   \            74636821
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Finnaly!\\r\\n">>`:
   \   000000   46696E6E     DB "Finnaly!\015\012"
   \            616C7921
   \            0D0A00  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Slot create ok\\r\\`:
   \   000000   536C6F74     DB "Slot create ok\015\012"
   \            20637265
   \            61746520
   \            6F6B0D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Slot create fails`:
   \   000000   536C6F74     DB "Slot create fails\015\012"
   \            20637265
   \            61746520
   \            6661696C
   \            730D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Slot delete ok\\r\\`:
   \   000000   536C6F74     DB "Slot delete ok\015\012"
   \            2064656C
   \            65746520
   \            6F6B0D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Slot delete fails`:
   \   000000   536C6F74     DB "Slot delete fails\015\012"
   \            2064656C
   \            65746520
   \            6661696C
   \            730D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Max alloc slot %d`:
   \   000000   4D617820     DB "Max alloc slot %d"
   \            616C6C6F
   \            6320736C
   \            6F742025
   \            6400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __FUNCTION__>_19`:
   \   000000   755F6D65     DB "u_mem_utils"
   \            6D5F7574
   \            696C7300

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {1, 2, 3, 4, 5, 6,`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%s:%d:%s -> ">>_7`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "u_mem_utils.c">>`:
   \   000000   755F6D65     DB "u_mem_utils.c"
   \            6D5F7574
   \            696C732E
   \            6300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\"cmp_res == 0\\" `:
   \   000000   22636D70     DB "\"cmp_res == 0\" Faild! \015\012"
   \            5F726573
   \            203D3D20
   \            30222046
   \            61696C64
   \            21200D0A
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "MEM_memcpy ok!">>`:
   \   000000   4D454D5F     DB "MEM_memcpy ok!"
   \            6D656D63
   \            7079206F
   \            6B2100  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "\\r\\n">>_2`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "MEM_memset ok!">>`:
   \   000000   4D454D5F     DB "MEM_memset ok!"
   \            6D656D73
   \            6574206F
   \            6B2100  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for HW_MOD>`:
   \   000000   ....         DW CPU_MODULE
   \   000002   ....         DW DBG_MODULE
   \   000004   ....         DW AT_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SW_MOD>`:
   \   000000   ....         DW TM_MODULE
   \   000002   ....         DW FR_MODULE
   \   000004   ....         DW MD_MODULE
   \   000006   ....         DW MS_MODULE
   \   000008   ....         DW BF_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for POW_MOD>`:
   \   000000   ....         DW RTC_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AT_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for BF_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CPU_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_1`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DBG_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_2`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FR_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_1`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MS_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_2`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {(char *)0, 150, 0`:
   \   000000   0000         DW 0H
   \   000002   96           DB 150
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MD_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_3`
   \   000002   ....         DW `??SW_Init::?relay_3`
   \   000004   ....         DW `??Sleep::?relay`
   \   000006   ....         DW `??Wakeup::?relay`
   \   000008   ....         DW `??Cold_Start::?relay`
   \   00000A   ....         DW `??Hot_Start::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RTC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_4`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TM_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_5`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {(char *)0, (char `:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0H
   \   000004   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant {(char *)0, 10, 7}`:
   \   000000   0000         DW 0H
   \   000002   0A           DB 10
   \   000003   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_7fff>`:
   \   000000   FF7F0000     DD 32767

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ffff8000>`:
   \   000000   0080FFFF     DD 4294934528

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_8000>`:
   \   000000   00800000     DD 32768

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ffffff>`:
   \   000000   FFFFFF00     DD 16777215

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Cold_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Cold_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Hot_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Hot_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Wakeup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Wakeup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_alarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_alarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcCompareTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??calcCompareTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ReadTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ReadTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??loadTimerCompare::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??loadTimerCompare

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??isIRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??isIRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??free_idx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??free_idx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_add_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_add_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_add_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_add_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_del::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_del

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_get_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_get_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_get_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_get_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_HALT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_HALT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_FAULT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_FAULT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_create::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_create

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_add_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_add_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_del_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_del_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fill_zero_slot::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??fill_zero_slot

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??protect_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??protect_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_zone_check::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_zone_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Wakeup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Wakeup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_4`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_4

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_5`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_5

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_SetAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_SetAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_ClrAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_ClrAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_AdjustTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_AdjustTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_IRQ::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_IRQ

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_alarm_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_alarm_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_test::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_test

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_macros::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_macros

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??check_create_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    check_create_delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??check_max_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    check_max_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??aasert_test::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    aasert_test

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??red_zones::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    red_zones

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_mem_slots::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_mem_slots

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_mem_utils::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_mem_utils

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "action_manager.c">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "action_manager.c"`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"COLD_MOD[i]->Cold_St...">`:
   \   000000                DS 44
   \   00002C                REQUIRE `?<Initializer for <Constant "\\"COLD_MOD[i]->Co`
   \   00002C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"HOT_MOD[i]->Hot_Star...">`:
   \   000000                DS 42
   \   00002A                REQUIRE `?<Initializer for <Constant "\\"HOT_MOD[i]->Hot`
   \   00002A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"HW_MOD[i]->HW_Init !...">`:
   \   000000                DS 39
   \   000027                REQUIRE `?<Initializer for <Constant "\\"HW_MOD[i]->HW_I`
   \   000027                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"SW_MOD[i]->SW_Init !...">`:
   \   000000                DS 39
   \   000027                REQUIRE `?<Initializer for <Constant "\\"SW_MOD[i]->SW_I`
   \   000027                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"POW_MOD[i]->Sleep !=...">`:
   \   000000                DS 38
   \   000026                REQUIRE `?<Initializer for <Constant "\\"POW_MOD[i]->Sle`
   \   000026                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"POW_MOD[i]->Wakeup !...">`:
   \   000000                DS 39
   \   000027                REQUIRE `?<Initializer for <Constant "\\"POW_MOD[i]->Wak`
   \   000027                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_1`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_1`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "alarm_timer.c">`:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for <Constant "alarm_timer.c">>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"time <= MAX_NWTIME\\" ...">`:
   \   000000                DS 31
   \   00001F                REQUIRE `?<Initializer for <Constant "\\"time <= MAX_NWT`
   \   00001F                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"alarm <= MAX_NWTIME\\"...">`:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for <Constant "\\"alarm <= MAX_NW`
   \   000020                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_2`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_2`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "buffer.c">`:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for <Constant "buffer.c">>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "No free idx">`:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for <Constant "No free idx">>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"idx >= 0 && idx < MA...">`:
   \   000000                DS 46
   \   00002E                REQUIRE `?<Initializer for <Constant "\\"idx >= 0 && idx`
   \   00002E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"BUFFER_PROP[idx].val...">`:
   \   000000                DS 38
   \   000026                REQUIRE `?<Initializer for <Constant "\\"BUFFER_PROP[idx`
   \   000026                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_3`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_3`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "frame.c">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "frame.c">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"new_len < MAX_PAYLOA...">`:
   \   000000                DS 39
   \   000027                REQUIRE `?<Initializer for <Constant "\\"new_len < MAX_P`
   \   000027                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"frame->len >= len\\" F...">`:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for <Constant "\\"frame->len >= l`
   \   00001E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_4`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_4`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "mem_slots.c">`:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for <Constant "mem_slots.c">>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"index < SLOT_BUFFER_...">`:
   \   000000                DS 37
   \   000025                REQUIRE `?<Initializer for <Constant "\\"index < SLOT_BU`
   \   000025                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"offset == 0\\" Faild! \\r\\n">`:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for <Constant "\\"offset == 0\\" F`
   \   000018                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"slot->property.taken...">`:
   \   000000                DS 41
   \   000029                REQUIRE `?<Initializer for <Constant "\\"slot->property.`
   \   000029                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"slot_busy < SLOT_POO...">`:
   \   000000                DS 40
   \   000028                REQUIRE `?<Initializer for <Constant "\\"slot_busy < SLO`
   \   000028                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_5`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_5`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "time_manager.c">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "time_manager.c">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"slot < MAX_TIME_SLOT...">`:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for <Constant "\\"slot < MAX_TIME`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_6`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_6`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "u_debug.c">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "u_debug.c">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "HELLO">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "HELLO">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant "\\r\\n">>`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"2<0\\" Faild! \\r\\n">`:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for <Constant "\\"2<0\\" Faild! \\r`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {1}>`:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for <Constant {1}>>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%d ">`:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for <Constant "%d ">>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n">_1`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant "\\r\\n">>_1`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Try/CATCH macro \\r\\n">`:
   \   000000                DS 19
   \   000013                REQUIRE `?<Initializer for <Constant "Try/CATCH macro \\`
   \   000013                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for <Constant "Code run!\\r\\n">>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Exception catch!\\r\\n">`:
   \   000000                DS 19
   \   000013                REQUIRE `?<Initializer for <Constant "Exception catch!\\`
   \   000013                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Finnaly!\\r\\n">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Finnaly!\\r\\n">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Slot create ok\\r\\n">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "Slot create ok\\r\\`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Slot create fails\\r\\n">`:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for <Constant "Slot create fails`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Slot delete ok\\r\\n">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "Slot delete ok\\r\\`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Slot delete fails\\r\\n">`:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for <Constant "Slot delete fails`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Max alloc slot %d">`:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for <Constant "Max alloc slot %d`
   \   000012                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant {1, 2, 3, 4, 5, 6,`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%s:%d:%s -> ">_7`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "%s:%d:%s -> ">>_7`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "u_mem_utils.c">`:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for <Constant "u_mem_utils.c">>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">`:
   \   000000                DS 25
   \   000019                REQUIRE `?<Initializer for <Constant "\\"cmp_res == 0\\" `
   \   000019                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "MEM_memcpy ok!">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "MEM_memcpy ok!">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "\\r\\n">_2`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant "\\r\\n">>_2`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "MEM_memset ok!">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "MEM_memset ok!">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_7fff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_7fff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ffff8000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ffff8000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_8000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_8000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     16   AM_Cold_start
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_HW_Init
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     25   AM_Hot_start
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_SW_Init
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_Sleep
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_Wakeup
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     32   AT_set_alarm
        0     12   -> DBG_CORE_HALT
        0     12   -> IRQEnable
        0     12   -> calcCompareTime
        0     12   -> loadTimerCompare
        0     12   -> printf
        0     18   -> printf
      0     20   AT_set_time
        0     14   -> AT_set_alarm
        0     14   -> DBG_CORE_HALT
        0     14   -> ReadTimer
        0     14   -> isIRQEnable
        0     14   -> printf
        0     20   -> printf
      0     31   AT_time
        0     16   -> ReadTimer
      0     18   AT_wait
        0     12   -> DBG_CORE_HALT
        0     12   -> printf
        0     18   -> printf
      0     10   BF_add_rx
        0     10   -> free_idx
      0     10   BF_add_tx
        0     10   -> free_idx
      0     16   BF_del
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0      9   BF_get_rx
      0      9   BF_get_tx
      0      0   Cold_Start
      0      0   DBG_CORE_FAULT
      0     41   DBG_CORE_HALT
      1     27   FR_add_header
        0     21   -> DBG_CORE_HALT
        0     21   -> MEM_memcpy
        0     21   -> printf
        0     27   -> printf
      2      0   FR_available
        2      0   -> SL_available
      2      0   FR_busy
        2      0   -> SL_busy
      2      0   FR_create
        2      0   -> SL_alloc
      1     25   FR_del_header
        0     19   -> DBG_CORE_HALT
        0     19   -> MEM_memcpy
        0     19   -> printf
        0     25   -> printf
      0      9   FR_delete
        0      9   -> SL_free
      2      0   HW_Init
      0      0   HW_Init
      0      0   HW_Init
      0      0   HW_Init
      0      0   Hot_Start
      0     15   IRQEnable
      3     41   MEM_memcpy
      3     41   MEM_memset
      2     22   ReadTimer
      0     74   SL_alloc
        0     10   -> alloc
        0     10   -> fill_zero_slot
        0     10   -> protect_alloc
      0     30   SL_available
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     80   SL_busy
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     86   SL_free
        0     16   -> DBG_CORE_HALT
        0     16   -> printf
        0     22   -> printf
      2     12   SL_zone_check
      0      0   SW_Init
      0      0   SW_Init
      2      0   SW_Init
      2      0   SW_Init
      2      0   SW_Init
      0      0   SW_Init
      0      0   Sleep
      0      0   TM_AdjustTime
      0     16   TM_ClrAlarm
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     24   TM_IRQ
        0      9   -> AM_Hot_start
      0     16   TM_SetAlarm
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     15   TimerCompareInterrupt
        0     15   -> AT_time
        0     15   -> IRQEnable
        0     15   -> TM_IRQ
      0      0   Wakeup
      0     10   aasert_test
        0     10   -> SL_alloc
        0     10   -> SL_free
      2     10   alloc
      2     34   calcCompareTime
        0     22   -> ReadTimer
      0     14   check_create_delete
        0     14   -> SL_alloc
        0     14   -> SL_available
        0     14   -> SL_busy
        0     14   -> SL_free
        0     14   -> printf
      0     66   check_max_alloc
        0     64   -> SL_alloc
        0     64   -> SL_busy
        0     64   -> SL_free
        0     64   -> printf
        0     66   -> printf
      0     23   fill_zero_slot
        0     13   -> MEM_memset
      0     26   free_idx
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     14   isIRQEnable
      0     28   loadTimerCompare
      0      0   main
        0      0   -> AM_SW_Init
        0      0   -> DBG_CORE_HALT
        0      0   -> u_mem_slots
      2     10   protect_alloc
      0     12   red_zones
        0     12   -> SL_alloc
        0     12   -> SL_zone_check
      0      9   u_alarm_timer
        0      9   -> AT_set_alarm
      0     73   u_macros
        0     71   -> printf
        0     73   -> printf
      2      0   u_mem_slots
        2      0   -> check_create_delete
        2      0   -> check_max_alloc
        2      0   -> red_zones
      0     47   u_mem_utils
        0     41   -> DBG_CORE_HALT
        0     41   -> MEM_memcpy
        0     41   -> MEM_memset
        0     41   -> printf
        0     47   -> printf
      0     16   u_test
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d ">
      13  ?<Constant "%s:%d:%s -> ">
      13  ?<Constant "%s:%d:%s -> ">_1
      13  ?<Constant "%s:%d:%s -> ">_2
      13  ?<Constant "%s:%d:%s -> ">_3
      13  ?<Constant "%s:%d:%s -> ">_4
      13  ?<Constant "%s:%d:%s -> ">_5
      13  ?<Constant "%s:%d:%s -> ">_6
      13  ?<Constant "%s:%d:%s -> ">_7
      12  ?<Constant "Code run!\r\n">
      19  ?<Constant "Exception catch!\r\n">
      11  ?<Constant "Finnaly!\r\n">
       6  ?<Constant "HELLO">
      15  ?<Constant "MEM_memcpy ok!">
      15  ?<Constant "MEM_memset ok!">
      18  ?<Constant "Max alloc slot %d">
      12  ?<Constant "No free idx">
      20  ?<Constant "Slot create fails\r\n">
      17  ?<Constant "Slot create ok\r\n">
      20  ?<Constant "Slot delete fails\r\n">
      17  ?<Constant "Slot delete ok\r\n">
      19  ?<Constant "Try/CATCH macro \r\n">
      16  ?<Constant "\"2<0\" Faild! \r\n">
      38  ?<Constant "\"BUFFER_PROP[idx].val...">
      44  ?<Constant "\"COLD_MOD[i]->Cold_St...">
      42  ?<Constant "\"HOT_MOD[i]->Hot_Star...">
      39  ?<Constant "\"HW_MOD[i]->HW_Init !...">
      38  ?<Constant "\"POW_MOD[i]->Sleep !=...">
      39  ?<Constant "\"POW_MOD[i]->Wakeup !...">
      39  ?<Constant "\"SW_MOD[i]->SW_Init !...">
      32  ?<Constant "\"alarm <= MAX_NWTIME\"...">
      25  ?<Constant "\"cmp_res == 0\" Faild! \r\n">
      30  ?<Constant "\"frame->len >= len\" F...">
      46  ?<Constant "\"idx >= 0 && idx < MA...">
      37  ?<Constant "\"index < SLOT_BUFFER_...">
      39  ?<Constant "\"new_len < MAX_PAYLOA...">
      24  ?<Constant "\"offset == 0\" Faild! \r\n">
      34  ?<Constant "\"slot < MAX_TIME_SLOT...">
      41  ?<Constant "\"slot->property.taken...">
      40  ?<Constant "\"slot_busy < SLOT_POO...">
      31  ?<Constant "\"time <= MAX_NWTIME\" ...">
       3  ?<Constant "\r\n">
       3  ?<Constant "\r\n">_1
       3  ?<Constant "\r\n">_2
      17  ?<Constant "action_manager.c">
      14  ?<Constant "alarm_timer.c">
       9  ?<Constant "buffer.c">
       8  ?<Constant "frame.c">
      12  ?<Constant "mem_slots.c">
      15  ?<Constant "time_manager.c">
      10  ?<Constant "u_debug.c">
      14  ?<Constant "u_mem_utils.c">
       5  ?<Constant {(char *)0, (char *)0, 10}>
       4  ?<Constant {(char *)0, 10, 7}>
       4  ?<Constant {(char *)0, 150, 0}>
      10  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>
       2  ?<Constant {1}>
       4  ?<Initializer for <Constant "%d ">>
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_1
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_2
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_3
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_4
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_5
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_6
      13  ?<Initializer for <Constant "%s:%d:%s -> ">>_7
      12  ?<Initializer for <Constant "Code run!\r\n">>
      19  ?<Initializer for <Constant "Exception catch!\
      11  ?<Initializer for <Constant "Finnaly!\r\n">>
       6  ?<Initializer for <Constant "HELLO">>
      15  ?<Initializer for <Constant "MEM_memcpy ok!">>
      15  ?<Initializer for <Constant "MEM_memset ok!">>
      18  ?<Initializer for <Constant "Max alloc slot %d
      12  ?<Initializer for <Constant "No free idx">>
      20  ?<Initializer for <Constant "Slot create fails
      17  ?<Initializer for <Constant "Slot create ok\r\
      20  ?<Initializer for <Constant "Slot delete fails
      17  ?<Initializer for <Constant "Slot delete ok\r\
      19  ?<Initializer for <Constant "Try/CATCH macro \
      16  ?<Initializer for <Constant "\"2<0\" Faild! \r
      38  ?<Initializer for <Constant "\"BUFFER_PROP[idx
      44  ?<Initializer for <Constant "\"COLD_MOD[i]->Co
      42  ?<Initializer for <Constant "\"HOT_MOD[i]->Hot
      39  ?<Initializer for <Constant "\"HW_MOD[i]->HW_I
      38  ?<Initializer for <Constant "\"POW_MOD[i]->Sle
      39  ?<Initializer for <Constant "\"POW_MOD[i]->Wak
      39  ?<Initializer for <Constant "\"SW_MOD[i]->SW_I
      32  ?<Initializer for <Constant "\"alarm <= MAX_NW
      25  ?<Initializer for <Constant "\"cmp_res == 0\"
      30  ?<Initializer for <Constant "\"frame->len >= l
      46  ?<Initializer for <Constant "\"idx >= 0 && idx
      37  ?<Initializer for <Constant "\"index < SLOT_BU
      39  ?<Initializer for <Constant "\"new_len < MAX_P
      24  ?<Initializer for <Constant "\"offset == 0\" F
      34  ?<Initializer for <Constant "\"slot < MAX_TIME
      41  ?<Initializer for <Constant "\"slot->property.
      40  ?<Initializer for <Constant "\"slot_busy < SLO
      31  ?<Initializer for <Constant "\"time <= MAX_NWT
       3  ?<Initializer for <Constant "\r\n">>
       3  ?<Initializer for <Constant "\r\n">>_1
       3  ?<Initializer for <Constant "\r\n">>_2
      17  ?<Initializer for <Constant "action_manager.c"
      14  ?<Initializer for <Constant "alarm_timer.c">>
       9  ?<Initializer for <Constant "buffer.c">>
       8  ?<Initializer for <Constant "frame.c">>
      12  ?<Initializer for <Constant "mem_slots.c">>
      15  ?<Initializer for <Constant "time_manager.c">>
      10  ?<Initializer for <Constant "u_debug.c">>
      14  ?<Initializer for <Constant "u_mem_utils.c">>
       5  ?<Initializer for <Constant {(char *)0, (char
       4  ?<Initializer for <Constant {(char *)0, 10, 7}
       4  ?<Initializer for <Constant {(char *)0, 150, 0
      10  ?<Initializer for <Constant {1, 2, 3, 4, 5, 6,
       2  ?<Initializer for <Constant {1}>>
      12  ?<Initializer for AT_MODULE>
      12  ?<Initializer for BF_MODULE>
      12  ?<Initializer for CPU_MODULE>
      12  ?<Initializer for DBG_MODULE>
      12  ?<Initializer for FR_MODULE>
       6  ?<Initializer for HW_MOD>
      12  ?<Initializer for MD_MODULE>
      12  ?<Initializer for MS_MODULE>
       2  ?<Initializer for POW_MOD>
      12  ?<Initializer for RTC_MODULE>
      10  ?<Initializer for SW_MOD>
      12  ?<Initializer for TM_MODULE>
       4  ?<Initializer for __Constant_7fff>
       4  ?<Initializer for __Constant_8000>
       4  ?<Initializer for __Constant_ffff8000>
       4  ?<Initializer for __Constant_ffffff>
      14  ?<Initializer for __FUNCTION__>
      13  ?<Initializer for __FUNCTION__>_1
       7  ?<Initializer for __FUNCTION__>_10
      14  ?<Initializer for __FUNCTION__>_11
      14  ?<Initializer for __FUNCTION__>_12
       8  ?<Initializer for __FUNCTION__>_13
       8  ?<Initializer for __FUNCTION__>_14
      13  ?<Initializer for __FUNCTION__>_15
      12  ?<Initializer for __FUNCTION__>_16
      12  ?<Initializer for __FUNCTION__>_17
       7  ?<Initializer for __FUNCTION__>_18
      12  ?<Initializer for __FUNCTION__>_19
      11  ?<Initializer for __FUNCTION__>_2
      11  ?<Initializer for __FUNCTION__>_3
       9  ?<Initializer for __FUNCTION__>_4
      10  ?<Initializer for __FUNCTION__>_5
      12  ?<Initializer for __FUNCTION__>_6
       8  ?<Initializer for __FUNCTION__>_7
      13  ?<Initializer for __FUNCTION__>_8
       9  ?<Initializer for __FUNCTION__>_9
      50  ALARMS
     195  AM_Cold_start
       6  AM_Cold_start::?relay
     186  AM_HW_Init
       6  AM_HW_Init::?relay
     195  AM_Hot_start
       6  AM_Hot_start::?relay
     190  AM_SW_Init
       6  AM_SW_Init::?relay
     191  AM_Sleep
       6  AM_Sleep::?relay
     195  AM_Wakeup
       6  AM_Wakeup::?relay
      12  AT_MODULE
     130  AT_set_alarm
       6  AT_set_alarm::?relay
     144  AT_set_time
       6  AT_set_time::?relay
      55  AT_time
       6  AT_time::?relay
     178  AT_wait
       6  AT_wait::?relay
      12  BF_MODULE
      79  BF_add_rx
       6  BF_add_rx::?relay
      79  BF_add_tx
       6  BF_add_tx::?relay
     178  BF_del
       6  BF_del::?relay
     115  BF_get_rx
       6  BF_get_rx::?relay
     115  BF_get_tx
       6  BF_get_tx::?relay
      40  BUFFER
      20  BUFFER_PROP
       1  CLKCONCMD
       1  CLKCONSTA
       2  COLD_MOD
       4  COMPARE_TIME
      12  CPU_MODULE
       3  Cold_Start
       6  Cold_Start::?relay
       2  DBG_CORE_FAULT
       6  DBG_CORE_FAULT::?relay
       2  DBG_CORE_HALT
       6  DBG_CORE_HALT::?relay
      12  DBG_MODULE
       2  FRAME_COUNT
      12  FR_MODULE
     257  FR_add_header
       6  FR_add_header::?relay
      14  FR_available
       6  FR_available::?relay
      14  FR_busy
       6  FR_busy::?relay
      26  FR_create
       6  FR_create::?relay
     195  FR_del_header
       6  FR_del_header::?relay
      33  FR_delete
       6  FR_delete::?relay
       2  HOT_MOD
       3  HW_Init
       3  HW_Init
      21  HW_Init
      39  HW_Init
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_MOD
       3  Hot_Start
       6  Hot_Start::?relay
      17  IRQEnable
       6  IRQEnable::?relay
      12  MD_MODULE
     116  MEM_memcpy
       6  MEM_memcpy::?relay
      57  MEM_memset
       6  MEM_memset::?relay
      10  MODEL
      12  MS_MODULE
       2  POW_MOD
      12  RTC_MODULE
      59  ReadTimer
       6  ReadTimer::?relay
       1  SLEEPSTA
    3060  SLOT_POOL
      92  SL_alloc
       6  SL_alloc::?relay
     100  SL_available
       6  SL_available::?relay
      91  SL_busy
       6  SL_busy::?relay
     287  SL_free
       6  SL_free::?relay
      76  SL_zone_check
       6  SL_zone_check::?relay
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
       3  SW_Init
       3  SW_Init
       3  SW_Init
      21  SW_Init
      34  SW_Init
      81  SW_Init
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
      10  SW_MOD
       3  Sleep
       6  Sleep::?relay
       3  TM_AdjustTime
       6  TM_AdjustTime::?relay
      95  TM_ClrAlarm
       6  TM_ClrAlarm::?relay
      17  TM_IRQ
       6  TM_IRQ::?relay
      12  TM_MODULE
      92  TM_SetAlarm
       6  TM_SetAlarm::?relay
       2  TOFFSET
      41  TimerCompareInterrupt
       3  TimerCompareInterrupt::??INTVEC 43
       3  Wakeup
       6  Wakeup::?relay
       1  _A_IEN0
       1  _A_IRCON
       4  __Constant_7fff
       4  __Constant_8000
       4  __Constant_ffff8000
       4  __Constant_ffffff
      41  aasert_test
       6  aasert_test::?relay
     101  alloc
       6  alloc::?relay
     189  calcCompareTime
       6  calcCompareTime::?relay
     120  check_create_delete
       6  check_create_delete::?relay
     223  check_max_alloc
       6  check_max_alloc::?relay
      61  fill_zero_slot
       6  fill_zero_slot::?relay
     107  free_idx
       6  free_idx::?relay
       5  isIRQEnable
       6  isIRQEnable::?relay
      70  loadTimerCompare
       6  loadTimerCompare::?relay
      12  main
       6  main::?relay
      72  protect_alloc
       6  protect_alloc::?relay
     114  red_zones
       6  red_zones::?relay
       4  ret_val
       2  slot_busy
       2  slot_ptr
      20  u_alarm_timer
       6  u_alarm_timer::?relay
     196  u_macros
       6  u_macros::?relay
      20  u_mem_slots
       6  u_mem_slots::?relay
     492  u_mem_utils
       6  u_mem_utils::?relay
     124  u_test
       6  u_test::?relay
       4  val
     217  -- Other

 
 6 060 bytes in segment BANKED_CODE
   402 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
    41 bytes in segment NEAR_CODE
     9 bytes in segment SFR_AN
 1 475 bytes in segment XDATA_I
 1 475 bytes in segment XDATA_ID
 3 204 bytes in segment XDATA_Z
 
 1 902 bytes of CODE     memory (+ 19 bytes shared)
     0 bytes of DATA     memory (+  9 bytes shared)
 6 060 bytes of HUGECODE memory
 4 663 bytes of XDATA    memory (+ 16 bytes shared)

Errors: none
Warnings: 3
