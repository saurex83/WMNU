###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               11/Feb/2020  22:02:31
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_new_arch\STACK_CORE_SRC\action_manager.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EW6DA3.tmp
#        (E:\WMNU\IAR_new_arch\STACK_CORE_SRC\action_manager.c -lC
#        "E:\WMNU\IAR_new_arch\PRJ Test\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRJ Test\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --mfc
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\alarm_timer.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\buffer.c
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\cpu.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
#        E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\frame.c "E:\WMNU\IAR_NEW_ARCH\PRJ
#        Test\main.c" E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_slots.c
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\mem_utils.c
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\model.c
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\rtc.c
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\time_manager.c
#        "E:\WMNU\IAR_new_arch\PRJ Test\u_alarm_timer.c"
#        "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_buffer.c" "E:\WMNU\IAR_NEW_ARCH\PRJ
#        Test\u_debug.c" "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_frame.c"
#        "E:\WMNU\IAR_new_arch\PRJ Test\u_macros.c" "E:\WMNU\IAR_NEW_ARCH\PRJ
#        Test\u_mem_slots.c" "E:\WMNU\IAR_new_arch\PRJ Test\u_mem_utils.c"
#        E:\WMNU\IAR_new_arch\STACK_CORE_SRC\ustimer.c
#        "E:\WMNU\IAR_NEW_ARCH\PRJ Test\utest.c")
#    Locale             =  Russian_Russia.1251
#    List file          =  
#        E:\WMNU\IAR_new_arch\PRJ Test\Debug\List\action_manager.lst
#    Object file        =  
#        E:\WMNU\IAR_new_arch\PRJ Test\Debug\Obj\action_manager.r51
#
###############################################################################

E:\WMNU\IAR_new_arch\STACK_CORE_SRC\action_manager.c
      1          #include "action_manager.h"
      2          #include "modules_list.h"
      3          #include "model.h"
      4          #include "debug.h"

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1
      5          
      6          /**
      7          @file
      8          */
      9          
     10          /* Определения */
     11          #define ITEMS_COUNT(name) (sizeof(name)/sizeof(module_s*))
     12          #define RUNNER(array, fun) {\
     13          for (char i = 0; i < ITEMS_COUNT(array); i++){\
     14              ASSERT(array[i]->fun != NULL);\
     15              array[i]->fun();\
     16              }\
     17          };
     18          
     19          
     20          /* Локальные переменные */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static module_s* COLD_MOD[] = COLD_MOD_DEF;
   \                     ??COLD_MOD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static module_s* HOT_MOD[] = HOT_MOD_DEF;
   \                     ??HOT_MOD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          static module_s* HW_MOD[] = HW_MOD_DEF;
   \                     ??HW_MOD:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for HW_MOD>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     24          static module_s* SW_MOD[] = SW_MOD_DEF;
   \                     ??SW_MOD:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for SW_MOD>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          static module_s* POW_MOD[] = POW_MOD_DEF;
   \                     ??POW_MOD:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for POW_MOD>`
   \   000002                REQUIRE __INIT_XDATA_I
     26          
     27          /* Локальные функции */
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void AM_Cold_start(void){
   \                     AM_Cold_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     30            RUNNER(COLD_MOD, Cold_Start);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Cold_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Cold_start_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??COLD_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   2408         ADD       A,#0x8
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Cold_start_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION__ & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION__ >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..1E       MOV       ?V0,#0x1e
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"COLD_MOD[i]->Cold_St...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"COLD_MOD[i]->Cold_St...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Cold_start_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??COLD_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??COLD_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   2408         ADD       A,#0x8
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Cold_start_0 & 0xFFFF
     31          }
   \                     ??AM_Cold_start_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     32          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          void AM_Hot_start(void){
   \                     AM_Hot_start:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     34            RUNNER(HOT_MOD, Hot_Start);  
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Hot_start_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Hot_start_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??HOT_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   240A         ADD       A,#0xa
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Hot_start_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION___1 & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION___1 >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..22       MOV       ?V0,#0x22
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"HOT_MOD[i]->Hot_Star...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"HOT_MOD[i]->Hot_Star...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Hot_start_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??HOT_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??HOT_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   240A         ADD       A,#0xa
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Hot_start_0 & 0xFFFF
     35          }
   \                     ??AM_Hot_start_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     36          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          void AM_HW_Init(void){
   \                     AM_HW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     38            RUNNER(HW_MOD, HW_Init);      
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_HW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9403         SUBB      A,#0x3
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_HW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??HW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   7037         JNZ       ??AM_HW_Init_2
   \   000044                ; Setup parameters for call to function printf
   \   000044   75....       MOV       ?V0,#??__FUNCTION___2 & 0xff
   \   000047   75....       MOV       ?V1,#(??__FUNCTION___2 >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..26       MOV       ?V0,#0x26
   \   000052   75..00       MOV       ?V1,#0x0
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005D   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   000069   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006C   7406         MOV       A,#0x6
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071                ; Setup parameters for call to function printf
   \   000071   7A..         MOV       R2,#`?<Constant "\\"HW_MOD[i]->HW_Init !...">` & 0xff
   \   000073   7B..         MOV       R3,#(`?<Constant "\\"HW_MOD[i]->HW_Init !...">` >> 8) & 0xff
   \   000075   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000078                ; Setup parameters for call to function DBG_CORE_HALT
   \   000078   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_HW_Init_2:
   \   00007B                ; Setup parameters for indirect call
   \   00007B   EE           MOV       A,R6
   \   00007C   F8           MOV       R0,A
   \   00007D   7900         MOV       R1,#0x0
   \   00007F   E8           MOV       A,R0
   \   000080   75F002       MOV       B,#0x2
   \   000083   A4           MUL       AB
   \   000084   C8           XCH       A,R0
   \   000085   AAF0         MOV       R2,B
   \   000087   75F000       MOV       B,#0x0
   \   00008A   A4           MUL       AB
   \   00008B   2A           ADD       A,R2
   \   00008C   FA           MOV       R2,A
   \   00008D   75F002       MOV       B,#0x2
   \   000090   E9           MOV       A,R1
   \   000091   A4           MUL       AB
   \   000092   2A           ADD       A,R2
   \   000093   F9           MOV       R1,A
   \   000094   74..         MOV       A,#??HW_MOD & 0xff
   \   000096   28           ADD       A,R0
   \   000097   F582         MOV       DPL,A
   \   000099   74..         MOV       A,#(??HW_MOD >> 8) & 0xff
   \   00009B   39           ADDC      A,R1
   \   00009C   F583         MOV       DPH,A
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F8           MOV       R0,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   8882         MOV       DPL,R0
   \   0000AE   12....       LCALL     ?CALL_IND
   \   0000B1   0E           INC       R6
   \   0000B2   02....       LJMP      ??AM_HW_Init_0 & 0xFFFF
     39          }
   \                     ??AM_HW_Init_1:
   \   0000B5   7F02         MOV       R7,#0x2
   \   0000B7   02....       LJMP      ?BANKED_LEAVE_XDATA
     40          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     41          void AM_SW_Init(void){
   \                     AM_SW_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     42            RUNNER(SW_MOD, SW_Init);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_SW_Init_0:
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   9405         SUBB      A,#0x5
   \   00000B   4003         JC        $+5
   \   00000D   02....       LJMP      ??AM_SW_Init_1 & 0xFFFF
   \   000010   EE           MOV       A,R6
   \   000011   F8           MOV       R0,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   E8           MOV       A,R0
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   C8           XCH       A,R0
   \   00001A   AAF0         MOV       R2,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   2A           ADD       A,R2
   \   000021   FA           MOV       R2,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   E9           MOV       A,R1
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   F9           MOV       R1,A
   \   000029   74..         MOV       A,#??SW_MOD & 0xff
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8882         MOV       DPL,R0
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   E8           MOV       A,R0
   \   000043   49           ORL       A,R1
   \   000044   7037         JNZ       ??AM_SW_Init_2
   \   000046                ; Setup parameters for call to function printf
   \   000046   75....       MOV       ?V0,#??__FUNCTION___3 & 0xff
   \   000049   75....       MOV       ?V1,#(??__FUNCTION___3 >> 8) & 0xff
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..2A       MOV       ?V0,#0x2a
   \   000054   75..00       MOV       ?V1,#0x0
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005F   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000069   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006E   7406         MOV       A,#0x6
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073                ; Setup parameters for call to function printf
   \   000073   7A..         MOV       R2,#`?<Constant "\\"SW_MOD[i]->SW_Init !...">` & 0xff
   \   000075   7B..         MOV       R3,#(`?<Constant "\\"SW_MOD[i]->SW_Init !...">` >> 8) & 0xff
   \   000077   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_SW_Init_2:
   \   00007D                ; Setup parameters for indirect call
   \   00007D   EE           MOV       A,R6
   \   00007E   F8           MOV       R0,A
   \   00007F   7900         MOV       R1,#0x0
   \   000081   E8           MOV       A,R0
   \   000082   75F002       MOV       B,#0x2
   \   000085   A4           MUL       AB
   \   000086   C8           XCH       A,R0
   \   000087   AAF0         MOV       R2,B
   \   000089   75F000       MOV       B,#0x0
   \   00008C   A4           MUL       AB
   \   00008D   2A           ADD       A,R2
   \   00008E   FA           MOV       R2,A
   \   00008F   75F002       MOV       B,#0x2
   \   000092   E9           MOV       A,R1
   \   000093   A4           MUL       AB
   \   000094   2A           ADD       A,R2
   \   000095   F9           MOV       R1,A
   \   000096   74..         MOV       A,#??SW_MOD & 0xff
   \   000098   28           ADD       A,R0
   \   000099   F582         MOV       DPL,A
   \   00009B   74..         MOV       A,#(??SW_MOD >> 8) & 0xff
   \   00009D   39           ADDC      A,R1
   \   00009E   F583         MOV       DPH,A
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   8882         MOV       DPL,R0
   \   0000B2   12....       LCALL     ?CALL_IND
   \   0000B5   0E           INC       R6
   \   0000B6   02....       LJMP      ??AM_SW_Init_0 & 0xFFFF
     43          }
   \                     ??AM_SW_Init_1:
   \   0000B9   7F02         MOV       R7,#0x2
   \   0000BB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          void AM_Sleep(void){
   \                     AM_Sleep:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     45            RUNNER(POW_MOD, Sleep);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Sleep_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Sleep_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??POW_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F583         MOV       DPH,A
   \   000036   8882         MOV       DPL,R0
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7037         JNZ       ??AM_Sleep_2
   \   000045                ; Setup parameters for call to function printf
   \   000045   75....       MOV       ?V0,#??__FUNCTION___4 & 0xff
   \   000048   75....       MOV       ?V1,#(??__FUNCTION___4 >> 8) & 0xff
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..2D       MOV       ?V0,#0x2d
   \   000053   75..00       MOV       ?V1,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   00005E   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   000068   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006D   7406         MOV       A,#0x6
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072                ; Setup parameters for call to function printf
   \   000072   7A..         MOV       R2,#`?<Constant "\\"POW_MOD[i]->Sleep !=...">` & 0xff
   \   000074   7B..         MOV       R3,#(`?<Constant "\\"POW_MOD[i]->Sleep !=...">` >> 8) & 0xff
   \   000076   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000079                ; Setup parameters for call to function DBG_CORE_HALT
   \   000079   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Sleep_2:
   \   00007C                ; Setup parameters for indirect call
   \   00007C   EE           MOV       A,R6
   \   00007D   F8           MOV       R0,A
   \   00007E   7900         MOV       R1,#0x0
   \   000080   E8           MOV       A,R0
   \   000081   75F002       MOV       B,#0x2
   \   000084   A4           MUL       AB
   \   000085   C8           XCH       A,R0
   \   000086   AAF0         MOV       R2,B
   \   000088   75F000       MOV       B,#0x0
   \   00008B   A4           MUL       AB
   \   00008C   2A           ADD       A,R2
   \   00008D   FA           MOV       R2,A
   \   00008E   75F002       MOV       B,#0x2
   \   000091   E9           MOV       A,R1
   \   000092   A4           MUL       AB
   \   000093   2A           ADD       A,R2
   \   000094   F9           MOV       R1,A
   \   000095   74..         MOV       A,#??POW_MOD & 0xff
   \   000097   28           ADD       A,R0
   \   000098   F582         MOV       DPL,A
   \   00009A   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F8           MOV       R0,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   8882         MOV       DPL,R0
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F8           MOV       R0,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   8882         MOV       DPL,R0
   \   0000B3   12....       LCALL     ?CALL_IND
   \   0000B6   0E           INC       R6
   \   0000B7   02....       LJMP      ??AM_Sleep_0 & 0xFFFF
     46          }
   \                     ??AM_Sleep_1:
   \   0000BA   7F02         MOV       R7,#0x2
   \   0000BC   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          void AM_Wakeup(void){
   \                     AM_Wakeup:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     48            RUNNER(POW_MOD, Wakeup);
   \   000005   7E00         MOV       R6,#0x0
   \                     ??AM_Wakeup_0:
   \   000007   EE           MOV       A,R6
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??AM_Wakeup_1 & 0xFFFF
   \   00000D   EE           MOV       A,R6
   \   00000E   F8           MOV       R0,A
   \   00000F   7900         MOV       R1,#0x0
   \   000011   E8           MOV       A,R0
   \   000012   75F002       MOV       B,#0x2
   \   000015   A4           MUL       AB
   \   000016   C8           XCH       A,R0
   \   000017   AAF0         MOV       R2,B
   \   000019   75F000       MOV       B,#0x0
   \   00001C   A4           MUL       AB
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   75F002       MOV       B,#0x2
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#??POW_MOD & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C8           XCH       A,R0
   \   000035   2406         ADD       A,#0x6
   \   000037   F582         MOV       DPL,A
   \   000039   C8           XCH       A,R0
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   7037         JNZ       ??AM_Wakeup_2
   \   000047                ; Setup parameters for call to function printf
   \   000047   75....       MOV       ?V0,#??__FUNCTION___5 & 0xff
   \   00004A   75....       MOV       ?V1,#(??__FUNCTION___5 >> 8) & 0xff
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..30       MOV       ?V0,#0x30
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75....       MOV       ?V0,#`?<Constant "action_manager.c">` & 0xff
   \   000060   75....       MOV       ?V1,#(`?<Constant "action_manager.c">` >> 8) & 0xff
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074                ; Setup parameters for call to function printf
   \   000074   7A..         MOV       R2,#`?<Constant "\\"POW_MOD[i]->Wakeup !...">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\"POW_MOD[i]->Wakeup !...">` >> 8) & 0xff
   \   000078   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00007B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
   \                     ??AM_Wakeup_2:
   \   00007E                ; Setup parameters for indirect call
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F002       MOV       B,#0x2
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F002       MOV       B,#0x2
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#??POW_MOD & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#(??POW_MOD >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   2406         ADD       A,#0x6
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   C8           XCH       A,R0
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   12....       LCALL     ?CALL_IND
   \   0000BA   0E           INC       R6
   \   0000BB   02....       LJMP      ??AM_Wakeup_0 & 0xFFFF
     49          }
   \                     ??AM_Wakeup_1:
   \   0000BE   7F02         MOV       R7,#0x2
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\alarm_timer.c
      1          #include "alarm_timer.h"
      2          #include "time_manager.h"
      3          #include "action_manager.h"
      4          #include "ioCC2530.h"
      5          #include "stdbool.h"
      6          #include "stdint.h"
      7          #include "debug.h"
      8          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      9          
     10          /**
     11          @file
     12          */
     13          
     14          #define MAX_NWTIME (nwtime_t)32767
     15          
     16          static void HW_Init(void);  
     17          static inline void IRQEnable(bool state);
     18          static uint32_t ReadTimer(void);
     19          static inline bool isIRQEnable(void);
     20          static inline uint32_t calcCompareTime(nwtime_t time);
     21          static void loadTimerCompare(uint32_t ticks);
     22          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          module_s AT_MODULE = {ALIAS(HW_Init)};
   \                     AT_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for AT_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static nwtime_t TOFFSET; 
   \                     ??TOFFSET:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          static uint32_t COMPARE_TIME; //!< Значение в регистре compare
   \                     ??COMPARE_TIME:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          static void HW_Init(void){
   \                     ??HW_Init:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     28            TOFFSET = 0;
   \   000004   90....       MOV       DPTR,#??TOFFSET
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
     29            COMPARE_TIME = 0;
   \   00000E   90....       MOV       DPTR,#??COMPARE_TIME
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   7400         MOV       A,#0x0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
     30          }; 
   \   000020   D083         POP       DPH
   \   000022   D082         POP       DPL
   \   000024   02....       LJMP      ?BRET
     31          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void AT_set_time(nwtime_t time){
   \                     AT_set_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     33            ASSERT(time <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_set_time_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___6 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___6 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..21       MOV       ?V0,#0x21
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"time <= MAX_NWTIME\\" ...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"time <= MAX_NWTIME\\" ...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     34            nwtime_t timer = ReadTimer();
   \                     ??AT_set_time_0:
   \   000049                ; Setup parameters for call to function ReadTimer
   \   000049   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   \   000050   8C..         MOV       ?V2,R4
   \   000052   8D..         MOV       ?V3,R5
   \   000054   85....       MOV       ?V4,?V0
   \   000057   85....       MOV       ?V5,?V1
     35            TOFFSET = time - timer;
   \   00005A   EE           MOV       A,R6
   \   00005B   C3           CLR       C
   \   00005C   95..         SUBB      A,?V4
   \   00005E   F8           MOV       R0,A
   \   00005F   EF           MOV       A,R7
   \   000060   95..         SUBB      A,?V5
   \   000062   F9           MOV       R1,A
   \   000063   90....       MOV       DPTR,#??TOFFSET
   \   000066   E8           MOV       A,R0
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E9           MOV       A,R1
   \   00006A   F0           MOVX      @DPTR,A
     36            TOFFSET &= 0x7FFF;
   \   00006B   90....       MOV       DPTR,#??TOFFSET
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   54FF         ANL       A,#0xff
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   547F         ANL       A,#0x7f
   \   000076   F0           MOVX      @DPTR,A
     37            // После установки времени нужно изменить compare time в таймере
     38            // Но только в случаи если прерывание активно
     39            if (isIRQEnable())
   \   000077                ; Setup parameters for call to function isIRQEnable
   \   000077   12....       LCALL     `??isIRQEnable::?relay`; Banked call to: isIRQEnable
   \   00007A   500F         JNC       ??AT_set_time_1
     40              AT_set_alarm(COMPARE_TIME);
   \   00007C                ; Setup parameters for call to function AT_set_alarm
   \   00007C   90....       MOV       DPTR,#??COMPARE_TIME
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?L_MOV_X
   \   000084   AA..         MOV       R2,?V0
   \   000086   AB..         MOV       R3,?V1
   \   000088   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     41          }
   \                     ??AT_set_time_1:
   \   00008B   7F06         MOV       R7,#0x6
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          nwtime_t AT_time(void){
   \                     AT_time:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     44            uint32_t val = ReadTimer();
   \   000005                ; Setup parameters for call to function ReadTimer
   \   000005   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   8C..         MOV       ?V6,R4
   \   00000E   8D..         MOV       ?V7,R5
     45            // TOFFSET = NETWORK TIME - TIMER
     46            // NETWORK TIME = TIMER + TOFFSET
     47            val +=TOFFSET;
   \   000010   90....       MOV       DPTR,#??TOFFSET
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V1,A
   \   00001A   E4           CLR       A
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   F5..         MOV       ?V3,A
   \   00001F   78..         MOV       R0,#?V4
   \   000021   79..         MOV       R1,#?V0
   \   000023   12....       LCALL     ?L_ADD
     48            val &= 0x7FFF; // Приводим значения таймера к 0-32767
   \   000026   90....       MOV       DPTR,#__Constant_7fff
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_AND_X
     49            return val;
   \   00002E   AA..         MOV       R2,?V4
   \   000030   AB..         MOV       R3,?V5
   \   000032   7F08         MOV       R7,#0x8
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
     50          }
     51          
     52          /**
     53          @brief Ждем наступления определенного момента времени
     54          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          void AT_wait(nwtime_t time){
   \                     AT_wait:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     56            ASSERT(time <= MAX_NWTIME);  
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_wait_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___7 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___7 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..38       MOV       ?V0,#0x38
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"time <= MAX_NWTIME\\" ...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"time <= MAX_NWTIME\\" ...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     57            static union 
     58            {
     59              uint32_t val;
     60              uint8_t fild[4];
     61            } val;
     62            val.val = 0;
   \                     ??AT_wait_0:
   \   000049   90....       MOV       DPTR,#??val
   \   00004C   7400         MOV       A,#0x0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   7400         MOV       A,#0x0
   \   00005A   F0           MOVX      @DPTR,A
     63            // TOFFSET = NETWORK TIME - TIMER
     64            // NETWORK TIME = TIMER + TOFFSET
     65            // Ждем синхронизацию таймера после пробуждения
     66            while (!(SLEEPSTA & 0x01));
   \                     ??AT_wait_1:
   \   00005B   E59D         MOV       A,0x9d
   \   00005D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005F   50FA         JNC       ??AT_wait_1
     67            do{
     68              // Соблюдаем порядок чтения регисторов ST  
     69              val.fild[0] = ST0;
   \                     ??AT_wait_2:
   \   000061   E595         MOV       A,0x95
   \   000063   90....       MOV       DPTR,#??val
   \   000066   F0           MOVX      @DPTR,A
     70              val.fild[1] = ST1;
   \   000067   E596         MOV       A,0x96
   \   000069   90....       MOV       DPTR,#??val + 1
   \   00006C   F0           MOVX      @DPTR,A
     71              val.fild[2] = ST2;
   \   00006D   E597         MOV       A,0x97
   \   00006F   90....       MOV       DPTR,#??val + 2
   \   000072   F0           MOVX      @DPTR,A
     72              val.val +=TOFFSET;
   \   000073   90....       MOV       DPTR,#??TOFFSET
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V0,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F5..         MOV       ?V1,A
   \   00007D   E4           CLR       A
   \   00007E   F5..         MOV       ?V2,A
   \   000080   F5..         MOV       ?V3,A
   \   000082   90....       MOV       DPTR,#??val
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?L_ADD_TO_X
     73              val.val &= 0x7FFF; // Приводим значения таймера к 0-32767    
   \   00008A   90....       MOV       DPTR,#__Constant_7fff
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?L_MOV_X
   \   000092   90....       MOV       DPTR,#??val
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?L_AND_TO_X
     74            } while (val.val < time);
   \   00009A   8E..         MOV       ?V0,R6
   \   00009C   8F..         MOV       ?V1,R7
   \   00009E   E4           CLR       A
   \   00009F   F5..         MOV       ?V2,A
   \   0000A1   F5..         MOV       ?V3,A
   \   0000A3   90....       MOV       DPTR,#??val
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?UL_GT_X
   \   0000AB   40B4         JC        ??AT_wait_2
     75          }
   \   0000AD   7F04         MOV       R7,#0x4
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000B2                REQUIRE SLEEPSTA
   \   0000B2                REQUIRE ST0
   \   0000B2                REQUIRE ST1
   \   0000B2                REQUIRE ST2

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     76          
     77          /**
     78          @brief Разрешение прерываний таймера сна
     79          @params[in] state = true - разрешить обработку прерываний
     80          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          static inline void IRQEnable(bool state){
   \                     ??IRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   A2F0         MOV       C,B.0
   \   000002   92F0         MOV       B.0,C
     82            if (state)
   \   000004   A2F0         MOV       C,B.0
   \   000006   5004         JNC       ??IRQEnable_1
     83              STIE = 1;
   \   000008   D2AD         SETB      0xa8.5
   \   00000A   8002         SJMP      ??IRQEnable_2
     84            else
     85              STIE = 0;
   \                     ??IRQEnable_1:
   \   00000C   C2AD         CLR       0xa8.5
     86          }
   \                     ??IRQEnable_2:
   \   00000E   02....       LJMP      ?BRET
   \   000011                REQUIRE _A_IEN0
     87          
     88          /**
     89          @brief Устанавливает время прерывания
     90          @details Время прерывания устанавливается относительно времени сети
     91          ,к примеру, что бы проснуться в таймслот номер 0, нужно установить ticks = 0.
     92          Процедура учитывает текущее значение таймера и перерасчитывает значение ticks. 
     93          @params[in] ticks время сети в тиках когда нужно проснуться
     94          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          void AT_set_alarm(nwtime_t alarm){
   \                     AT_set_alarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     96            ASSERT(alarm <= MAX_NWTIME);
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   9400         SUBB      A,#0x0
   \   00000D   EF           MOV       A,R7
   \   00000E   9480         SUBB      A,#-0x80
   \   000010   4037         JC        ??AT_set_alarm_0
   \   000012                ; Setup parameters for call to function printf
   \   000012   75....       MOV       ?V0,#??__FUNCTION___8 & 0xff
   \   000015   75....       MOV       ?V1,#(??__FUNCTION___8 >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..60       MOV       ?V0,#0x60
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75....       MOV       ?V0,#`?<Constant "alarm_timer.c">` & 0xff
   \   00002B   75....       MOV       ?V1,#(`?<Constant "alarm_timer.c">` >> 8) & 0xff
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_1` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_1` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV       R2,#`?<Constant "\\"alarm <= MAX_NWTIME\\"...">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\"alarm <= MAX_NWTIME\\"...">` >> 8) & 0xff
   \   000043   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000046                ; Setup parameters for call to function DBG_CORE_HALT
   \   000046   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     97            COMPARE_TIME = alarm; // Сохраняем установленное значение
   \                     ??AT_set_alarm_0:
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   E4           CLR       A
   \   00004E   FC           MOV       R4,A
   \   00004F   FD           MOV       R5,A
   \   000050   90....       MOV       DPTR,#??COMPARE_TIME
   \   000053   EA           MOV       A,R2
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   EB           MOV       A,R3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   EC           MOV       A,R4
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   ED           MOV       A,R5
   \   00005D   F0           MOVX      @DPTR,A
     98            uint32_t compare_time = calcCompareTime(alarm);
   \   00005E                ; Setup parameters for call to function calcCompareTime
   \   00005E   EE           MOV       A,R6
   \   00005F   FA           MOV       R2,A
   \   000060   EF           MOV       A,R7
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??calcCompareTime::?relay`; Banked call to: calcCompareTime
   \   000065   8A..         MOV       ?V0,R2
   \   000067   8B..         MOV       ?V1,R3
   \   000069   8C..         MOV       ?V2,R4
   \   00006B   8D..         MOV       ?V3,R5
     99            loadTimerCompare(compare_time);
   \   00006D                ; Setup parameters for call to function loadTimerCompare
   \   00006D   AA..         MOV       R2,?V0
   \   00006F   AB..         MOV       R3,?V1
   \   000071   AC..         MOV       R4,?V2
   \   000073   AD..         MOV       R5,?V3
   \   000075   12....       LCALL     `??loadTimerCompare::?relay`; Banked call to: loadTimerCompare
    100            IRQEnable(true);
   \   000078                ; Setup parameters for call to function IRQEnable
   \   000078   D2F0         SETB      B.0
   \   00007A   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    101          }
   \   00007D   7F04         MOV       R7,#0x4
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
    102          
    103          /**
    104          @brief Вычисляет значение, которое нужно установить в регистр compare таймера.
    105          @params[in] time время сети в тикак
    106          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          static inline uint32_t calcCompareTime(nwtime_t time){   
   \                     ??calcCompareTime:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    108              uint32_t timer = ReadTimer(); // Текущее значение счетчика
   \   000014                ; Setup parameters for call to function ReadTimer
   \   000014   12....       LCALL     `??ReadTimer::?relay`; Banked call to: ReadTimer
   \   000017   8A..         MOV       ?V4,R2
   \   000019   8B..         MOV       ?V5,R3
   \   00001B   8C..         MOV       ?V6,R4
   \   00001D   8D..         MOV       ?V7,R5
    109              //NETWORK TIME = TIMER + TOFFSET  
    110              // Приводим такты к тактам таймера
    111              uint16_t ticks_offset = (time - TOFFSET) & 0x7FFF;
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   C082         PUSH      DPL
   \   000026   C083         PUSH      DPH
   \   000028   90....       MOV       DPTR,#??TOFFSET
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   D083         POP       DPH
   \   000032   D082         POP       DPL
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C3           CLR       C
   \   000036   98           SUBB      A,R0
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   99           SUBB      A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   E8           MOV       A,R0
   \   00003D   54FF         ANL       A,#0xff
   \   00003F   FE           MOV       R6,A
   \   000040   E9           MOV       A,R1
   \   000041   547F         ANL       A,#0x7f
   \   000043   FF           MOV       R7,A
    112              uint32_t cmp_time = timer & ~0x7FFF; // Убираем младшие 15 бит
   \   000044   85....       MOV       ?V0,?V4
   \   000047   85....       MOV       ?V1,?V5
   \   00004A   85....       MOV       ?V2,?V6
   \   00004D   85....       MOV       ?V3,?V7
   \   000050   90....       MOV       DPTR,#__Constant_ffff8000
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?L_AND_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_MOV_TO_X
    113              cmp_time |= ticks_offset; // Вычисляем новое время
   \   000063   8E..         MOV       ?V0,R6
   \   000065   8F..         MOV       ?V1,R7
   \   000067   E4           CLR       A
   \   000068   F5..         MOV       ?V2,A
   \   00006A   F5..         MOV       ?V3,A
   \   00006C   85..82       MOV       DPL,?XSP + 0
   \   00006F   85..83       MOV       DPH,?XSP + 1
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?L_IOR_TO_X
    114              if (cmp_time <= timer){
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?UL_GE_X
   \   000082   5026         JNC       ??calcCompareTime_1
    115                cmp_time += 0x8000;
   \   000084   90....       MOV       DPTR,#__Constant_8000
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_MOV_X
   \   00008C   85..82       MOV       DPL,?XSP + 0
   \   00008F   85..83       MOV       DPH,?XSP + 1
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?L_ADD_TO_X
    116                cmp_time &=0xFFFFFF;
   \   000097   90....       MOV       DPTR,#__Constant_ffffff
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_X
   \   00009F   85..82       MOV       DPL,?XSP + 0
   \   0000A2   85..83       MOV       DPH,?XSP + 1
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?L_AND_TO_X
    117              }
    118               LOG_OFF("Timer = %lu, Ticks = %d,CMP = %lu \r\n",
    119                    timer, ticks, cmp_time );
    120              return cmp_time;
   \                     ??calcCompareTime_1:
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   12....       LCALL     ?XLOAD_R2345
   \   0000B3   7406         MOV       A,#0x6
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B8   7F08         MOV       R7,#0x8
   \   0000BA   02....       LJMP      ?BANKED_LEAVE_XDATA
    121          }
    122          
    123          /**
    124          @brief Возвращает текущее значение таймера
    125          @return Текущие ticks
    126          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          static uint32_t ReadTimer(void){
   \                     ??ReadTimer:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    128            static union 
    129            {
    130              uint32_t val;
    131              uint8_t fild[4];
    132            } ret_val;
    133            ret_val.val = 0;
   \   000004   90....       MOV       DPTR,#??ret_val
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
    134            // Ждем синхронизацию таймера после пробуждения
    135            while (!(SLEEPSTA & 0x01));
   \                     ??ReadTimer_1:
   \   000016   E59D         MOV       A,0x9d
   \   000018   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001A   50FA         JNC       ??ReadTimer_1
    136            // Соблюдаем порядок чтения регисторов ST  
    137            ret_val.fild[0] = ST0;
   \   00001C   E595         MOV       A,0x95
   \   00001E   90....       MOV       DPTR,#??ret_val
   \   000021   F0           MOVX      @DPTR,A
    138            ret_val.fild[1] = ST1;
   \   000022   E596         MOV       A,0x96
   \   000024   90....       MOV       DPTR,#??ret_val + 1
   \   000027   F0           MOVX      @DPTR,A
    139            ret_val.fild[2] = ST2;
   \   000028   E597         MOV       A,0x97
   \   00002A   90....       MOV       DPTR,#??ret_val + 2
   \   00002D   F0           MOVX      @DPTR,A
    140            return ret_val.val;
   \   00002E   90....       MOV       DPTR,#??ret_val
   \   000031   12....       LCALL     ?XLOAD_R2345
   \   000034   D083         POP       DPH
   \   000036   D082         POP       DPL
   \   000038   02....       LJMP      ?BRET
   \   00003B                REQUIRE SLEEPSTA
   \   00003B                REQUIRE ST0
   \   00003B                REQUIRE ST1
   \   00003B                REQUIRE ST2
    141          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??ret_val:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    142          
    143          /**
    144          @brief Устанавливает время пробуждения микроконтролера
    145          @params[in] ticks 24 битное значение времени пробуждения в ticks
    146          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          static void loadTimerCompare(uint32_t ticks){
   \                     ??loadTimerCompare:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    148            union 
    149            {
    150              uint32_t val;
    151              uint8_t fild[4];
    152            } value;
    153            value.val = ticks;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
    154            // Ждем разрешения на запись нового значения
    155            while (!(STLOAD & 0x01));
   \                     ??loadTimerCompare_1:
   \   00001D   E5AD         MOV       A,0xad
   \   00001F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000021   50FA         JNC       ??loadTimerCompare_1
    156            // Регистр ST0 должен быть записан в последнию очередь
    157            ST2 = value.fild[2];
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F597         MOV       0x97,A
    158            ST1 = value.fild[1];
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F596         MOV       0x96,A
    159            ST0 = value.fild[0];
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F595         MOV       0x95,A
    160          }
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   7F04         MOV       R7,#0x4
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000046                REQUIRE STLOAD
   \   000046                REQUIRE ST2
   \   000046                REQUIRE ST1
   \   000046                REQUIRE ST0
    161          
    162          /**
    163          @brief Проверка активности прерывания таймера
    164          @return true если прерывание установленно
    165          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          static inline bool isIRQEnable(void){
   \                     ??isIRQEnable:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    167            return STIE;
   \   000000   A2AD         MOV       C,0xa8.5
   \   000002   02....       LJMP      ?BRET
   \   000005                REQUIRE _A_IEN0
    168          }
    169          
    170          /**
    171          @brief Обработчик прерывания таймера сна
    172          */
    173          #pragma vector=ST_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    174          __interrupt void TimerCompareInterrupt(void){ 
   \                     TimerCompareInterrupt:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   C0E0         PUSH      A
   \   000002   74F1         MOV       A,#-0xf
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    175            ATOMIC_BLOCK_FORCEON{  
   \   000007                ; Setup parameters for call to function __cli
   \   000007   12....       LCALL     `??__cli::?relay`; Banked call to: __cli
   \   00000A   E9           MOV       A,R1
   \                     ??TimerCompareInterrupt_0:
   \   00000B   601F         JZ        ??TimerCompareInterrupt_1
    176              nwtime_t time = AT_time();
   \   00000D                ; Setup parameters for call to function AT_time
   \   00000D   12....       LCALL     `??AT_time::?relay`; Banked call to: AT_time
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   AE..         MOV       R6,?V0
   \   000016   AF..         MOV       R7,?V1
    177              // Отключаем прерывание таймера. Забота пользователя его включить
    178              IRQEnable(false); 
   \   000018                ; Setup parameters for call to function IRQEnable
   \   000018   C2F0         CLR       B.0
   \   00001A   12....       LCALL     `??IRQEnable::?relay`; Banked call to: IRQEnable
    179              TM_IRQ(time); // Передаем управление менеджеру времени
   \   00001D                ; Setup parameters for call to function TM_IRQ
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??TM_IRQ::?relay`; Banked call to: TM_IRQ
    180              STIF = 0; // Очищаем флаг прерывания
   \   000024   C2C7         CLR       0xc0.7
    181            }
   \   000026   7400         MOV       A,#0x0
   \   000028   D2AF         SETB      0xa8.7
   \   00002A   80DF         SJMP      ??TimerCompareInterrupt_0
    182          }
   \                     ??TimerCompareInterrupt_1:
   \   00002C   7F02         MOV       R7,#0x2
   \   00002E   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000031                REQUIRE _A_IEN0
   \   000031                REQUIRE _A_IRCON
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\buffer.c
      1          #include "debug.h"
      2          #include "macros.h"
      3          #include "frame.h"
      4          #include "stdbool.h"
      5          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      6          #include "list.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void INIT_LIST_HEAD(struct list_head *)
   \                     ??INIT_LIST_HEAD:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   EA           MOV       A,R2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   EB           MOV       A,R3
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   EA           MOV       A,R2
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *)
   \                     ??__list_add_valid:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   D3           SETB      C
   \   000001   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool __list_del_entry_valid(struct list_head *)
   \                     ??__list_del_entry_valid:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   D3           SETB      C
   \   000001   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_add(struct list_head *, struct list_head *, struct list_head *)
   \                     ??__list_add:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
   \   000019                ; Setup parameters for call to function __list_add_valid
   \   000019   78..         MOV       R0,#?V2
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   AC..         MOV       R4,?V0
   \   000020   AD..         MOV       R5,?V1
   \   000022   EE           MOV       A,R6
   \   000023   FA           MOV       R2,A
   \   000024   EF           MOV       A,R7
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??__list_add_valid::?relay`; Banked call to: __list_add_valid
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   5030         JNC       ??__list_add_1
   \   000030   85..82       MOV       DPL,?V2
   \   000033   85..83       MOV       DPH,?V3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   EF           MOV       A,R7
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   E5..         MOV       A,?V2
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E5..         MOV       A,?V3
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E5..         MOV       A,?V0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V1
   \   000054   F0           MOVX      @DPTR,A
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   EE           MOV       A,R6
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EF           MOV       A,R7
   \   00005F   F0           MOVX      @DPTR,A
   \                     ??__list_add_1:
   \   000060   7F04         MOV       R7,#0x4
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void list_add(struct list_head *, struct list_head *)
   \                     ??list_add:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D                ; Setup parameters for call to function __list_add
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000014   EE           MOV       A,R6
   \   000015   FC           MOV       R4,A
   \   000016   EF           MOV       A,R7
   \   000017   FD           MOV       R5,A
   \   000018   AA..         MOV       R2,?V0
   \   00001A   AB..         MOV       R3,?V1
   \   00001C   12....       LCALL     `??__list_add::?relay`; Banked call to: __list_add
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   7F02         MOV       R7,#0x2
   \   000026   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_del(struct list_head *, struct list_head *)
   \                     ??__list_del:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   EA           MOV       A,R2
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   EB           MOV       A,R3
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   EC           MOV       A,R4
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   ED           MOV       A,R5
   \   000017   F0           MOVX      @DPTR,A
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void __list_del_entry(struct list_head *)
   \                     ??__list_del_entry:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009                ; Setup parameters for call to function __list_del_entry_valid
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??__list_del_entry_valid::?relay`; Banked call to: __list_del_entry_valid
   \   000010   5017         JNC       ??__list_del_entry_1
   \   000012                ; Setup parameters for call to function __list_del
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FC           MOV       R4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??__list_del::?relay`; Banked call to: __list_del
   \                     ??__list_del_entry_1:
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void list_del(struct list_head *)
   \                     ??list_del:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009                ; Setup parameters for call to function __list_del_entry
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??__list_del_entry::?relay`; Banked call to: __list_del_entry
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   7401         MOV       A,#0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   7402         MOV       A,#0x2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   7402         MOV       A,#0x2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   7F01         MOV       R7,#0x1
   \   00002A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant int list_empty(struct list_head const *)
   \                     ??list_empty:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   EA           MOV       A,R2
   \   00000E   68           XRL       A,R0
   \   00000F   7002         JNZ       ??list_empty_1
   \   000011   EB           MOV       A,R3
   \   000012   69           XRL       A,R1
   \                     ??list_empty_1:
   \   000013   7004         JNZ       ??list_empty_2
   \   000015   D2F0         SETB      B.0
   \   000017   8002         SJMP      ??list_empty_3
   \                     ??list_empty_2:
   \   000019   C2F0         CLR       B.0
   \                     ??list_empty_3:
   \   00001B   A2F0         MOV       C,B.0
   \   00001D   E4           CLR       A
   \   00001E   33           RLC       A
   \   00001F   FA           MOV       R2,A
   \   000020   7B00         MOV       R3,#0x0
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
      7          
      8          #include "action_manager.h"
      9          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          module_s BF_MODULE = {ALIAS(SW_Init)};
   \                     BF_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for BF_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     11          
     12          struct node {
     13            struct frame *frame;
     14            struct list_head list ;
     15          };
     16          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     17          static struct node NODE_LIST[MAX_TXRX_BUFF_SIZE];
   \                     ??NODE_LIST:
   \   000000                DS 120
   \   000078                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     18          LIST_HEAD(TX_LIST_HEAD);
   \                     TX_LIST_HEAD:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for TX_LIST_HEAD>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     19          LIST_HEAD(RX_LIST_HEAD);
   \                     RX_LIST_HEAD:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for RX_LIST_HEAD>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static int TX_BUFF_FRAME_COUNT;
   \                     ??TX_BUFF_FRAME_COUNT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static int RX_BUFF_FRAME_COUNT;
   \                     ??RX_BUFF_FRAME_COUNT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          static void SW_Init(void){
   \                     ??SW_Init:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     24            TX_BUFF_FRAME_COUNT = 0;
   \   000005   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000008   7400         MOV       A,#0x0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   7400         MOV       A,#0x0
   \   00000E   F0           MOVX      @DPTR,A
     25            RX_BUFF_FRAME_COUNT = 0;
   \   00000F   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000012   7400         MOV       A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
     26            INIT_LIST_HEAD(&TX_LIST_HEAD);
   \   000019                ; Setup parameters for call to function INIT_LIST_HEAD
   \   000019   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   00001B   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   00001D   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     27            INIT_LIST_HEAD(&RX_LIST_HEAD);
   \   000020                ; Setup parameters for call to function INIT_LIST_HEAD
   \   000020   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   000022   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   000024   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     28            
     29            for_each_type(struct node, NODE_LIST, node){
   \   000027   7E..         MOV       R6,#??NODE_LIST & 0xff
   \   000029   7F..         MOV       R7,#(??NODE_LIST >> 8) & 0xff
   \                     ??SW_Init_6:
   \   00002B   C3           CLR       C
   \   00002C   EE           MOV       A,R6
   \   00002D   94..         SUBB      A,#(??NODE_LIST + 120) & 0xff
   \   00002F   EF           MOV       A,R7
   \   000030   94..         SUBB      A,#((??NODE_LIST + 120) >> 8) & 0xff
   \   000032   501E         JNC       ??SW_Init_7
     30              node->frame = NULL;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   7400         MOV       A,#0x0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   7400         MOV       A,#0x0
   \   00003E   F0           MOVX      @DPTR,A
     31              INIT_LIST_HEAD(&node->list);
   \   00003F                ; Setup parameters for call to function INIT_LIST_HEAD
   \   00003F   EE           MOV       A,R6
   \   000040   2402         ADD       A,#0x2
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     32            }
   \   000049   EE           MOV       A,R6
   \   00004A   2406         ADD       A,#0x6
   \   00004C   FE           MOV       R6,A
   \   00004D   50DC         JNC       ??SW_Init_6
   \   00004F   0F           INC       R7
   \   000050   80D9         SJMP      ??SW_Init_6
     33          };
   \                     ??SW_Init_7:
   \   000052   7F01         MOV       R7,#0x1
   \   000054   02....       LJMP      ?BANKED_LEAVE_XDATA
     34          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     35          static inline struct node* find_free_node(void){
   \                     ??find_free_node:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     36            for_each_type(struct node, NODE_LIST, node)
   \   000005   7E..         MOV       R6,#??NODE_LIST & 0xff
   \   000007   7F..         MOV       R7,#(??NODE_LIST >> 8) & 0xff
   \                     ??find_free_node_1:
   \   000009   C3           CLR       C
   \   00000A   EE           MOV       A,R6
   \   00000B   94..         SUBB      A,#(??NODE_LIST + 120) & 0xff
   \   00000D   EF           MOV       A,R7
   \   00000E   94..         SUBB      A,#((??NODE_LIST + 120) >> 8) & 0xff
   \   000010   5026         JNC       ??find_free_node_2
     37              if (node->frame == NULL){
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   E8           MOV       A,R0
   \   00001C   49           ORL       A,R1
   \   00001D   7010         JNZ       ??find_free_node_3
     38                INIT_LIST_HEAD(&node->list);
   \   00001F                ; Setup parameters for call to function INIT_LIST_HEAD
   \   00001F   EE           MOV       A,R6
   \   000020   2402         ADD       A,#0x2
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   3F           ADDC      A,R7
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??INIT_LIST_HEAD::?relay`; Banked call to: INIT_LIST_HEAD
     39                return node;
   \   000029   EE           MOV       A,R6
   \   00002A   FA           MOV       R2,A
   \   00002B   EF           MOV       A,R7
   \   00002C   FB           MOV       R3,A
   \   00002D   800D         SJMP      ??find_free_node_4
     40              }
   \                     ??find_free_node_3:
   \   00002F   EE           MOV       A,R6
   \   000030   2406         ADD       A,#0x6
   \   000032   FE           MOV       R6,A
   \   000033   50D4         JNC       ??find_free_node_1
   \   000035   0F           INC       R7
   \   000036   80D1         SJMP      ??find_free_node_1
     41            return NULL;
   \                     ??find_free_node_2:
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \                     ??find_free_node_4:
   \   00003C   7F01         MOV       R7,#0x1
   \   00003E   02....       LJMP      ?BANKED_LEAVE_XDATA
     42          };
     43          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          static inline bool _push(struct list_head *list, struct frame *frame){
   \                     ??_push:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
     45            ASSERT(frame != NULL);
   \   00000D   E5..         MOV       A,?V0
   \   00000F   45..         ORL       A,?V1
   \   000011   7037         JNZ       ??_push_1
   \   000013                ; Setup parameters for call to function printf
   \   000013   75....       MOV       ?V4,#??__FUNCTION___9 & 0xff
   \   000016   75....       MOV       ?V5,#(??__FUNCTION___9 >> 8) & 0xff
   \   000019   78..         MOV       R0,#?V4
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..2D       MOV       ?V4,#0x2d
   \   000021   75..00       MOV       ?V5,#0x0
   \   000024   78..         MOV       R0,#?V4
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   75....       MOV       ?V4,#`?<Constant "buffer.c">` & 0xff
   \   00002C   75....       MOV       ?V5,#(`?<Constant "buffer.c">` >> 8) & 0xff
   \   00002F   78..         MOV       R0,#?V4
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_2` & 0xff
   \   000036   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_2` >> 8) & 0xff
   \   000038   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003B   7406         MOV       A,#0x6
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040                ; Setup parameters for call to function printf
   \   000040   7A..         MOV       R2,#`?<Constant "\\"frame != NULL\\" Faild...">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "\\"frame != NULL\\" Faild...">` >> 8) & 0xff
   \   000044   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000047                ; Setup parameters for call to function DBG_CORE_HALT
   \   000047   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     46            struct node *node = find_free_node();
   \                     ??_push_1:
   \   00004A                ; Setup parameters for call to function find_free_node
   \   00004A   12....       LCALL     `??find_free_node::?relay`; Banked call to: find_free_node
   \   00004D   8A..         MOV       ?V4,R2
   \   00004F   8B..         MOV       ?V5,R3
   \   000051   AE..         MOV       R6,?V4
   \   000053   AF..         MOV       R7,?V5
     47            if (!node) // Нет свободных мест
   \   000055   EE           MOV       A,R6
   \   000056   4F           ORL       A,R7
   \   000057   7003         JNZ       ??_push_2
     48              return false;
   \   000059   C3           CLR       C
   \   00005A   801A         SJMP      ??_push_3
     49            node->frame = frame;
   \                     ??_push_2:
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   E5..         MOV       A,?V0
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E5..         MOV       A,?V1
   \   000066   F0           MOVX      @DPTR,A
     50            list_add(&node->list , list);
   \   000067                ; Setup parameters for call to function list_add
   \   000067   AC..         MOV       R4,?V2
   \   000069   AD..         MOV       R5,?V3
   \   00006B   EE           MOV       A,R6
   \   00006C   2402         ADD       A,#0x2
   \   00006E   FA           MOV       R2,A
   \   00006F   E4           CLR       A
   \   000070   3F           ADDC      A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??list_add::?relay`; Banked call to: list_add
     51            return true;
   \   000075   D3           SETB      C
   \                     ??_push_3:
   \   000076   7F06         MOV       R7,#0x6
   \   000078   02....       LJMP      ?BANKED_LEAVE_XDATA
     52          };
     53          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          bool BF_push_tx(struct frame *frame){
   \                     BF_push_tx:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     55            bool res;
     56            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V0,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??BF_push_tx_0:
   \   000014   E8           MOV       A,R0
   \   000015   6027         JZ        ??BF_push_tx_1
     57              res = _push(&TX_LIST_HEAD, frame);
   \   000017                ; Setup parameters for call to function _push
   \   000017   EE           MOV       A,R6
   \   000018   FC           MOV       R4,A
   \   000019   EF           MOV       A,R7
   \   00001A   FD           MOV       R5,A
   \   00001B   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   00001D   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   00001F   12....       LCALL     `??_push::?relay`; Banked call to: _push
   \   000022   92..         MOV       ?VB.0,C
     58              if (res)
   \   000024   A2..         MOV       C,?VB.0
   \   000026   500C         JNC       ??BF_push_tx_2
     59                TX_BUFF_FRAME_COUNT++;
   \   000028   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   3400         ADDC      A,#0x0
   \   000033   F0           MOVX      @DPTR,A
     60            };
   \                     ??BF_push_tx_2:
   \   000034   7800         MOV       R0,#0x0
   \   000036   E5..         MOV       A,?V0
   \   000038   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003A   92AF         MOV       0xa8.7,C
   \   00003C   80D6         SJMP      ??BF_push_tx_0
     61            return res;
   \                     ??BF_push_tx_1:
   \   00003E   A2..         MOV       C,?VB.0
   \   000040   7F01         MOV       R7,#0x1
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000045                REQUIRE _A_IEN0
     62          };
     63          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          bool BF_push_rx(struct frame *frame){
   \                     BF_push_rx:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     65            bool res;
     66            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V0,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??BF_push_rx_0:
   \   000014   E8           MOV       A,R0
   \   000015   6027         JZ        ??BF_push_rx_1
     67              res = _push(&RX_LIST_HEAD, frame);
   \   000017                ; Setup parameters for call to function _push
   \   000017   EE           MOV       A,R6
   \   000018   FC           MOV       R4,A
   \   000019   EF           MOV       A,R7
   \   00001A   FD           MOV       R5,A
   \   00001B   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   00001D   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   00001F   12....       LCALL     `??_push::?relay`; Banked call to: _push
   \   000022   92..         MOV       ?VB.0,C
     68              if (res)
   \   000024   A2..         MOV       C,?VB.0
   \   000026   500C         JNC       ??BF_push_rx_2
     69                RX_BUFF_FRAME_COUNT++;
   \   000028   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   3400         ADDC      A,#0x0
   \   000033   F0           MOVX      @DPTR,A
     70            };
   \                     ??BF_push_rx_2:
   \   000034   7800         MOV       R0,#0x0
   \   000036   E5..         MOV       A,?V0
   \   000038   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003A   92AF         MOV       0xa8.7,C
   \   00003C   80D6         SJMP      ??BF_push_rx_0
     71            return res;
   \                     ??BF_push_rx_1:
   \   00003E   A2..         MOV       C,?VB.0
   \   000040   7F01         MOV       R7,#0x1
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000045                REQUIRE _A_IEN0
     72          };
     73          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          static inline struct node* find_node_by_frame_ptr(struct frame *frame){
   \                     ??find_node_by_frame_ptr:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
     75            for_each_type(struct node, NODE_LIST, node){
   \   000008   7A..         MOV       R2,#??NODE_LIST & 0xff
   \   00000A   7B..         MOV       R3,#(??NODE_LIST >> 8) & 0xff
   \                     ??find_node_by_frame_ptr_1:
   \   00000C   C3           CLR       C
   \   00000D   EA           MOV       A,R2
   \   00000E   94..         SUBB      A,#(??NODE_LIST + 120) & 0xff
   \   000010   EB           MOV       A,R3
   \   000011   94..         SUBB      A,#((??NODE_LIST + 120) >> 8) & 0xff
   \   000013   501A         JNC       ??find_node_by_frame_ptr_2
     76            if (node->frame == frame)
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FC           MOV       R4,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FD           MOV       R5,A
   \   00001E   E8           MOV       A,R0
   \   00001F   6C           XRL       A,R4
   \   000020   7002         JNZ       ??find_node_by_frame_ptr_3
   \   000022   E9           MOV       A,R1
   \   000023   6D           XRL       A,R5
   \                     ??find_node_by_frame_ptr_3:
   \   000024   600D         JZ        ??find_node_by_frame_ptr_4
     77              return node;
     78            }
   \   000026   EA           MOV       A,R2
   \   000027   2406         ADD       A,#0x6
   \   000029   FA           MOV       R2,A
   \   00002A   50E0         JNC       ??find_node_by_frame_ptr_1
   \   00002C   0B           INC       R3
   \   00002D   80DD         SJMP      ??find_node_by_frame_ptr_1
     79            return NULL;
   \                     ??find_node_by_frame_ptr_2:
   \   00002F   7A00         MOV       R2,#0x0
   \   000031   7B00         MOV       R3,#0x0
   \                     ??find_node_by_frame_ptr_4:
   \   000033   D083         POP       DPH
   \   000035   D082         POP       DPL
   \   000037   02....       LJMP      ?BRET
     80          }
     81          
     82          /**
     83          @brief
     84          @return -1 неверный указатель, 0 - нет элемента, 1 - удалил
     85          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          static int _remove(struct list_head *list, struct frame *frame){
   \                     ??_remove:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
     87            struct node *node = find_node_by_frame_ptr(frame);
   \   00000D                ; Setup parameters for call to function find_node_by_frame_ptr
   \   00000D   AA..         MOV       R2,?V2
   \   00000F   AB..         MOV       R3,?V3
   \   000011   12....       LCALL     `??find_node_by_frame_ptr::?relay`; Banked call to: find_node_by_frame_ptr
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   85....       MOV       ?V6,?V0
   \   00001B   85....       MOV       ?V7,?V1
     88            if (!node)
   \   00001E   E5..         MOV       A,?V6
   \   000020   45..         ORL       A,?V7
   \   000022   7006         JNZ       ??_remove_1
     89              return -1;
   \   000024   7AFF         MOV       R2,#-0x1
   \   000026   7BFF         MOV       R3,#-0x1
   \   000028   8063         SJMP      ??_remove_2
     90            
     91            struct list_head *ptr;
     92            struct node *s_node;
     93            list_for_each(ptr, list){
   \                     ??_remove_1:
   \   00002A   85..82       MOV       DPL,?V4
   \   00002D   85..83       MOV       DPH,?V5
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   E8           MOV       A,R0
   \   000036   FE           MOV       R6,A
   \   000037   E9           MOV       A,R1
   \   000038   FF           MOV       R7,A
   \                     ??_remove_3:
   \   000039   E5..         MOV       A,?V4
   \   00003B   6E           XRL       A,R6
   \   00003C   7003         JNZ       ??_remove_4
   \   00003E   E5..         MOV       A,?V5
   \   000040   6F           XRL       A,R7
   \                     ??_remove_4:
   \   000041   6046         JZ        ??_remove_5
     94              s_node = list_entry(ptr, struct node, list);
   \   000043   EE           MOV       A,R6
   \   000044   24FE         ADD       A,#-0x2
   \   000046   F8           MOV       R0,A
   \   000047   EF           MOV       A,R7
   \   000048   34FF         ADDC      A,#-0x1
   \   00004A   F9           MOV       R1,A
   \   00004B   88..         MOV       ?V0,R0
   \   00004D   89..         MOV       ?V1,R1
     95              if (s_node->frame == frame){
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   85..83       MOV       DPH,?V1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F9           MOV       R1,A
   \   00005A   E5..         MOV       A,?V2
   \   00005C   68           XRL       A,R0
   \   00005D   7003         JNZ       ??_remove_6
   \   00005F   E5..         MOV       A,?V3
   \   000061   69           XRL       A,R1
   \                     ??_remove_6:
   \   000062   701A         JNZ       ??_remove_7
     96                s_node->frame = NULL;
   \   000064   85..82       MOV       DPL,?V0
   \   000067   85..83       MOV       DPH,?V1
   \   00006A   7400         MOV       A,#0x0
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   7400         MOV       A,#0x0
   \   000070   F0           MOVX      @DPTR,A
     97                list_del(ptr);
   \   000071                ; Setup parameters for call to function list_del
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??list_del::?relay`; Banked call to: list_del
     98                return 1;
   \   000078   7A01         MOV       R2,#0x1
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   800F         SJMP      ??_remove_2
     99              }
    100            }
   \                     ??_remove_7:
   \   00007E   8E82         MOV       DPL,R6
   \   000080   8F83         MOV       DPH,R7
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FE           MOV       R6,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FF           MOV       R7,A
   \   000087   80B0         SJMP      ??_remove_3
    101            return 0;
   \                     ??_remove_5:
   \   000089   7A00         MOV       R2,#0x0
   \   00008B   7B00         MOV       R3,#0x0
   \                     ??_remove_2:
   \   00008D   7F08         MOV       R7,#0x8
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
    102          }
    103          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          bool BF_remove_rx(struct frame *frame){
   \                     BF_remove_rx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    105            int ret;
    106            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V2,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??BF_remove_rx_0:
   \   000014   E8           MOV       A,R0
   \   000015   602D         JZ        ??BF_remove_rx_1
    107              ret = _remove(&RX_LIST_HEAD, frame);
   \   000017                ; Setup parameters for call to function _remove
   \   000017   AC..         MOV       R4,?V0
   \   000019   AD..         MOV       R5,?V1
   \   00001B   7A..         MOV       R2,#RX_LIST_HEAD & 0xff
   \   00001D   7B..         MOV       R3,#(RX_LIST_HEAD >> 8) & 0xff
   \   00001F   12....       LCALL     `??_remove::?relay`; Banked call to: _remove
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    108              if (ret)
   \   00002A   EE           MOV       A,R6
   \   00002B   4F           ORL       A,R7
   \   00002C   600C         JZ        ??BF_remove_rx_2
    109                RX_BUFF_FRAME_COUNT--; 
   \   00002E   90....       MOV       DPTR,#??RX_BUFF_FRAME_COUNT
   \   000031   E0           MOVX      A,@DPTR
   \   000032   24FF         ADD       A,#-0x1
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   34FF         ADDC      A,#-0x1
   \   000039   F0           MOVX      @DPTR,A
    110            };
   \                     ??BF_remove_rx_2:
   \   00003A   7800         MOV       R0,#0x0
   \   00003C   E5..         MOV       A,?V2
   \   00003E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000040   92AF         MOV       0xa8.7,C
   \   000042   80D0         SJMP      ??BF_remove_rx_0
    111            if (ret)
   \                     ??BF_remove_rx_1:
   \   000044   EE           MOV       A,R6
   \   000045   4F           ORL       A,R7
   \   000046   6003         JZ        ??BF_remove_rx_3
    112               return true;
   \   000048   D3           SETB      C
   \   000049   8001         SJMP      ??BF_remove_rx_4
    113            return false;
   \                     ??BF_remove_rx_3:
   \   00004B   C3           CLR       C
   \                     ??BF_remove_rx_4:
   \   00004C   7F06         MOV       R7,#0x6
   \   00004E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000051                REQUIRE _A_IEN0
    114          };
    115          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          bool BF_remove_tx(struct frame *frame){
   \                     BF_remove_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    117            int ret;
    118            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V2,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_1`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??BF_remove_tx_0:
   \   000014   E8           MOV       A,R0
   \   000015   6033         JZ        ??BF_remove_tx_1
    119              ret = _remove(&TX_LIST_HEAD, frame);
   \   000017                ; Setup parameters for call to function _remove
   \   000017   AC..         MOV       R4,?V0
   \   000019   AD..         MOV       R5,?V1
   \   00001B   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   00001D   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   00001F   12....       LCALL     `??_remove::?relay`; Banked call to: _remove
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    120              if (ret == 1)
   \   00002A   7401         MOV       A,#0x1
   \   00002C   6E           XRL       A,R6
   \   00002D   7003         JNZ       ??BF_remove_tx_2
   \   00002F   7400         MOV       A,#0x0
   \   000031   6F           XRL       A,R7
   \                     ??BF_remove_tx_2:
   \   000032   700C         JNZ       ??BF_remove_tx_3
    121                TX_BUFF_FRAME_COUNT--; 
   \   000034   90....       MOV       DPTR,#??TX_BUFF_FRAME_COUNT
   \   000037   E0           MOVX      A,@DPTR
   \   000038   24FF         ADD       A,#-0x1
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   34FF         ADDC      A,#-0x1
   \   00003F   F0           MOVX      @DPTR,A
    122            };
   \                     ??BF_remove_tx_3:
   \   000040   7800         MOV       R0,#0x0
   \   000042   E5..         MOV       A,?V2
   \   000044   A2E0         MOV       C,0xE0 /* A   */.0
   \   000046   92AF         MOV       0xa8.7,C
   \   000048   80CA         SJMP      ??BF_remove_tx_0
    123            if (ret == 1)
   \                     ??BF_remove_tx_1:
   \   00004A   7401         MOV       A,#0x1
   \   00004C   6E           XRL       A,R6
   \   00004D   7003         JNZ       ??BF_remove_tx_4
   \   00004F   7400         MOV       A,#0x0
   \   000051   6F           XRL       A,R7
   \                     ??BF_remove_tx_4:
   \   000052   7003         JNZ       ??BF_remove_tx_5
    124               return true;
   \   000054   D3           SETB      C
   \   000055   8001         SJMP      ??BF_remove_tx_6
    125            return false;
   \                     ??BF_remove_tx_5:
   \   000057   C3           CLR       C
   \                     ??BF_remove_tx_6:
   \   000058   7F06         MOV       R7,#0x6
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00005D                REQUIRE _A_IEN0
    126          };
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          struct frame* BF_next_tx(struct frame* frame){
   \                     BF_next_tx:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    129            struct node *node;
    130            if (!frame) // инициализируется новый перебор
   \   000009   E5..         MOV       A,?V0
   \   00000B   45..         ORL       A,?V1
   \   00000D   7032         JNZ       ??BF_next_tx_0
    131              if (list_empty(&TX_LIST_HEAD)) // Список пустой
   \   00000F                ; Setup parameters for call to function list_empty
   \   00000F   7A..         MOV       R2,#TX_LIST_HEAD & 0xff
   \   000011   7B..         MOV       R3,#(TX_LIST_HEAD >> 8) & 0xff
   \   000013   12....       LCALL     `??list_empty::?relay`; Banked call to: list_empty
   \   000016   8A..         MOV       ?V2,R2
   \   000018   8B..         MOV       ?V3,R3
   \   00001A   E5..         MOV       A,?V2
   \   00001C   45..         ORL       A,?V3
   \   00001E   6006         JZ        ??BF_next_tx_1
    132                return NULL;
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \   000024   8047         SJMP      ??BF_next_tx_2
    133              else{ // Если список не пустой, берем первый элемент
    134                node = list_first_entry(&TX_LIST_HEAD, struct node, list);
   \                     ??BF_next_tx_1:
   \   000026   90....       MOV       DPTR,#TX_LIST_HEAD
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   24FE         ADD       A,#-0x2
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   34FF         ADDC      A,#-0x1
   \   000031   F9           MOV       R1,A
   \   000032   E8           MOV       A,R0
   \   000033   FE           MOV       R6,A
   \   000034   E9           MOV       A,R1
   \   000035   FF           MOV       R7,A
    135                return(node->frame);
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FA           MOV       R2,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FB           MOV       R3,A
   \   00003F   802C         SJMP      ??BF_next_tx_2
    136              }
    137            
    138            // Итерируем текущий курсор
    139            node = container_of(frame, struct node, frame);
   \                     ??BF_next_tx_0:
   \   000041   AE..         MOV       R6,?V0
   \   000043   AF..         MOV       R7,?V1
    140            struct node *n_node = list_next_entry(node, struct node, list);
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   24FE         ADD       A,#-0x2
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   34FF         ADDC      A,#-0x1
   \   000053   F9           MOV       R1,A
   \   000054   8882         MOV       DPL,R0
   \   000056   8983         MOV       DPH,R1
    141            if (node == n_node)
   \   000058   E582         MOV       A,DPL
   \   00005A   6E           XRL       A,R6
   \   00005B   7003         JNZ       ??BF_next_tx_3
   \   00005D   E583         MOV       A,DPH
   \   00005F   6F           XRL       A,R7
   \                     ??BF_next_tx_3:
   \   000060   7006         JNZ       ??BF_next_tx_4
    142              return NULL;
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   8005         SJMP      ??BF_next_tx_2
    143           
    144            return n_node->frame;
   \                     ??BF_next_tx_4:
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FB           MOV       R3,A
   \                     ??BF_next_tx_2:
   \   00006D   7F04         MOV       R7,#0x4
   \   00006F   02....       LJMP      ?BANKED_LEAVE_XDATA
    145          }
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\cpu.c
      1          #include "action_manager.h"
      2          #include "ioCC2530.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);   
      9           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          module_s CPU_MODULE = {ALIAS(HW_Init)};
   \                     CPU_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for CPU_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     11          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     12          static void HW_Init(void){
   \                     ??HW_Init_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     13            /* Сбрасываем бит OSC32K, будет выбран 32.768 кварц */
     14            CLKCONCMD &= ~(1<<7); 
   \   000000   53C67F       ANL       0xc6,#0x7f
     15            /* Ждем пока бит не станет 0 */
     16            while (CLKCONSTA & (1<<7)); 
   \                     ??HW_Init_4:
   \   000003   E59E         MOV       A,0x9e
   \   000005   A2E7         MOV       C,0xE0 /* A   */.7
   \   000007   40FA         JC        ??HW_Init_4
     17            /* Переходим на 32 Мгц */
     18            CLKCONCMD = 0;// (1<<3);
   \   000009   75C600       MOV       0xc6,#0x0
     19            while (CLKCONSTA&(1<<6));
   \                     ??HW_Init_5:
   \   00000C   E59E         MOV       A,0x9e
   \   00000E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000010   40FA         JC        ??HW_Init_5
     20          };  
   \   000012   02....       LJMP      ?BRET
   \   000015                REQUIRE CLKCONCMD
   \   000015                REQUIRE CLKCONSTA
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
      1          #include "debug.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);  
      9          static void uart_init(void);
     10           

   \                                 In  segment XDATA_I, align 1, keep-with-next
     11          module_s DBG_MODULE = {ALIAS(HW_Init)};
   \                     DBG_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for DBG_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     12          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     13          static void HW_Init(void){
   \                     ??HW_Init_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     14          #ifndef DEBUG
     15            return;
     16          #endif
     17          #ifndef PRINT_TO_TERMINAL  
     18            uart_init();
     19          #endif
     20          };  
   \   000000   02....       LJMP      ?BRET
     21          
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          void DBG_CORE_HALT(void){
   \                     DBG_CORE_HALT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     24            while(1);
   \                     ??DBG_CORE_HALT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_HALT_0
     25          }
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          void DBG_CORE_FAULT(void){
   \                     DBG_CORE_FAULT:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     28            while(1);
   \                     ??DBG_CORE_FAULT_0:
   \   000000   80FE         SJMP      ??DBG_CORE_FAULT_0
     29          }
     30          
     31          // Настройка порта uart для отладки
     32          static void uart_init(void){
     33            // Выбор расположения UART на выводах
     34            char U0CFG = 0; // 0={TX=P0_3, RX=P0_2
     35            PERCFG |= (U0CFG<<0); 
     36            // U0UCR регистр настройки режима uart. меня устраивает по умолчанию
     37            U0CSR = (1<<7); // Выбираем режим uart  
     38            // Настройка скорости передачи данных на 2М  
     39            U0BAUD = 0;  // табличные значения из pdf
     40            U0GCR =  16;
     41            // Включаем альтернативные функции выводов
     42            P0SEL = (1<<2)|(1<<3);
     43            U0CSR |= (1<<6);
     44          }
     45          
     46          #ifndef PRINT_TO_TERMINAL 
     47          #include <yfuns.h>
     48          _STD_BEGIN
     49          #pragma module_name = "?__write"
     50          
     51          int MyLowLevelPutchar(int x){
     52            while( U0CSR&(1<<0));
     53            U0DBUF = x;
     54            return x;
     55          }
     56          
     57          size_t __write(int handle, const unsigned char * buffer, size_t size){
     58            /* Remove the #if #endif pair to enable the implementation */
     59            size_t nChars = 0;
     60            if (buffer == 0)  {
     61              return 0;
     62            }
     63            /* This template only writes to "standard out" and "standard err",
     64             * for all other file handles it returns failure. */
     65            if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR)  {
     66              return _LLIO_ERROR;
     67            }
     68          
     69            for (/* Empty */; size != 0; --size){
     70              if (MyLowLevelPutchar(*buffer++) < 0){
     71                return _LLIO_ERROR;
     72              }
     73              ++nChars;
     74            }
     75            return nChars;
     76          }
     77          _STD_END
     78          
     79          #endif
     80          
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\frame.c
      1          #include "action_manager.h"
      2          #include "frame.h"
      3          #include "debug.h"
      4          #include "global.h"
      5          #include "mem_utils.h"
      6          #include "mem_slots.h"
      7          
      8          /**
      9          @file Статическое хранение принятых пакетов
     10          */
     11          
     12          static void SW_Init(void); 
     13          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     14          module_s FR_MODULE = {ALIAS(SW_Init)};
   \                     FR_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for FR_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          static void SW_Init(void){ 
   \                     ??SW_Init_1:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     17          }; 
   \   000000   02....       LJMP      ?BRET
     18          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          struct frame* FR_create(){
   \                     FR_create:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     20            return (struct frame*)SL_alloc();
   \   000004                ; Setup parameters for call to function SL_alloc
   \   000004   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     21          };
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          bool FR_delete(struct frame *frame){
   \                     FR_delete:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     24            return SL_free((char*)frame);
   \   000009                ; Setup parameters for call to function SL_free
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   000010   7F01         MOV       R7,#0x1
   \   000012   02....       LJMP      ?BANKED_LEAVE_XDATA
     25          }
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          bool FR_add_header(struct frame* frame ,void *head, char len){
   \                     FR_add_header:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   89..         MOV       ?V4,R1
     28            int new_len = frame->len + len;
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FA           MOV       R2,A
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   E5..         MOV       A,?V4
   \   000020   F8           MOV       R0,A
   \   000021   7900         MOV       R1,#0x0
   \   000023   EA           MOV       A,R2
   \   000024   28           ADD       A,R0
   \   000025   FE           MOV       R6,A
   \   000026   EB           MOV       A,R3
   \   000027   39           ADDC      A,R1
   \   000028   FF           MOV       R7,A
     29            if (!(new_len < MAX_PAYLOAD_SIZE))
   \   000029   C3           CLR       C
   \   00002A   EE           MOV       A,R6
   \   00002B   947F         SUBB      A,#0x7f
   \   00002D   EF           MOV       A,R7
   \   00002E   9400         SUBB      A,#0x0
   \   000030   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000032   65D0         XRL       A,PSW
   \   000034   33           RLC       A
   \   000035   4004         JC        ??FR_add_header_0
     30              return false;
   \   000037   C3           CLR       C
   \   000038   02....       LJMP      ??FR_add_header_1 & 0xFFFF
     31            
     32            // Сдвинем данные на размер вставки при необходимости
     33            if (frame->len != 0)
   \                     ??FR_add_header_0:
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6045         JZ        ??FR_add_header_2
     34              MEMCPY(&frame->payload[len], frame->payload, len);
   \   000044   E5..         MOV       A,?V4
   \   000046   F8           MOV       R0,A
   \   000047   7900         MOV       R1,#0x0
   \   000049   E5..         MOV       A,?V0
   \   00004B   28           ADD       A,R0
   \   00004C   F8           MOV       R0,A
   \   00004D   E5..         MOV       A,?V1
   \   00004F   39           ADDC      A,R1
   \   000050   F9           MOV       R1,A
   \   000051   E8           MOV       A,R0
   \   000052   2415         ADD       A,#0x15
   \   000054   F8           MOV       R0,A
   \   000055   5001         JNC       ??FR_add_header_3
   \   000057   09           INC       R1
   \                     ??FR_add_header_3:
   \   000058   7405         MOV       A,#0x5
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E8           MOV       A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \   000061   F0           MOVX      @DPTR,A
   \   000062   E5..         MOV       A,?V0
   \   000064   2415         ADD       A,#0x15
   \   000066   F8           MOV       R0,A
   \   000067   E4           CLR       A
   \   000068   35..         ADDC      A,?V1
   \   00006A   F9           MOV       R1,A
   \   00006B   7407         MOV       A,#0x7
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E8           MOV       A,R0
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E9           MOV       A,R1
   \   000074   F0           MOVX      @DPTR,A
   \   000075   E5..         MOV       A,?V4
   \   000077   C0E0         PUSH      A
   \   000079   7409         MOV       A,#0x9
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081                ; Setup parameters for call to function MEM_memcpy
   \   000081   7405         MOV       A,#0x5
   \   000083   12....       LCALL     ?XSTACK_DISP101_8
   \   000086   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     35            
     36            // Скопируем новые данные
     37            MEMCPY(frame->payload, head, len);
   \                     ??FR_add_header_2:
   \   000089   E5..         MOV       A,?V0
   \   00008B   2415         ADD       A,#0x15
   \   00008D   F8           MOV       R0,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V1
   \   000091   F9           MOV       R1,A
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E8           MOV       A,R0
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   E9           MOV       A,R1
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E5..         MOV       A,?V2
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E5..         MOV       A,?V3
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   E5..         MOV       A,?V4
   \   0000AB   C0E0         PUSH      A
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   D0E0         POP       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5                ; Setup parameters for call to function MEM_memcpy
   \   0000B5   AA..         MOV       R2,?XSP + 0
   \   0000B7   AB..         MOV       R3,?XSP + 1
   \   0000B9   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     38            frame->len = new_len;
   \   0000BC   EE           MOV       A,R6
   \   0000BD   C0E0         PUSH      A
   \   0000BF   85..82       MOV       DPL,?V0
   \   0000C2   85..83       MOV       DPH,?V1
   \   0000C5   D0E0         POP       A
   \   0000C7   F0           MOVX      @DPTR,A
     39            return true;
   \   0000C8   D3           SETB      C
   \                     ??FR_add_header_1:
   \   0000C9   740A         MOV       A,#0xa
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   7F05         MOV       R7,#0x5
   \   0000D0   02....       LJMP      ?BANKED_LEAVE_XDATA
     40          };
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          bool FR_del_header(struct frame* frame, char len){
   \                     FR_del_header:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
     43            if (len == 0 || len > frame->len )
   \   000010   E5..         MOV       A,?V0
   \   000012   600A         JZ        ??FR_del_header_0
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   C3           CLR       C
   \   00001A   95..         SUBB      A,?V0
   \   00001C   5004         JNC       ??FR_del_header_1
     44              return false;
   \                     ??FR_del_header_0:
   \   00001E   C3           CLR       C
   \   00001F   02....       LJMP      ??FR_del_header_2 & 0xFFFF
     45            MEMCPY(frame->payload, &frame->payload[len], len);
   \                     ??FR_del_header_1:
   \   000022   EE           MOV       A,R6
   \   000023   2415         ADD       A,#0x15
   \   000025   F8           MOV       R0,A
   \   000026   E4           CLR       A
   \   000027   3F           ADDC      A,R7
   \   000028   F9           MOV       R1,A
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E8           MOV       A,R0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
   \   000033   E5..         MOV       A,?V0
   \   000035   F8           MOV       R0,A
   \   000036   7900         MOV       R1,#0x0
   \   000038   EE           MOV       A,R6
   \   000039   28           ADD       A,R0
   \   00003A   F8           MOV       R0,A
   \   00003B   EF           MOV       A,R7
   \   00003C   39           ADDC      A,R1
   \   00003D   F9           MOV       R1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   2415         ADD       A,#0x15
   \   000041   F8           MOV       R0,A
   \   000042   5001         JNC       ??FR_del_header_3
   \   000044   09           INC       R1
   \                     ??FR_del_header_3:
   \   000045   7406         MOV       A,#0x6
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E8           MOV       A,R0
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   E9           MOV       A,R1
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   E5..         MOV       A,?V0
   \   000051   C0E0         PUSH      A
   \   000053   7408         MOV       A,#0x8
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   D0E0         POP       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B                ; Setup parameters for call to function MEM_memcpy
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     46            
     47            #ifdef FRAME_FOOTER_DEL
     48            MEMSET(&frame->payload[len], 0, len);
   \   000063   90....       MOV       DPTR,#`?<Constant {(char *)0, 0, 0}>`
   \   000066   AC..         MOV       R4,?XSP + 0
   \   000068   AD..         MOV       R5,?XSP + 1
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00006F   E5..         MOV       A,?V0
   \   000071   F8           MOV       R0,A
   \   000072   7900         MOV       R1,#0x0
   \   000074   EE           MOV       A,R6
   \   000075   28           ADD       A,R0
   \   000076   F8           MOV       R0,A
   \   000077   EF           MOV       A,R7
   \   000078   39           ADDC      A,R1
   \   000079   F9           MOV       R1,A
   \   00007A   E8           MOV       A,R0
   \   00007B   2415         ADD       A,#0x15
   \   00007D   F8           MOV       R0,A
   \   00007E   5001         JNC       ??FR_del_header_4
   \   000080   09           INC       R1
   \                     ??FR_del_header_4:
   \   000081   85..82       MOV       DPL,?XSP + 0
   \   000084   85..83       MOV       DPH,?XSP + 1
   \   000087   E8           MOV       A,R0
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   E9           MOV       A,R1
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   E5..         MOV       A,?V0
   \   00008E   C0E0         PUSH      A
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098                ; Setup parameters for call to function MEM_memset
   \   000098   AA..         MOV       R2,?XSP + 0
   \   00009A   AB..         MOV       R3,?XSP + 1
   \   00009C   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     49            #endif
     50            
     51            frame->len = frame->len - len;;
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   C3           CLR       C
   \   0000A5   95..         SUBB      A,?V0
   \   0000A7   F0           MOVX      @DPTR,A
     52            return true;
   \   0000A8   D3           SETB      C
   \                     ??FR_del_header_2:
   \   0000A9   7409         MOV       A,#0x9
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   7F01         MOV       R7,#0x1
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
     53          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 0, 0}>`:
   \   000000   0000         DW 0H
   \   000002   00           DB 0
   \   000003   00           DB 0
     54          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          int FR_busy(){
   \                     FR_busy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     56            return SL_busy();
   \   000004                ; Setup parameters for call to function SL_busy
   \   000004   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     57          }
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          int FR_available(){
   \                     FR_available:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     60            return SL_available();
   \   000004                ; Setup parameters for call to function SL_available
   \   000004   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
     61          };
E:\WMNU\IAR_NEW_ARCH\PRJ Test\main.c
      1          #include "utest.h"
      2          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      3          void main(){
   \                     main:
   \   000000                ; Auto size: 0
      4            run_tests();
   \   000000                ; Setup parameters for call to function run_tests
   \   000000   12....       LCALL     `??run_tests::?relay`; Banked call to: run_tests
      5            while(1);
   \                     ??main_0:
   \   000003   80FE         SJMP      ??main_0
      6          }
E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\mem_slots.c
      1          #include "debug.h"
      2          #include "global.h"
      3          #include "macros.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant bool is_array_ptr(void *, void *, size_t)
   \                     ??is_array_ptr:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
   \   000015   EC           MOV       A,R4
   \   000016   C3           CLR       C
   \   000017   9E           SUBB      A,R6
   \   000018   F8           MOV       R0,A
   \   000019   ED           MOV       A,R5
   \   00001A   9F           SUBB      A,R7
   \   00001B   F9           MOV       R1,A
   \   00001C   AA..         MOV       R2,?V0
   \   00001E   AB..         MOV       R3,?V1
   \   000020   12....       LCALL     ?US_DIV_MOD
   \   000023   8A..         MOV       ?V2,R2
   \   000025   8B..         MOV       ?V3,R3
   \   000027   A8..         MOV       R0,?V2
   \   000029   A9..         MOV       R1,?V3
   \   00002B   E8           MOV       A,R0
   \   00002C   49           ORL       A,R1
   \   00002D   7004         JNZ       ??is_array_ptr_1
   \   00002F   D2F0         SETB      B.0
   \   000031   8002         SJMP      ??is_array_ptr_2
   \                     ??is_array_ptr_1:
   \   000033   C2F0         CLR       B.0
   \                     ??is_array_ptr_2:
   \   000035   A2F0         MOV       C,B.0
   \   000037   7F04         MOV       R7,#0x4
   \   000039   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant size_t array_index(void *, void *, size_t)
   \                     ??array_index:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
   \   000015   EC           MOV       A,R4
   \   000016   C3           CLR       C
   \   000017   9E           SUBB      A,R6
   \   000018   F8           MOV       R0,A
   \   000019   ED           MOV       A,R5
   \   00001A   9F           SUBB      A,R7
   \   00001B   F9           MOV       R1,A
   \   00001C   AA..         MOV       R2,?V0
   \   00001E   AB..         MOV       R3,?V1
   \   000020   12....       LCALL     ?US_DIV_MOD
   \   000023   88..         MOV       ?V2,R0
   \   000025   89..         MOV       ?V3,R1
   \   000027   AA..         MOV       R2,?V2
   \   000029   AB..         MOV       R3,?V3
   \   00002B   7F04         MOV       R7,#0x4
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
      4          #include "stdbool.h"
      5          #include "action_manager.h"
      6          #include "mem_utils.h"  
      7          #include "cpu.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant char __cli(void)
   \                     ??__cli_2:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C2AF         CLR       0xa8.7
   \   000002   7901         MOV       R1,#0x1
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE _A_IEN0
      8          
      9          //!< Максимальный размер данных в одном слоте
     10          #define SLOT_BUFFER_SIZE 150
     11          #define RED_ZONE_CODE 0x73
     12          
     13          typedef char red_zone_t;
     14          
     15          static void SW_Init(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
     16          module_s MS_MODULE = {ALIAS(SW_Init)};
   \                     MS_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for MS_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     17          
     18          struct property{
     19            char taken: 1;
     20          };
     21          
     22          struct slot{
     23            struct property property;
     24            red_zone_t red_zone_1;
     25            char buffer[SLOT_BUFFER_SIZE];
     26            red_zone_t red_zone_2;
     27          };
     28          
     29          //!< Хранилище слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          static struct slot SLOT_POOL[SLOT_POOL_ITEMS];
   \                     ??SLOT_POOL:
   \   000000                DS 3060
   \   000BF4                REQUIRE __INIT_XDATA_Z
     31          //!< Количество занятых слотов

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     32          static int slot_busy;
   \                     ??slot_busy:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     33          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void SW_Init(void){
   \                     ??SW_Init_2:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     35            slot_busy = 0;
   \   00000A   90....       MOV       DPTR,#??slot_busy
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
     36            for_each_type(struct slot, SLOT_POOL, slot){
   \   000014   7E..         MOV       R6,#??SLOT_POOL & 0xff
   \   000016   7F..         MOV       R7,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SW_Init_8:
   \   000018   C3           CLR       C
   \   000019   EE           MOV       A,R6
   \   00001A   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   00001C   EF           MOV       A,R7
   \   00001D   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   00001F   504A         JNC       ??SW_Init_9
     37              slot->property.taken = false;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C2E0         CLR       0xE0 /* A   */.0
   \   000028   F0           MOVX      @DPTR,A
     38              #ifdef FILL_SLOT_ZERO
     39                MEMSET(slot->buffer, 0, SLOT_BUFFER_SIZE);
   \   000029   90....       MOV       DPTR,#`?<Constant {(char *)0, 150, 0}>`
   \   00002C   AC..         MOV       R4,?XSP + 0
   \   00002E   AD..         MOV       R5,?XSP + 1
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000035   EE           MOV       A,R6
   \   000036   2402         ADD       A,#0x2
   \   000038   F8           MOV       R0,A
   \   000039   E4           CLR       A
   \   00003A   3F           ADDC      A,R7
   \   00003B   F9           MOV       R1,A
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   E8           MOV       A,R0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E9           MOV       A,R1
   \   000046   F0           MOVX      @DPTR,A
   \   000047                ; Setup parameters for call to function MEM_memset
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     40              #endif    
     41              slot->red_zone_1 = RED_ZONE_CODE;
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   A3           INC       DPTR
   \   000053   7473         MOV       A,#0x73
   \   000055   F0           MOVX      @DPTR,A
     42              slot->red_zone_2 = RED_ZONE_CODE;
   \   000056   EE           MOV       A,R6
   \   000057   2498         ADD       A,#-0x68
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3F           ADDC      A,R7
   \   00005D   F583         MOV       DPH,A
   \   00005F   7473         MOV       A,#0x73
   \   000061   F0           MOVX      @DPTR,A
     43            }
   \   000062   EE           MOV       A,R6
   \   000063   2499         ADD       A,#-0x67
   \   000065   FE           MOV       R6,A
   \   000066   50B0         JNC       ??SW_Init_8
   \   000068   0F           INC       R7
   \   000069   80AD         SJMP      ??SW_Init_8
     44          };
   \                     ??SW_Init_9:
   \   00006B   7404         MOV       A,#0x4
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   7F01         MOV       R7,#0x1
   \   000072   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 150, 0}>`:
   \   000000   0000         DW 0H
   \   000002   96           DB 150
   \   000003   00           DB 0
     45          
     46          /**
     47          @brief Возвращает указатель на буфер или NULL. Буфер заполнен 0
     48          @detail 
     49          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     50          char* SL_alloc(void){  
   \                     SL_alloc:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     51            ATOMIC_BLOCK_RESTORE{
   \   00000A   A2AF         MOV       C,0xa8.7
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F5..         MOV       ?V0,A
   \   000010                ; Setup parameters for call to function __cli
   \   000010   12....       LCALL     `??__cli::?relay_2`; Banked call to: __cli
   \   000013   E9           MOV       A,R1
   \   000014   F8           MOV       R0,A
   \                     ??SL_alloc_0:
   \   000015   E8           MOV       A,R0
   \   000016   606B         JZ        ??SL_alloc_1
     52              for_each_type(struct slot, SLOT_POOL, slot){
   \   000018   7E..         MOV       R6,#??SLOT_POOL & 0xff
   \   00001A   7F..         MOV       R7,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SL_alloc_2:
   \   00001C   C3           CLR       C
   \   00001D   EE           MOV       A,R6
   \   00001E   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000020   EF           MOV       A,R7
   \   000021   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000023   5054         JNC       ??SL_alloc_3
     53                if (!slot->property.taken){
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00002C   4042         JC        ??SL_alloc_4
     54                  slot->property.taken = true;
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   E0           MOVX      A,@DPTR
   \   000033   D2E0         SETB      0xE0 /* A   */.0
   \   000035   F0           MOVX      @DPTR,A
     55                  slot_busy++;
   \   000036   90....       MOV       DPTR,#??slot_busy
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   2401         ADD       A,#0x1
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   3400         ADDC      A,#0x0
   \   000041   F0           MOVX      @DPTR,A
     56                  #ifdef FILL_SLOT_ZERO
     57                    MEMSET(slot->buffer, 0, SLOT_BUFFER_SIZE);
   \   000042   90....       MOV       DPTR,#`?<Constant {(char *)0, 150, 0}>_1`
   \   000045   AC..         MOV       R4,?XSP + 0
   \   000047   AD..         MOV       R5,?XSP + 1
   \   000049   7404         MOV       A,#0x4
   \   00004B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00004E   EE           MOV       A,R6
   \   00004F   2402         ADD       A,#0x2
   \   000051   F8           MOV       R0,A
   \   000052   E4           CLR       A
   \   000053   3F           ADDC      A,R7
   \   000054   F9           MOV       R1,A
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E8           MOV       A,R0
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   E9           MOV       A,R1
   \   00005F   F0           MOVX      @DPTR,A
   \   000060                ; Setup parameters for call to function MEM_memset
   \   000060   AA..         MOV       R2,?XSP + 0
   \   000062   AB..         MOV       R3,?XSP + 1
   \   000064   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     58                  #endif
     59                  return slot->buffer;
   \   000067   EE           MOV       A,R6
   \   000068   2402         ADD       A,#0x2
   \   00006A   FA           MOV       R2,A
   \   00006B   E4           CLR       A
   \   00006C   3F           ADDC      A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   8017         SJMP      ??SL_alloc_5
     60                };
     61              };  
   \                     ??SL_alloc_4:
   \   000070   EE           MOV       A,R6
   \   000071   2499         ADD       A,#-0x67
   \   000073   FE           MOV       R6,A
   \   000074   50A6         JNC       ??SL_alloc_2
   \   000076   0F           INC       R7
   \   000077   80A3         SJMP      ??SL_alloc_2
     62            };
   \                     ??SL_alloc_3:
   \   000079   7800         MOV       R0,#0x0
   \   00007B   E5..         MOV       A,?V0
   \   00007D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007F   92AF         MOV       0xa8.7,C
   \   000081   8092         SJMP      ??SL_alloc_0
     63            return NULL;
   \                     ??SL_alloc_1:
   \   000083   7A00         MOV       R2,#0x0
   \   000085   7B00         MOV       R3,#0x0
   \                     ??SL_alloc_5:
   \   000087   7404         MOV       A,#0x4
   \   000089   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008C   7F01         MOV       R7,#0x1
   \   00008E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000091                REQUIRE _A_IEN0
     64          };

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 150, 0}>_1`:
   \   000000   0000         DW 0H
   \   000002   96           DB 150
   \   000003   00           DB 0
     65          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          static bool _free(char *buff){
   \                     ??_free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
     67            struct slot *slot = container_of(buff, struct slot, buffer);
   \   000009   E5..         MOV       A,?V0
   \   00000B   24FE         ADD       A,#-0x2
   \   00000D   FE           MOV       R6,A
   \   00000E   E5..         MOV       A,?V1
   \   000010   34FF         ADDC      A,#-0x1
   \   000012   FF           MOV       R7,A
     68            
     69            if (!is_array_ptr(SLOT_POOL, slot, sizeof(struct slot)))
   \   000013                ; Setup parameters for call to function is_array_ptr
   \   000013   75..99       MOV       ?V2,#-0x67
   \   000016   75..00       MOV       ?V3,#0x0
   \   000019   78..         MOV       R0,#?V2
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   EE           MOV       A,R6
   \   00001F   FC           MOV       R4,A
   \   000020   EF           MOV       A,R7
   \   000021   FD           MOV       R5,A
   \   000022   7A..         MOV       R2,#??SLOT_POOL & 0xff
   \   000024   7B..         MOV       R3,#(??SLOT_POOL >> 8) & 0xff
   \   000026   12....       LCALL     `??is_array_ptr::?relay`; Banked call to: is_array_ptr
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   4003         JC        ??_free_1
     70              return false;
   \   000030   C3           CLR       C
   \   000031   8050         SJMP      ??_free_2
     71            
     72            size_t index = array_index(SLOT_POOL, slot, sizeof(struct slot));
   \                     ??_free_1:
   \   000033                ; Setup parameters for call to function array_index
   \   000033   75..99       MOV       ?V2,#-0x67
   \   000036   75..00       MOV       ?V3,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV       A,R6
   \   00003F   FC           MOV       R4,A
   \   000040   EF           MOV       A,R7
   \   000041   FD           MOV       R5,A
   \   000042   7A..         MOV       R2,#??SLOT_POOL & 0xff
   \   000044   7B..         MOV       R3,#(??SLOT_POOL >> 8) & 0xff
   \   000046   12....       LCALL     `??array_index::?relay`; Banked call to: array_index
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   8A..         MOV       ?V2,R2
   \   000050   8B..         MOV       ?V3,R3
   \   000052   A8..         MOV       R0,?V2
   \   000054   A9..         MOV       R1,?V3
     73            if (!(index < SLOT_BUFFER_SIZE))
   \   000056   C3           CLR       C
   \   000057   E8           MOV       A,R0
   \   000058   9496         SUBB      A,#-0x6a
   \   00005A   E9           MOV       A,R1
   \   00005B   9400         SUBB      A,#0x0
   \   00005D   4003         JC        ??_free_3
     74              return false;
   \   00005F   C3           CLR       C
   \   000060   8021         SJMP      ??_free_2
     75            
     76            if (slot->property.taken != true)
   \                     ??_free_3:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E0           MOVX      A,@DPTR
   \   000067   A2E0         MOV       C,0xE0 /* A   */.0
   \   000069   4003         JC        ??_free_4
     77              return false;
   \   00006B   C3           CLR       C
   \   00006C   8015         SJMP      ??_free_2
     78              
     79            slot->property.taken = false;
   \                     ??_free_4:
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C2E0         CLR       0xE0 /* A   */.0
   \   000075   F0           MOVX      @DPTR,A
     80            slot_busy--;
   \   000076   90....       MOV       DPTR,#??slot_busy
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   24FF         ADD       A,#-0x1
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   34FF         ADDC      A,#-0x1
   \   000081   F0           MOVX      @DPTR,A
     81            return true;
   \   000082   D3           SETB      C
   \                     ??_free_2:
   \   000083   7F04         MOV       R7,#0x4
   \   000085   02....       LJMP      ?BANKED_LEAVE_XDATA
     82          }
     83          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          bool SL_free(char *buff){
   \                     SL_free:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     85            bool res;
     86            ATOMIC_BLOCK_RESTORE{
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F5..         MOV       ?V0,A
   \   00000F                ; Setup parameters for call to function __cli
   \   00000F   12....       LCALL     `??__cli::?relay_2`; Banked call to: __cli
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   \                     ??SL_free_0:
   \   000014   E8           MOV       A,R0
   \   000015   6013         JZ        ??SL_free_1
     87              res = _free(buff);
   \   000017                ; Setup parameters for call to function _free
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??_free::?relay`; Banked call to: _free
   \   00001E   92..         MOV       ?VB.0,C
     88            }
   \   000020   7800         MOV       R0,#0x0
   \   000022   E5..         MOV       A,?V0
   \   000024   A2E0         MOV       C,0xE0 /* A   */.0
   \   000026   92AF         MOV       0xa8.7,C
   \   000028   80EA         SJMP      ??SL_free_0
     89            return res;
   \                     ??SL_free_1:
   \   00002A   A2..         MOV       C,?VB.0
   \   00002C   7F01         MOV       R7,#0x1
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000031                REQUIRE _A_IEN0
     90          };
     91          
     92          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          int SL_busy(){
   \                     SL_busy:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     94            ASSERT(slot_busy <= SLOT_POOL_ITEMS);
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9415         SUBB      A,#0x15
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4037         JC        ??SL_busy_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75....       MOV       ?V0,#??__FUNCTION___10 & 0xff
   \   00001A   75....       MOV       ?V1,#(??__FUNCTION___10 >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..5E       MOV       ?V0,#0x5e
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000030   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_3` & 0xff
   \   00003A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_3` >> 8) & 0xff
   \   00003C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003F   7406         MOV       A,#0x6
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function printf
   \   000044   7A..         MOV       R2,#`?<Constant "\\"slot_busy <= SLOT_PO...">` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "\\"slot_busy <= SLOT_PO...">` >> 8) & 0xff
   \   000048   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00004B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     95            return slot_busy;
   \                     ??SL_busy_0:
   \   00004E   90....       MOV       DPTR,#??slot_busy
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FA           MOV       R2,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FB           MOV       R3,A
   \   000056   7F02         MOV       R7,#0x2
   \   000058   02....       LJMP      ?BANKED_LEAVE_XDATA
     96          };
     97          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          int SL_available(){
   \                     SL_available:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     99            ASSERT(slot_busy <= SLOT_POOL_ITEMS);  
   \   000005   90....       MOV       DPTR,#??slot_busy
   \   000008   C3           CLR       C
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   9415         SUBB      A,#0x15
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   9400         SUBB      A,#0x0
   \   000010   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000012   65D0         XRL       A,PSW
   \   000014   33           RLC       A
   \   000015   4037         JC        ??SL_available_0
   \   000017                ; Setup parameters for call to function printf
   \   000017   75....       MOV       ?V0,#??__FUNCTION___11 & 0xff
   \   00001A   75....       MOV       ?V1,#(??__FUNCTION___11 >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..63       MOV       ?V0,#0x63
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75....       MOV       ?V0,#`?<Constant "mem_slots.c">` & 0xff
   \   000030   75....       MOV       ?V1,#(`?<Constant "mem_slots.c">` >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_3` & 0xff
   \   00003A   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_3` >> 8) & 0xff
   \   00003C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003F   7406         MOV       A,#0x6
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function printf
   \   000044   7A..         MOV       R2,#`?<Constant "\\"slot_busy <= SLOT_PO...">` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "\\"slot_busy <= SLOT_PO...">` >> 8) & 0xff
   \   000048   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004B                ; Setup parameters for call to function DBG_CORE_HALT
   \   00004B   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
    100            return SLOT_POOL_ITEMS - slot_busy;
   \                     ??SL_available_0:
   \   00004E   90....       MOV       DPTR,#??slot_busy
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   7414         MOV       A,#0x14
   \   000058   C3           CLR       C
   \   000059   98           SUBB      A,R0
   \   00005A   FA           MOV       R2,A
   \   00005B   7400         MOV       A,#0x0
   \   00005D   99           SUBB      A,R1
   \   00005E   FB           MOV       R3,A
   \   00005F   7F02         MOV       R7,#0x2
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    101          };
    102          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          int SL_zone_check(){
   \                     SL_zone_check:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    104            int index = 0;
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
    105            for_each_type(struct slot, SLOT_POOL, slot){
   \   000008   78..         MOV       R0,#??SLOT_POOL & 0xff
   \   00000A   79..         MOV       R1,#(??SLOT_POOL >> 8) & 0xff
   \                     ??SL_zone_check_0:
   \   00000C   C3           CLR       C
   \   00000D   E8           MOV       A,R0
   \   00000E   94..         SUBB      A,#(??SLOT_POOL + 244) & 0xff
   \   000010   E9           MOV       A,R1
   \   000011   94..         SUBB      A,#((??SLOT_POOL + 3060) >> 8) & 0xff
   \   000013   502C         JNC       ??SL_zone_check_1
    106              if (!(slot->red_zone_1 == RED_ZONE_CODE &&
    107                    slot->red_zone_2 == RED_ZONE_CODE))
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6473         XRL       A,#0x73
   \   00001D   700E         JNZ       ??SL_zone_check_2
   \   00001F   E8           MOV       A,R0
   \   000020   2498         ADD       A,#-0x68
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6473         XRL       A,#0x73
   \   00002B   6006         JZ        ??SL_zone_check_3
    108                return index;
   \                     ??SL_zone_check_2:
   \   00002D   EC           MOV       A,R4
   \   00002E   FA           MOV       R2,A
   \   00002F   ED           MOV       A,R5
   \   000030   FB           MOV       R3,A
   \   000031   8012         SJMP      ??SL_zone_check_4
    109              index++;
   \                     ??SL_zone_check_3:
   \   000033   0C           INC       R4
   \   000034   EC           MOV       A,R4
   \   000035   7001         JNZ       ??SL_zone_check_5
   \   000037   0D           INC       R5
    110            }
   \                     ??SL_zone_check_5:
   \   000038   E8           MOV       A,R0
   \   000039   2499         ADD       A,#-0x67
   \   00003B   F8           MOV       R0,A
   \   00003C   50CE         JNC       ??SL_zone_check_0
   \   00003E   09           INC       R1
   \   00003F   80CB         SJMP      ??SL_zone_check_0
    111            return -1;
   \                     ??SL_zone_check_1:
   \   000041   7AFF         MOV       R2,#-0x1
   \   000043   7BFF         MOV       R3,#-0x1
   \                     ??SL_zone_check_4:
   \   000045   D083         POP       DPH
   \   000047   D082         POP       DPL
   \   000049   02....       LJMP      ?BRET
    112          };
    113          
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\mem_utils.c
      1          #include "mem_utils.h"
      2          #include "debug.h"
      3          
      4          /**
      5          @file Реентерабельное копирование
      6          */
      7          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      8          void MEM_memcpy(struct memcpy *memcpy){
   \                     MEM_memcpy:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
      9            while (memcpy->len > 0){
   \                     ??MEM_memcpy_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   605E         JZ        ??MEM_memcpy_1
     10              *memcpy->dst = *memcpy->src;
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F583         MOV       DPH,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C0E0         PUSH      A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F583         MOV       DPH,A
   \   00002A   8882         MOV       DPL,R0
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
     11              memcpy->dst++;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2401         ADD       A,#0x1
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   3400         ADDC      A,#0x0
   \   00003B   F9           MOV       R1,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
     12              memcpy->src++;
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   2401         ADD       A,#0x1
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   3400         ADDC      A,#0x0
   \   000053   F9           MOV       R1,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   F0           MOVX      @DPTR,A
     13              memcpy->len--;
   \   00005F   8A82         MOV       DPL,R2
   \   000061   8B83         MOV       DPH,R3
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   24FF         ADD       A,#-0x1
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   8097         SJMP      ??MEM_memcpy_0
     14            }
     15          };
   \                     ??MEM_memcpy_1:
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   02....       LJMP      ?BRET
     16          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     17          void MEM_memset(struct memset *memset){
   \                     MEM_memset:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     18            while (memset->len > 0){
   \                     ??MEM_memset_0:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   603B         JZ        ??MEM_memset_1
     19              *memset->dst = memset->val;
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C0E0         PUSH      A
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
     20              memset->dst++;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2401         ADD       A,#0x1
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   3400         ADDC      A,#0x0
   \   000032   F9           MOV       R1,A
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   E8           MOV       A,R0
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   E9           MOV       A,R1
   \   00003B   F0           MOVX      @DPTR,A
     21              memset->len--;
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   24FF         ADD       A,#-0x1
   \   000045   F0           MOVX      @DPTR,A
   \   000046   80BC         SJMP      ??MEM_memset_0
     22            }  
     23          };
   \                     ??MEM_memset_1:
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET
     24          
     25          
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\model.c
      1          #include "model.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          MODEL_s MODEL;
   \                     MODEL:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
      9          
     10          static void HW_Init(void);  
     11          static void SW_Init(void); 
     12          static void Sleep(void); 
     13          static void Wakeup(void); 
     14          static void Cold_Start(void); 
     15          static void Hot_Start(void); 
     16          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          module_s MD_MODULE = {ALIAS(HW_Init),ALIAS(SW_Init),ALIAS(Sleep),
   \                     MD_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for MD_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     18            ALIAS(Wakeup),ALIAS(Cold_Start), ALIAS(Hot_Start)};
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          static void HW_Init(void){};  
   \                     ??HW_Init_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     21          static void SW_Init(void){}; 
   \                     ??SW_Init_3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     22          static void Sleep(void){}; 
   \                     ??Sleep:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          static void Wakeup(void){}; 
   \                     ??Wakeup:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          static void Cold_Start(void){}; 
   \                     ??Cold_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     25          static void Hot_Start(void){};
   \                     ??Hot_Start:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     26          
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\rtc.c
      1          #include "action_manager.h"
      2          
      3          /**
      4          @file
      5          */
      6           
      7          static void SW_Init(void); 
      8          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          module_s RTC_MODULE = {ALIAS(SW_Init)};
   \                     RTC_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for RTC_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     10           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static void SW_Init(void){}; 
   \                     ??SW_Init_4:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
E:\WMNU\IAR_new_arch\STACK_CORE_SRC\time_manager.c
      1          #include "time_manager.h"
      2          #include "model.h"
      3          #include "action_manager.h"
      4          #include "debug.h"
      5          #include "action_manager.h"
      6          
      7          
      8          /**
      9          @file
     10          */
     11          
     12          #define MAX_TIME_SLOTS 50
     13          
     14          #define ACTIVE_INTERVAL (nwtime_t)327 // 9.979 мс
     15          #define SLEEP_INTERVAL (nwtime_t)327  // 9.979 мс
     16          #define UNACCOUNTED 68 // Остаток времени после 50ого интервала.
     17          #define FULL_INTERVAL (ACTIVE_INTERVAL + SLEEP_INTERVAL)
     18          #define SLOT_TO_NWTIME(slot) ((nwtime_t)(slot * FULL_INTERVAL))
     19          
     20          static void SW_Init(void); 
     21          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     22          module_s TM_MODULE = {ALIAS(SW_Init)};
   \                     TM_MODULE:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for TM_MODULE>`
   \   00000C                REQUIRE __INIT_XDATA_I
     23           
     24          //!< Список задач менеджера. Индекс - номер слота, значение-действие

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     25          static alarm_t ALARMS[MAX_TIME_SLOTS];
   \                     ??ALARMS:
   \   000000                DS 50
   \   000032                REQUIRE __INIT_XDATA_Z
     26          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          static void SW_Init(void){}; 
   \                     ??SW_Init_5:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP      ?BRET
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void TM_SetAlarm(timeslot_t slot, alarm_t alarm){
   \                     TM_SetAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     30            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4037         JC        ??TM_SetAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75....       MOV       ?V0,#??__FUNCTION___12 & 0xff
   \   000012   75....       MOV       ?V1,#(??__FUNCTION___12 >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75..1E       MOV       ?V0,#0x1e
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   000028   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   000034   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   7A..         MOV       R2,#`?<Constant "\\"slot < MAX_TIME_SLOT...">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "\\"slot < MAX_TIME_SLOT...">` >> 8) & 0xff
   \   000040   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000043                ; Setup parameters for call to function DBG_CORE_HALT
   \   000043   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     31            ALARMS[slot] |= alarm;
   \                     ??TM_SetAlarm_0:
   \   000046   EE           MOV       A,R6
   \   000047   F8           MOV       R0,A
   \   000048   7900         MOV       R1,#0x0
   \   00004A   74..         MOV       A,#??ALARMS & 0xff
   \   00004C   28           ADD       A,R0
   \   00004D   F582         MOV       DPL,A
   \   00004F   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   000051   39           ADDC      A,R1
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   4F           ORL       A,R7
   \   000056   F0           MOVX      @DPTR,A
     32          }
   \   000057   7F02         MOV       R7,#0x2
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
     33          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void TM_ClrAlarm(timeslot_t slot, alarm_t alarm){
   \                     TM_ClrAlarm:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
     35            ASSERT(slot < MAX_TIME_SLOTS);
   \   000009   EE           MOV       A,R6
   \   00000A   C3           CLR       C
   \   00000B   9432         SUBB      A,#0x32
   \   00000D   4037         JC        ??TM_ClrAlarm_0
   \   00000F                ; Setup parameters for call to function printf
   \   00000F   75....       MOV       ?V0,#??__FUNCTION___13 & 0xff
   \   000012   75....       MOV       ?V1,#(??__FUNCTION___13 >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   75..23       MOV       ?V0,#0x23
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   75....       MOV       ?V0,#`?<Constant "time_manager.c">` & 0xff
   \   000028   75....       MOV       ?V1,#(`?<Constant "time_manager.c">` >> 8) & 0xff
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_4` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_4` >> 8) & 0xff
   \   000034   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   7A..         MOV       R2,#`?<Constant "\\"slot < MAX_TIME_SLOT...">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "\\"slot < MAX_TIME_SLOT...">` >> 8) & 0xff
   \   000040   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000043                ; Setup parameters for call to function DBG_CORE_HALT
   \   000043   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     36            ALARMS[slot] &= (~alarm);
   \                     ??TM_ClrAlarm_0:
   \   000046   EF           MOV       A,R7
   \   000047   F4           CPL       A
   \   000048   FA           MOV       R2,A
   \   000049   EE           MOV       A,R6
   \   00004A   F8           MOV       R0,A
   \   00004B   7900         MOV       R1,#0x0
   \   00004D   74..         MOV       A,#??ALARMS & 0xff
   \   00004F   28           ADD       A,R0
   \   000050   F582         MOV       DPL,A
   \   000052   74..         MOV       A,#(??ALARMS >> 8) & 0xff
   \   000054   39           ADDC      A,R1
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   5A           ANL       A,R2
   \   000059   F0           MOVX      @DPTR,A
     37          }
   \   00005A   7F02         MOV       R7,#0x2
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
     38          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     39          void TM_AdjustTime(nwtime_t time){
   \                     TM_AdjustTime:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     40            
     41          }
   \   000000   02....       LJMP      ?BRET
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void TM_IRQ(nwtime_t time){
   \                     TM_IRQ:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     44            LOG_OFF("ALARM! %d", time);
     45            AM_Hot_start();
   \   000009                ; Setup parameters for call to function AM_Hot_start
   \   000009   12....       LCALL     `??AM_Hot_start::?relay`; Banked call to: AM_Hot_start
     46          }
   \   00000C   7F01         MOV       R7,#0x1
   \   00000E   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\WMNU\IAR_new_arch\PRJ Test\u_alarm_timer.c
      1          #include "debug.h"
      2          #include "alarm_timer.h"
      3          #include "cpu.h"
      4          
      5          // тестирование вставками. Теперь переопределить функции нельзя
      6          // void TM_IRQ(nwtime_t time) теперь вручную мониторить

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      7          void u_alarm_timer(void){
   \                     u_alarm_timer:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
      8            nwtime_t alarm = 500;
   \   000005   7EF4         MOV       R6,#-0xc
   \   000007   7F01         MOV       R7,#0x1
      9            INTERRUPT_ENABLE();
   \   000009   D2AF         SETB      0xa8.7
     10            AT_set_alarm(alarm);
   \   00000B                ; Setup parameters for call to function AT_set_alarm
   \   00000B   EE           MOV       A,R6
   \   00000C   FA           MOV       R2,A
   \   00000D   EF           MOV       A,R7
   \   00000E   FB           MOV       R3,A
   \   00000F   12....       LCALL     `??AT_set_alarm::?relay`; Banked call to: AT_set_alarm
     11            while(1);
   \                     ??u_alarm_timer_0:
   \   000012   80FE         SJMP      ??u_alarm_timer_0
   \   000014                REQUIRE _A_IEN0
     12          }
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_buffer.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          
      4          static int test1(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      5          struct test_unit UT_BF_1 = {.name = "BF:push", .fun = test1};
   \                     UT_BF_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_BF_1>`
   \   000022                REQUIRE __INIT_XDATA_I
      6          
      7          #include "buffer.h"
      8          #include "frame.h"
      9          
     10          //bool BF_next_tx(struct frame* frame);
     11          //bool BF_remove_tx(struct frame *frame);
     12          //bool BF_remove_rx(struct frame *frame);
     13          //bool BF_push_rx(struct frame *frame);
     14          //bool BF_push_tx(struct frame *frame);
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          static int test1(void){
   \                     ??test1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
     17            int test_res = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
     18            struct frame *fr = FR_create();
   \   000009                ; Setup parameters for call to function FR_create
   \   000009   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   85....       MOV       ?V2,?V0
   \   000013   85....       MOV       ?V3,?V1
     19            
     20            if (!BF_push_tx(fr))
   \   000016                ; Setup parameters for call to function BF_push_tx
   \   000016   AA..         MOV       R2,?V2
   \   000018   AB..         MOV       R3,?V3
   \   00001A   12....       LCALL     `??BF_push_tx::?relay`; Banked call to: BF_push_tx
   \   00001D   4004         JC        ??test1_3
     21              test_res = 1;
   \   00001F   7E01         MOV       R6,#0x1
   \   000021   7F00         MOV       R7,#0x0
     22          
     23            if (!BF_push_rx(fr))
   \                     ??test1_3:
   \   000023                ; Setup parameters for call to function BF_push_rx
   \   000023   AA..         MOV       R2,?V2
   \   000025   AB..         MOV       R3,?V3
   \   000027   12....       LCALL     `??BF_push_rx::?relay`; Banked call to: BF_push_rx
   \   00002A   4004         JC        ??test1_4
     24              test_res = 2;
   \   00002C   7E02         MOV       R6,#0x2
   \   00002E   7F00         MOV       R7,#0x0
     25            
     26            // Должен извлечся тот же самый фрейм
     27            struct frame *pop_fr = NULL;
   \                     ??test1_4:
   \   000030   75..00       MOV       ?V0,#0x0
   \   000033   75..00       MOV       ?V1,#0x0
     28            pop_fr = BF_next_tx(pop_fr);
   \   000036                ; Setup parameters for call to function BF_next_tx
   \   000036   AA..         MOV       R2,?V0
   \   000038   AB..         MOV       R3,?V1
   \   00003A   12....       LCALL     `??BF_next_tx::?relay`; Banked call to: BF_next_tx
   \   00003D   8A..         MOV       ?V4,R2
   \   00003F   8B..         MOV       ?V5,R3
   \   000041   85....       MOV       ?V0,?V4
   \   000044   85....       MOV       ?V1,?V5
     29            if (!pop_fr)
   \   000047   E5..         MOV       A,?V0
   \   000049   45..         ORL       A,?V1
   \   00004B   7004         JNZ       ??test1_5
     30              test_res = 3;
   \   00004D   7E03         MOV       R6,#0x3
   \   00004F   7F00         MOV       R7,#0x0
     31              
     32            if (pop_fr != fr)
   \                     ??test1_5:
   \   000051   E5..         MOV       A,?V2
   \   000053   65..         XRL       A,?V0
   \   000055   7004         JNZ       ??test1_6
   \   000057   E5..         MOV       A,?V3
   \   000059   65..         XRL       A,?V1
   \                     ??test1_6:
   \   00005B   6004         JZ        ??test1_7
     33              test_res = 4;
   \   00005D   7E04         MOV       R6,#0x4
   \   00005F   7F00         MOV       R7,#0x0
     34            
     35            if (!BF_remove_tx(fr))
   \                     ??test1_7:
   \   000061                ; Setup parameters for call to function BF_remove_tx
   \   000061   AA..         MOV       R2,?V2
   \   000063   AB..         MOV       R3,?V3
   \   000065   12....       LCALL     `??BF_remove_tx::?relay`; Banked call to: BF_remove_tx
   \   000068   4004         JC        ??test1_8
     36              test_res = 5;
   \   00006A   7E05         MOV       R6,#0x5
   \   00006C   7F00         MOV       R7,#0x0
     37            
     38            // ничего не должно извлечся
     39            pop_fr = NULL;
   \                     ??test1_8:
   \   00006E   75..00       MOV       ?V0,#0x0
   \   000071   75..00       MOV       ?V1,#0x0
     40            pop_fr = BF_next_tx(pop_fr);
   \   000074                ; Setup parameters for call to function BF_next_tx
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   12....       LCALL     `??BF_next_tx::?relay`; Banked call to: BF_next_tx
   \   00007B   8A..         MOV       ?V4,R2
   \   00007D   8B..         MOV       ?V5,R3
   \   00007F   85....       MOV       ?V0,?V4
   \   000082   85....       MOV       ?V1,?V5
     41            if (pop_fr)
   \   000085   E5..         MOV       A,?V0
   \   000087   45..         ORL       A,?V1
   \   000089   6004         JZ        ??test1_9
     42              test_res = 6;
   \   00008B   7E06         MOV       R6,#0x6
   \   00008D   7F00         MOV       R7,#0x0
     43            
     44          //  // Должен извлечся тот же самый фрейм
     45          //  pop_fr = NULL;
     46          //  if (!BF_next_rx(pop_fr))
     47          //    test_res = 6;
     48          //  
     49          //  if (pop_fr != fr)
     50          //    test_res = 7;
     51          //  
     52          //  // ничего не должно извлечся
     53          //  pop_fr = NULL;
     54          //  if (BF_next_rx(pop_fr))
     55          //    test_res = 8;
     56            
     57            return test_res;
   \                     ??test1_9:
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   7F06         MOV       R7,#0x6
   \   000095   02....       LJMP      ?BANKED_LEAVE_XDATA
     58          }
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_debug.c
      1          #include "utest.h"
      2          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      3          struct test_unit UTEST_DEBUG = {.name = "DEBUG MODUL"};
   \                     UTEST_DEBUG:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UTEST_DEBUG>`
   \   000022                REQUIRE __INIT_XDATA_I
      4          
      5          static void u_test(void){
      6          
      7          }
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_frame.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          #include "stdbool.h"
      4          
      5          static int test1(void);
      6          static int test2(void);
      7          static int test3(void);

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          struct test_unit UT_FR_1 = {.name = "FR:create-delete", .fun = test1};
   \                     UT_FR_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          struct test_unit UT_FR_2 = {.name = "FR:create-full", .fun = test2};
   \                     UT_FR_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_2>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          struct test_unit UT_FR_3 = {.name = "FR:header manipulation", .fun = test3};
   \                     UT_FR_3:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_FR_3>`
   \   000022                REQUIRE __INIT_XDATA_I
     11          #include "frame.h"
     12          
     13          //struct frame* FR_create();
     14          //void FR_delete(struct frame*);
     15          //void FR_add_header(struct frame*, void *head, char len);
     16          //void FR_del_header(struct frame*, char len);
     17          //int FR_busy();
     18          //int FR_available();
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          static bool ch_cmp(void *dst, void *src, size_t len){
   \                     ??ch_cmp:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV       A,#0x9
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
     21            while (len-- > 0){
   \                     ??ch_cmp_1:
   \   00000F   E8           MOV       A,R0
   \   000010   FE           MOV       R6,A
   \   000011   E9           MOV       A,R1
   \   000012   FF           MOV       R7,A
   \   000013   EE           MOV       A,R6
   \   000014   24FF         ADD       A,#-0x1
   \   000016   F8           MOV       R0,A
   \   000017   EF           MOV       A,R7
   \   000018   34FF         ADDC      A,#-0x1
   \   00001A   F9           MOV       R1,A
   \   00001B   EE           MOV       A,R6
   \   00001C   4F           ORL       A,R7
   \   00001D   6011         JZ        ??ch_cmp_2
     22              if ( *(char*)dst != *(char*)src)
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6E           XRL       A,R6
   \   00002B   60E2         JZ        ??ch_cmp_1
     23                return false;
   \   00002D   C3           CLR       C
   \   00002E   8001         SJMP      ??ch_cmp_3
     24            }
     25            return true;
   \                     ??ch_cmp_2:
   \   000030   D3           SETB      C
   \                     ??ch_cmp_3:
   \   000031   7F01         MOV       R7,#0x1
   \   000033   02....       LJMP      ?BANKED_LEAVE_XDATA
     26          }
     27          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     28          static bool ch_cmp_val(void *dst, char val, size_t len){
   \                     ??ch_cmp_val:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     29            while (len-- > 0){
   \                     ??ch_cmp_val_1:
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   \   000009   EE           MOV       A,R6
   \   00000A   24FF         ADD       A,#-0x1
   \   00000C   FC           MOV       R4,A
   \   00000D   EF           MOV       A,R7
   \   00000E   34FF         ADDC      A,#-0x1
   \   000010   FD           MOV       R5,A
   \   000011   EE           MOV       A,R6
   \   000012   4F           ORL       A,R7
   \   000013   600B         JZ        ??ch_cmp_val_2
     30              if ( *(char*)dst != val)
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   69           XRL       A,R1
   \   00001B   60E8         JZ        ??ch_cmp_val_1
     31                return false;
   \   00001D   C3           CLR       C
   \   00001E   8001         SJMP      ??ch_cmp_val_3
     32            }
     33            return true;
   \                     ??ch_cmp_val_2:
   \   000020   D3           SETB      C
   \                     ??ch_cmp_val_3:
   \   000021   7F01         MOV       R7,#0x1
   \   000023   02....       LJMP      ?BANKED_LEAVE_XDATA
     34          }
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          static int test3(void){
   \                     ??test3:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     37            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     38            struct frame *fr = FR_create();
   \   00000E                ; Setup parameters for call to function FR_create
   \   00000E   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000011   8A..         MOV       ?V2,R2
   \   000013   8B..         MOV       ?V3,R3
   \   000015   85....       MOV       ?V0,?V2
   \   000018   85....       MOV       ?V1,?V3
     39            char hdr[10] = {1,2,3,4,5,6,7,8,9,10};
   \   00001B   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   740A         MOV       A,#0xa
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     40            FR_add_header(fr, hdr, sizeof(hdr));
   \   000027                ; Setup parameters for call to function FR_add_header
   \   000027   790A         MOV       R1,#0xa
   \   000029   AC..         MOV       R4,?XSP + 0
   \   00002B   AD..         MOV       R5,?XSP + 1
   \   00002D   AA..         MOV       R2,?V0
   \   00002F   AB..         MOV       R3,?V1
   \   000031   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
     41            if (!ch_cmp(hdr, fr->payload, sizeof(hdr)))
   \   000034                ; Setup parameters for call to function ch_cmp
   \   000034   75..0A       MOV       ?V2,#0xa
   \   000037   75..00       MOV       ?V3,#0x0
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   E5..         MOV       A,?V0
   \   000041   2415         ADD       A,#0x15
   \   000043   FC           MOV       R4,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V1
   \   000047   FD           MOV       R5,A
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?XSTACK_DISP101_8
   \   00004D   12....       LCALL     `??ch_cmp::?relay`; Banked call to: ch_cmp
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   4004         JC        ??test3_2
     42                test_res = 1;
   \   000057   7E01         MOV       R6,#0x1
   \   000059   7F00         MOV       R7,#0x0
     43            
     44            if (fr->len != sizeof(hdr))
   \                     ??test3_2:
   \   00005B   85..82       MOV       DPL,?V0
   \   00005E   85..83       MOV       DPH,?V1
   \   000061   E0           MOVX      A,@DPTR
   \   000062   640A         XRL       A,#0xa
   \   000064   6004         JZ        ??test3_3
     45                test_res = 2;
   \   000066   7E02         MOV       R6,#0x2
   \   000068   7F00         MOV       R7,#0x0
     46            
     47            FR_del_header(fr, 5);
   \                     ??test3_3:
   \   00006A                ; Setup parameters for call to function FR_del_header
   \   00006A   7905         MOV       R1,#0x5
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   AB..         MOV       R3,?V1
   \   000070   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
     48            if (!ch_cmp(&hdr[5], fr->payload, sizeof(hdr) - 5))
   \   000073                ; Setup parameters for call to function ch_cmp
   \   000073   75..05       MOV       ?V2,#0x5
   \   000076   75..00       MOV       ?V3,#0x0
   \   000079   78..         MOV       R0,#?V2
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   E5..         MOV       A,?V0
   \   000080   2415         ADD       A,#0x15
   \   000082   FC           MOV       R4,A
   \   000083   E4           CLR       A
   \   000084   35..         ADDC      A,?V1
   \   000086   FD           MOV       R5,A
   \   000087   7407         MOV       A,#0x7
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   AA82         MOV       R2,DPL
   \   00008E   AB83         MOV       R3,DPH
   \   000090   12....       LCALL     `??ch_cmp::?relay`; Banked call to: ch_cmp
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   4004         JC        ??test3_4
     49                test_res = 3;  
   \   00009A   7E03         MOV       R6,#0x3
   \   00009C   7F00         MOV       R7,#0x0
     50            
     51            if (fr->len != sizeof(hdr) - 5)
   \                     ??test3_4:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   6405         XRL       A,#0x5
   \   0000A7   6004         JZ        ??test3_5
     52              test_res = 4;
   \   0000A9   7E04         MOV       R6,#0x4
   \   0000AB   7F00         MOV       R7,#0x0
     53            
     54            if (!ch_cmp_val(&fr->payload[5], 0, MAX_PAYLOAD_SIZE - 5))
   \                     ??test3_5:
   \   0000AD                ; Setup parameters for call to function ch_cmp_val
   \   0000AD   7C7A         MOV       R4,#0x7a
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   7900         MOV       R1,#0x0
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   241A         ADD       A,#0x1a
   \   0000B7   FA           MOV       R2,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   FB           MOV       R3,A
   \   0000BC   12....       LCALL     `??ch_cmp_val::?relay`; Banked call to: ch_cmp_val
   \   0000BF   4004         JC        ??test3_6
     55              test_res = 5;  
   \   0000C1   7E05         MOV       R6,#0x5
   \   0000C3   7F00         MOV       R7,#0x0
     56            
     57            FR_del_header(fr, 5);
   \                     ??test3_6:
   \   0000C5                ; Setup parameters for call to function FR_del_header
   \   0000C5   7905         MOV       R1,#0x5
   \   0000C7   AA..         MOV       R2,?V0
   \   0000C9   AB..         MOV       R3,?V1
   \   0000CB   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
     58            if (!ch_cmp_val(&fr->payload, 0, MAX_PAYLOAD_SIZE))
   \   0000CE                ; Setup parameters for call to function ch_cmp_val
   \   0000CE   7C7F         MOV       R4,#0x7f
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   7900         MOV       R1,#0x0
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   2415         ADD       A,#0x15
   \   0000D8   FA           MOV       R2,A
   \   0000D9   E4           CLR       A
   \   0000DA   35..         ADDC      A,?V1
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??ch_cmp_val::?relay`; Banked call to: ch_cmp_val
   \   0000E0   4004         JC        ??test3_7
     59              test_res = 6; 
   \   0000E2   7E06         MOV       R6,#0x6
   \   0000E4   7F00         MOV       R7,#0x0
     60            
     61            if (fr->len != 0)
   \                     ??test3_7:
   \   0000E6   85..82       MOV       DPL,?V0
   \   0000E9   85..83       MOV       DPH,?V1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   6004         JZ        ??test3_8
     62                test_res = 7;
   \   0000EF   7E07         MOV       R6,#0x7
   \   0000F1   7F00         MOV       R7,#0x0
     63            
     64            if (FR_add_header(fr, hdr, 200))
   \                     ??test3_8:
   \   0000F3                ; Setup parameters for call to function FR_add_header
   \   0000F3   79C8         MOV       R1,#-0x38
   \   0000F5   AC..         MOV       R4,?XSP + 0
   \   0000F7   AD..         MOV       R5,?XSP + 1
   \   0000F9   AA..         MOV       R2,?V0
   \   0000FB   AB..         MOV       R3,?V1
   \   0000FD   12....       LCALL     `??FR_add_header::?relay`; Banked call to: FR_add_header
   \   000100   5004         JNC       ??test3_9
     65              test_res = 8;
   \   000102   7E08         MOV       R6,#0x8
   \   000104   7F00         MOV       R7,#0x0
     66           
     67            if (FR_del_header(fr, 200))
   \                     ??test3_9:
   \   000106                ; Setup parameters for call to function FR_del_header
   \   000106   79C8         MOV       R1,#-0x38
   \   000108   AA..         MOV       R2,?V0
   \   00010A   AB..         MOV       R3,?V1
   \   00010C   12....       LCALL     `??FR_del_header::?relay`; Banked call to: FR_del_header
   \   00010F   5004         JNC       ??test3_10
     68              test_res = 9;
   \   000111   7E09         MOV       R6,#0x9
   \   000113   7F00         MOV       R7,#0x0
     69            return test_res;
   \                     ??test3_10:
   \   000115   EE           MOV       A,R6
   \   000116   FA           MOV       R2,A
   \   000117   EF           MOV       A,R7
   \   000118   FB           MOV       R3,A
   \   000119   740A         MOV       A,#0xa
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011E   7F04         MOV       R7,#0x4
   \   000120   02....       LJMP      ?BANKED_LEAVE_XDATA
     70          }
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          static int test2(void){
   \                     ??test2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     73            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     74            struct frame* all[20];
     75            
     76            for (int i = 0; i < 20; i++)
   \   00000E   75..00       MOV       ?V0,#0x0
   \   000011   75..00       MOV       ?V1,#0x0
   \                     ??test2_2:
   \   000014   C3           CLR       C
   \   000015   E5..         MOV       A,?V0
   \   000017   9414         SUBB      A,#0x14
   \   000019   E5..         MOV       A,?V1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   503B         JNC       ??test2_3
     77              all[i] = FR_create();
   \   000024                ; Setup parameters for call to function FR_create
   \   000024   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000027   A8..         MOV       R0,?V0
   \   000029   A9..         MOV       R1,?V1
   \   00002B   E8           MOV       A,R0
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   ACF0         MOV       R4,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   75F002       MOV       B,#0x2
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2C           ADD       A,R4
   \   00003F   F9           MOV       R1,A
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E582         MOV       A,DPL
   \   000048   28           ADD       A,R0
   \   000049   F582         MOV       DPL,A
   \   00004B   E583         MOV       A,DPH
   \   00004D   39           ADDC      A,R1
   \   00004E   F583         MOV       DPH,A
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   F0           MOVX      @DPTR,A
   \   000055   05..         INC       ?V0
   \   000057   E5..         MOV       A,?V0
   \   000059   70B9         JNZ       ??test2_2
   \   00005B   05..         INC       ?V1
   \   00005D   80B5         SJMP      ??test2_2
     78          
     79          // Нету NULL  
     80            for(int i = 0; i < 20; i++)
   \                     ??test2_3:
   \   00005F   7800         MOV       R0,#0x0
   \   000061   7900         MOV       R1,#0x0
   \                     ??test2_4:
   \   000063   C3           CLR       C
   \   000064   E8           MOV       A,R0
   \   000065   9414         SUBB      A,#0x14
   \   000067   E9           MOV       A,R1
   \   000068   9400         SUBB      A,#0x0
   \   00006A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006C   65D0         XRL       A,PSW
   \   00006E   33           RLC       A
   \   00006F   503D         JNC       ??test2_5
     81              if (all[i] == NULL)
   \   000071   E8           MOV       A,R0
   \   000072   FA           MOV       R2,A
   \   000073   E9           MOV       A,R1
   \   000074   FB           MOV       R3,A
   \   000075   EA           MOV       A,R2
   \   000076   75F002       MOV       B,#0x2
   \   000079   A4           MUL       AB
   \   00007A   CA           XCH       A,R2
   \   00007B   ACF0         MOV       R4,B
   \   00007D   75F000       MOV       B,#0x0
   \   000080   A4           MUL       AB
   \   000081   2C           ADD       A,R4
   \   000082   FC           MOV       R4,A
   \   000083   75F002       MOV       B,#0x2
   \   000086   EB           MOV       A,R3
   \   000087   A4           MUL       AB
   \   000088   2C           ADD       A,R4
   \   000089   FB           MOV       R3,A
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E582         MOV       A,DPL
   \   000092   2A           ADD       A,R2
   \   000093   F582         MOV       DPL,A
   \   000095   E583         MOV       A,DPH
   \   000097   3B           ADDC      A,R3
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FA           MOV       R2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   FB           MOV       R3,A
   \   00009F   EA           MOV       A,R2
   \   0000A0   4B           ORL       A,R3
   \   0000A1   7004         JNZ       ??test2_6
     82                test_res = 1;
   \   0000A3   7E01         MOV       R6,#0x1
   \   0000A5   7F00         MOV       R7,#0x0
   \                     ??test2_6:
   \   0000A7   08           INC       R0
   \   0000A8   E8           MOV       A,R0
   \   0000A9   70B8         JNZ       ??test2_4
   \   0000AB   09           INC       R1
   \   0000AC   80B5         SJMP      ??test2_4
     83          
     84          // Все слоты должны быть разные 
     85            for(int i = 1; i < 20; i++)
   \                     ??test2_5:
   \   0000AE   7801         MOV       R0,#0x1
   \   0000B0   7900         MOV       R1,#0x0
   \                     ??test2_7:
   \   0000B2   C3           CLR       C
   \   0000B3   E8           MOV       A,R0
   \   0000B4   9414         SUBB      A,#0x14
   \   0000B6   E9           MOV       A,R1
   \   0000B7   9400         SUBB      A,#0x0
   \   0000B9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000BB   65D0         XRL       A,PSW
   \   0000BD   33           RLC       A
   \   0000BE   5078         JNC       ??test2_8
     86              if (all[i] == all[i - 1])
   \   0000C0   E8           MOV       A,R0
   \   0000C1   FA           MOV       R2,A
   \   0000C2   E9           MOV       A,R1
   \   0000C3   FB           MOV       R3,A
   \   0000C4   EA           MOV       A,R2
   \   0000C5   75F002       MOV       B,#0x2
   \   0000C8   A4           MUL       AB
   \   0000C9   CA           XCH       A,R2
   \   0000CA   ACF0         MOV       R4,B
   \   0000CC   75F000       MOV       B,#0x0
   \   0000CF   A4           MUL       AB
   \   0000D0   2C           ADD       A,R4
   \   0000D1   FC           MOV       R4,A
   \   0000D2   75F002       MOV       B,#0x2
   \   0000D5   EB           MOV       A,R3
   \   0000D6   A4           MUL       AB
   \   0000D7   2C           ADD       A,R4
   \   0000D8   FB           MOV       R3,A
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   E582         MOV       A,DPL
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E583         MOV       A,DPH
   \   0000E6   3B           ADDC      A,R3
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   FC           MOV       R4,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FD           MOV       R5,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E9           MOV       A,R1
   \   0000F1   FB           MOV       R3,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   75F002       MOV       B,#0x2
   \   0000F6   A4           MUL       AB
   \   0000F7   CA           XCH       A,R2
   \   0000F8   85F0..       MOV       ?V0,B
   \   0000FB   75F000       MOV       B,#0x0
   \   0000FE   A4           MUL       AB
   \   0000FF   25..         ADD       A,?V0
   \   000101   F5..         MOV       ?V0,A
   \   000103   75F002       MOV       B,#0x2
   \   000106   EB           MOV       A,R3
   \   000107   A4           MUL       AB
   \   000108   25..         ADD       A,?V0
   \   00010A   FB           MOV       R3,A
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   E582         MOV       A,DPL
   \   000113   2A           ADD       A,R2
   \   000114   FA           MOV       R2,A
   \   000115   E583         MOV       A,DPH
   \   000117   3B           ADDC      A,R3
   \   000118   FB           MOV       R3,A
   \   000119   EA           MOV       A,R2
   \   00011A   24FE         ADD       A,#-0x2
   \   00011C   F582         MOV       DPL,A
   \   00011E   EB           MOV       A,R3
   \   00011F   34FF         ADDC      A,#-0x1
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6C           XRL       A,R4
   \   000125   7003         JNZ       ??test2_9
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6D           XRL       A,R5
   \                     ??test2_9:
   \   00012A   7004         JNZ       ??test2_10
     87                test_res = 2;   
   \   00012C   7E02         MOV       R6,#0x2
   \   00012E   7F00         MOV       R7,#0x0
   \                     ??test2_10:
   \   000130   08           INC       R0
   \   000131   E8           MOV       A,R0
   \   000132   7001         JNZ       ??test2_11
   \   000134   09           INC       R1
   \                     ??test2_11:
   \   000135   02....       LJMP      ??test2_7 & 0xFFFF
     88            
     89            if (FR_busy() != 20)
   \                     ??test2_8:
   \   000138                ; Setup parameters for call to function FR_busy
   \   000138   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00013B   8A..         MOV       ?V0,R2
   \   00013D   8B..         MOV       ?V1,R3
   \   00013F   7414         MOV       A,#0x14
   \   000141   65..         XRL       A,?V0
   \   000143   7004         JNZ       ??test2_12
   \   000145   7400         MOV       A,#0x0
   \   000147   65..         XRL       A,?V1
   \                     ??test2_12:
   \   000149   6004         JZ        ??test2_13
     90              test_res = 3;
   \   00014B   7E03         MOV       R6,#0x3
   \   00014D   7F00         MOV       R7,#0x0
     91            
     92            if (FR_available() != 0)
   \                     ??test2_13:
   \   00014F                ; Setup parameters for call to function FR_available
   \   00014F   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000152   8A..         MOV       ?V0,R2
   \   000154   8B..         MOV       ?V1,R3
   \   000156   E5..         MOV       A,?V0
   \   000158   45..         ORL       A,?V1
   \   00015A   6004         JZ        ??test2_14
     93              test_res = 4;
   \   00015C   7E04         MOV       R6,#0x4
   \   00015E   7F00         MOV       R7,#0x0
     94           
     95            // Выделяемм еще один. он должен быть NULL
     96            struct frame* fr = FR_create();
   \                     ??test2_14:
   \   000160                ; Setup parameters for call to function FR_create
   \   000160   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000163   8A..         MOV       ?V0,R2
   \   000165   8B..         MOV       ?V1,R3
   \   000167   85....       MOV       ?V2,?V0
   \   00016A   85....       MOV       ?V3,?V1
     97            if (fr)
   \   00016D   E5..         MOV       A,?V2
   \   00016F   45..         ORL       A,?V3
   \   000171   6004         JZ        ??test2_15
     98              test_res = 5;
   \   000173   7E05         MOV       R6,#0x5
   \   000175   7F00         MOV       R7,#0x0
     99            
    100             if (FR_busy() != 20)
   \                     ??test2_15:
   \   000177                ; Setup parameters for call to function FR_busy
   \   000177   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00017A   8A..         MOV       ?V0,R2
   \   00017C   8B..         MOV       ?V1,R3
   \   00017E   7414         MOV       A,#0x14
   \   000180   65..         XRL       A,?V0
   \   000182   7004         JNZ       ??test2_16
   \   000184   7400         MOV       A,#0x0
   \   000186   65..         XRL       A,?V1
   \                     ??test2_16:
   \   000188   6004         JZ        ??test2_17
    101              test_res = 6;
   \   00018A   7E06         MOV       R6,#0x6
   \   00018C   7F00         MOV       R7,#0x0
    102            
    103            if (FR_available() != 0)
   \                     ??test2_17:
   \   00018E                ; Setup parameters for call to function FR_available
   \   00018E   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000191   8A..         MOV       ?V0,R2
   \   000193   8B..         MOV       ?V1,R3
   \   000195   E5..         MOV       A,?V0
   \   000197   45..         ORL       A,?V1
   \   000199   6004         JZ        ??test2_18
    104              test_res = 7; 
   \   00019B   7E07         MOV       R6,#0x7
   \   00019D   7F00         MOV       R7,#0x0
    105            
    106          // Удаляем все что создали и контролим результат
    107            for (int i = 0; i < 20; i++)
   \                     ??test2_18:
   \   00019F   75..00       MOV       ?V0,#0x0
   \   0001A2   75..00       MOV       ?V1,#0x0
   \                     ??test2_19:
   \   0001A5   C3           CLR       C
   \   0001A6   E5..         MOV       A,?V0
   \   0001A8   9414         SUBB      A,#0x14
   \   0001AA   E5..         MOV       A,?V1
   \   0001AC   9400         SUBB      A,#0x0
   \   0001AE   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B0   65D0         XRL       A,PSW
   \   0001B2   33           RLC       A
   \   0001B3   5041         JNC       ??test2_20
    108              if (!FR_delete(all[i]))
   \   0001B5                ; Setup parameters for call to function FR_delete
   \   0001B5   A8..         MOV       R0,?V0
   \   0001B7   A9..         MOV       R1,?V1
   \   0001B9   E8           MOV       A,R0
   \   0001BA   75F002       MOV       B,#0x2
   \   0001BD   A4           MUL       AB
   \   0001BE   C8           XCH       A,R0
   \   0001BF   AAF0         MOV       R2,B
   \   0001C1   75F000       MOV       B,#0x0
   \   0001C4   A4           MUL       AB
   \   0001C5   2A           ADD       A,R2
   \   0001C6   FA           MOV       R2,A
   \   0001C7   75F002       MOV       B,#0x2
   \   0001CA   E9           MOV       A,R1
   \   0001CB   A4           MUL       AB
   \   0001CC   2A           ADD       A,R2
   \   0001CD   F9           MOV       R1,A
   \   0001CE   85..82       MOV       DPL,?XSP + 0
   \   0001D1   85..83       MOV       DPH,?XSP + 1
   \   0001D4   E582         MOV       A,DPL
   \   0001D6   28           ADD       A,R0
   \   0001D7   F582         MOV       DPL,A
   \   0001D9   E583         MOV       A,DPH
   \   0001DB   39           ADDC      A,R1
   \   0001DC   F583         MOV       DPH,A
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   FA           MOV       R2,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   FB           MOV       R3,A
   \   0001E3   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   0001E6   4004         JC        ??test2_21
    109                test_res = 8;   
   \   0001E8   7E08         MOV       R6,#0x8
   \   0001EA   7F00         MOV       R7,#0x0
   \                     ??test2_21:
   \   0001EC   05..         INC       ?V0
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   70B3         JNZ       ??test2_19
   \   0001F2   05..         INC       ?V1
   \   0001F4   80AF         SJMP      ??test2_19
    110          
    111             if (FR_busy() != 0)
   \                     ??test2_20:
   \   0001F6                ; Setup parameters for call to function FR_busy
   \   0001F6   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   0001F9   8A..         MOV       ?V0,R2
   \   0001FB   8B..         MOV       ?V1,R3
   \   0001FD   E5..         MOV       A,?V0
   \   0001FF   45..         ORL       A,?V1
   \   000201   6004         JZ        ??test2_22
    112              test_res = 9;
   \   000203   7E09         MOV       R6,#0x9
   \   000205   7F00         MOV       R7,#0x0
    113            
    114            if (FR_available() != 20)
   \                     ??test2_22:
   \   000207                ; Setup parameters for call to function FR_available
   \   000207   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   00020A   8A..         MOV       ?V0,R2
   \   00020C   8B..         MOV       ?V1,R3
   \   00020E   7414         MOV       A,#0x14
   \   000210   65..         XRL       A,?V0
   \   000212   7004         JNZ       ??test2_23
   \   000214   7400         MOV       A,#0x0
   \   000216   65..         XRL       A,?V1
   \                     ??test2_23:
   \   000218   6004         JZ        ??test2_24
    115              test_res = 10;  
   \   00021A   7E0A         MOV       R6,#0xa
   \   00021C   7F00         MOV       R7,#0x0
    116            
    117          // Еще разок пробуем все удалить 
    118            for (int i = 0; i < 20; i++)
   \                     ??test2_24:
   \   00021E   75..00       MOV       ?V0,#0x0
   \   000221   75..00       MOV       ?V1,#0x0
   \                     ??test2_25:
   \   000224   C3           CLR       C
   \   000225   E5..         MOV       A,?V0
   \   000227   9414         SUBB      A,#0x14
   \   000229   E5..         MOV       A,?V1
   \   00022B   9400         SUBB      A,#0x0
   \   00022D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00022F   65D0         XRL       A,PSW
   \   000231   33           RLC       A
   \   000232   5041         JNC       ??test2_26
    119              if (FR_delete(all[i]))
   \   000234                ; Setup parameters for call to function FR_delete
   \   000234   A8..         MOV       R0,?V0
   \   000236   A9..         MOV       R1,?V1
   \   000238   E8           MOV       A,R0
   \   000239   75F002       MOV       B,#0x2
   \   00023C   A4           MUL       AB
   \   00023D   C8           XCH       A,R0
   \   00023E   AAF0         MOV       R2,B
   \   000240   75F000       MOV       B,#0x0
   \   000243   A4           MUL       AB
   \   000244   2A           ADD       A,R2
   \   000245   FA           MOV       R2,A
   \   000246   75F002       MOV       B,#0x2
   \   000249   E9           MOV       A,R1
   \   00024A   A4           MUL       AB
   \   00024B   2A           ADD       A,R2
   \   00024C   F9           MOV       R1,A
   \   00024D   85..82       MOV       DPL,?XSP + 0
   \   000250   85..83       MOV       DPH,?XSP + 1
   \   000253   E582         MOV       A,DPL
   \   000255   28           ADD       A,R0
   \   000256   F582         MOV       DPL,A
   \   000258   E583         MOV       A,DPH
   \   00025A   39           ADDC      A,R1
   \   00025B   F583         MOV       DPH,A
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   FA           MOV       R2,A
   \   00025F   A3           INC       DPTR
   \   000260   E0           MOVX      A,@DPTR
   \   000261   FB           MOV       R3,A
   \   000262   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   000265   5004         JNC       ??test2_27
    120                test_res = 11; 
   \   000267   7E0B         MOV       R6,#0xb
   \   000269   7F00         MOV       R7,#0x0
   \                     ??test2_27:
   \   00026B   05..         INC       ?V0
   \   00026D   E5..         MOV       A,?V0
   \   00026F   70B3         JNZ       ??test2_25
   \   000271   05..         INC       ?V1
   \   000273   80AF         SJMP      ??test2_25
    121            
    122             if (FR_busy() != 0)
   \                     ??test2_26:
   \   000275                ; Setup parameters for call to function FR_busy
   \   000275   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   000278   8A..         MOV       ?V0,R2
   \   00027A   8B..         MOV       ?V1,R3
   \   00027C   E5..         MOV       A,?V0
   \   00027E   45..         ORL       A,?V1
   \   000280   6004         JZ        ??test2_28
    123              test_res = 12;
   \   000282   7E0C         MOV       R6,#0xc
   \   000284   7F00         MOV       R7,#0x0
    124            
    125            if (FR_available() != 20)
   \                     ??test2_28:
   \   000286                ; Setup parameters for call to function FR_available
   \   000286   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000289   8A..         MOV       ?V0,R2
   \   00028B   8B..         MOV       ?V1,R3
   \   00028D   7414         MOV       A,#0x14
   \   00028F   65..         XRL       A,?V0
   \   000291   7004         JNZ       ??test2_29
   \   000293   7400         MOV       A,#0x0
   \   000295   65..         XRL       A,?V1
   \                     ??test2_29:
   \   000297   6004         JZ        ??test2_30
    126              test_res = 13;
   \   000299   7E0D         MOV       R6,#0xd
   \   00029B   7F00         MOV       R7,#0x0
    127            
    128            return test_res;
   \                     ??test2_30:
   \   00029D   EE           MOV       A,R6
   \   00029E   FA           MOV       R2,A
   \   00029F   EF           MOV       A,R7
   \   0002A0   FB           MOV       R3,A
   \   0002A1   7428         MOV       A,#0x28
   \   0002A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A6   7F04         MOV       R7,#0x4
   \   0002A8   02....       LJMP      ?BANKED_LEAVE_XDATA
    129          }
    130          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          static int test1(void){
   \                     ??test1_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    132            int test_res = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    133            
    134            if (FR_busy() != 0)
   \   000009                ; Setup parameters for call to function FR_busy
   \   000009   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   6004         JZ        ??test1_10
    135              test_res = 1;
   \   000016   7E01         MOV       R6,#0x1
   \   000018   7F00         MOV       R7,#0x0
    136            
    137            if (FR_available() != 20)
   \                     ??test1_10:
   \   00001A                ; Setup parameters for call to function FR_available
   \   00001A   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   7414         MOV       A,#0x14
   \   000023   65..         XRL       A,?V0
   \   000025   7004         JNZ       ??test1_11
   \   000027   7400         MOV       A,#0x0
   \   000029   65..         XRL       A,?V1
   \                     ??test1_11:
   \   00002B   6004         JZ        ??test1_12
    138              test_res = 2;
   \   00002D   7E02         MOV       R6,#0x2
   \   00002F   7F00         MOV       R7,#0x0
    139            
    140            struct frame *fr = FR_create();
   \                     ??test1_12:
   \   000031                ; Setup parameters for call to function FR_create
   \   000031   12....       LCALL     `??FR_create::?relay`; Banked call to: FR_create
   \   000034   8A..         MOV       ?V2,R2
   \   000036   8B..         MOV       ?V3,R3
   \   000038   85....       MOV       ?V0,?V2
   \   00003B   85....       MOV       ?V1,?V3
    141            
    142            if (!fr)
   \   00003E   E5..         MOV       A,?V0
   \   000040   45..         ORL       A,?V1
   \   000042   7004         JNZ       ??test1_13
    143              test_res = 3;
   \   000044   7E03         MOV       R6,#0x3
   \   000046   7F00         MOV       R7,#0x0
    144            
    145            if (FR_busy() != 1)
   \                     ??test1_13:
   \   000048                ; Setup parameters for call to function FR_busy
   \   000048   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   00004B   8A..         MOV       ?V2,R2
   \   00004D   8B..         MOV       ?V3,R3
   \   00004F   7401         MOV       A,#0x1
   \   000051   65..         XRL       A,?V2
   \   000053   7004         JNZ       ??test1_14
   \   000055   7400         MOV       A,#0x0
   \   000057   65..         XRL       A,?V3
   \                     ??test1_14:
   \   000059   6004         JZ        ??test1_15
    146              test_res = 4;
   \   00005B   7E04         MOV       R6,#0x4
   \   00005D   7F00         MOV       R7,#0x0
    147            
    148            if (FR_available() != 19)
   \                     ??test1_15:
   \   00005F                ; Setup parameters for call to function FR_available
   \   00005F   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000062   8A..         MOV       ?V2,R2
   \   000064   8B..         MOV       ?V3,R3
   \   000066   7413         MOV       A,#0x13
   \   000068   65..         XRL       A,?V2
   \   00006A   7004         JNZ       ??test1_16
   \   00006C   7400         MOV       A,#0x0
   \   00006E   65..         XRL       A,?V3
   \                     ??test1_16:
   \   000070   6004         JZ        ??test1_17
    149              test_res = 5;  
   \   000072   7E05         MOV       R6,#0x5
   \   000074   7F00         MOV       R7,#0x0
    150            
    151            if (!FR_delete(fr))
   \                     ??test1_17:
   \   000076                ; Setup parameters for call to function FR_delete
   \   000076   AA..         MOV       R2,?V0
   \   000078   AB..         MOV       R3,?V1
   \   00007A   12....       LCALL     `??FR_delete::?relay`; Banked call to: FR_delete
   \   00007D   4004         JC        ??test1_18
    152              test_res = 6;
   \   00007F   7E06         MOV       R6,#0x6
   \   000081   7F00         MOV       R7,#0x0
    153            
    154            if (FR_busy() != 0)
   \                     ??test1_18:
   \   000083                ; Setup parameters for call to function FR_busy
   \   000083   12....       LCALL     `??FR_busy::?relay`; Banked call to: FR_busy
   \   000086   8A..         MOV       ?V2,R2
   \   000088   8B..         MOV       ?V3,R3
   \   00008A   E5..         MOV       A,?V2
   \   00008C   45..         ORL       A,?V3
   \   00008E   6004         JZ        ??test1_19
    155              test_res = 7;
   \   000090   7E07         MOV       R6,#0x7
   \   000092   7F00         MOV       R7,#0x0
    156            
    157            if (FR_available() != 20)
   \                     ??test1_19:
   \   000094                ; Setup parameters for call to function FR_available
   \   000094   12....       LCALL     `??FR_available::?relay`; Banked call to: FR_available
   \   000097   8A..         MOV       ?V2,R2
   \   000099   8B..         MOV       ?V3,R3
   \   00009B   7414         MOV       A,#0x14
   \   00009D   65..         XRL       A,?V2
   \   00009F   7004         JNZ       ??test1_20
   \   0000A1   7400         MOV       A,#0x0
   \   0000A3   65..         XRL       A,?V3
   \                     ??test1_20:
   \   0000A5   6004         JZ        ??test1_21
    158              test_res = 8;   
   \   0000A7   7E08         MOV       R6,#0x8
   \   0000A9   7F00         MOV       R7,#0x0
    159            
    160            return test_res;
   \                     ??test1_21:
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FA           MOV       R2,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FB           MOV       R3,A
   \   0000AF   7F04         MOV       R7,#0x4
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
    161          }
E:\WMNU\IAR_new_arch\PRJ Test\u_macros.c
      1          #include "debug.h"
      2          #include "stddef.h"
      3          #include "stdint.h"
      4          #include "macros.h"
      5          
      6          #define TIMEOUT_EXCP 1
      7          #define UNHANDLED_EXCP 2
      8          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      9          void u_macros(void){
   \                     u_macros:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 57
   \   000005   74C7         MOV       A,#-0x39
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     10            int test[] = {1};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
     11            
     12            struct abc{
     13            int a;
     14            int b;
     15            int c;
     16            };
     17            
     18            struct abc oleg;
     19            struct abc *y;
     20            
     21            int *c = &oleg.c;
   \   000016   7406         MOV       A,#0x6
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   8582..       MOV       ?V2,DPL
   \   00001E   8583..       MOV       ?V3,DPH
     22            y = container_of(c, struct abc, c);
   \   000021   E5..         MOV       A,?V2
   \   000023   24FC         ADD       A,#-0x4
   \   000025   F8           MOV       R0,A
   \   000026   E5..         MOV       A,?V3
   \   000028   34FF         ADDC      A,#-0x1
   \   00002A   F9           MOV       R1,A
   \   00002B   88..         MOV       ?V0,R0
   \   00002D   89..         MOV       ?V1,R1
     23            
     24            for_each_type(int, test, item){ 
   \   00002F   A8..         MOV       R0,?XSP + 0
   \   000031   A9..         MOV       R1,?XSP + 1
   \   000033   88..         MOV       ?V4,R0
   \   000035   89..         MOV       ?V5,R1
   \   000037   AE..         MOV       R6,?V4
   \   000039   AF..         MOV       R7,?V5
   \                     ??u_macros_0:
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   C3           CLR       C
   \   000041   EE           MOV       A,R6
   \   000042   9582         SUBB      A,DPL
   \   000044   EF           MOV       A,R7
   \   000045   9583         SUBB      A,DPH
   \   000047   501C         JNC       ??u_macros_1
     25              printf("%d ",*item);
   \   000049                ; Setup parameters for call to function printf
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000050   7A..         MOV       R2,#`?<Constant "%d ">` & 0xff
   \   000052   7B..         MOV       R3,#(`?<Constant "%d ">` >> 8) & 0xff
   \   000054   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
     26            };
   \   00005C   EE           MOV       A,R6
   \   00005D   2402         ADD       A,#0x2
   \   00005F   FE           MOV       R6,A
   \   000060   50D9         JNC       ??u_macros_0
   \   000062   0F           INC       R7
   \   000063   80D6         SJMP      ??u_macros_0
     27            printf("\r\n");
   \                     ??u_macros_1:
   \   000065                ; Setup parameters for call to function printf
   \   000065   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000069   12....       LCALL     `??printf::?relay`; Banked call to: printf
     28            
     29            printf("Try/CATCH macro \r\n");
   \   00006C                ; Setup parameters for call to function printf
   \   00006C   7A..         MOV       R2,#`?<Constant "Try/CATCH macro \\r\\n">` & 0xff
   \   00006E   7B..         MOV       R3,#(`?<Constant "Try/CATCH macro \\r\\n">` >> 8) & 0xff
   \   000070   12....       LCALL     `??printf::?relay`; Banked call to: printf
     30            TRY{
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   7408         MOV       A,#0x8
   \   00007A                REQUIRE ?V7
   \   00007A   12....       LCALL     ?SETJMP_XDATA
   \   00007D   8A..         MOV       ?V4,R2
   \   00007F   8B..         MOV       ?V5,R3
   \   000081   78..         MOV       R0,#?V4
   \   000083   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for u_macros>_0`:
   \   000086   0000         DW        0
   \   000088   01           DB        1
   \   000089   ....         DW        ??u_macros_2
   \   00008B   ....         DW        ??u_macros_3
   \   00008D   ....         DW        ??u_macros_4
     31              y = &oleg;
   \                     ??u_macros_3:
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?XSTACK_DISP100_8
   \   000094   88..         MOV       ?V4,R0
   \   000096   89..         MOV       ?V5,R1
   \   000098   85....       MOV       ?V0,?V4
   \   00009B   85....       MOV       ?V1,?V5
     32              THROW(UNHANDLED_EXCP);
   \   00009E   7A02         MOV       R2,#0x2
   \   0000A0   7B00         MOV       R3,#0x0
   \   0000A2   7408         MOV       A,#0x8
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7408         MOV       A,#0x8
   \   0000A9                REQUIRE ?V7
   \   0000A9   02....       LJMP      ?LONGJMP_XDATA
   \   0000AC                ; Setup parameters for call to function printf
     33              printf("Code run!\r\n");
                     ^
Warning[Pe111]: statement is unreachable
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_new_arch\PRJ Test\u_macros.c"

    struct abc *y;
                ^
"E:\WMNU\IAR_new_arch\PRJ Test\u_macros.c",19  Warning[Pe550]: variable "y" was
          set but never used
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_new_arch\PRJ Test\u_macros.c"

  static void uart_init(void){
              ^
"E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c",32  Warning[Pe177]: function
          "uart_init" was declared but never referenced
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c"

  static void u_test(void){
              ^
"E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_debug.c",5  Warning[Pe177]: function "u_test"
          was declared but never referenced
          detected during compilation of secondary translation unit
                    "E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_debug.c"
     34            }
     35            CATCH(TIMEOUT_EXCP){
     36              printf("Exception catch!\r\n");
   \                     ??u_macros_4:
   \   0000AC                ; Setup parameters for call to function printf
   \   0000AC   7A..         MOV       R2,#`?<Constant "Exception catch!\\r\\n">` & 0xff
   \   0000AE   7B..         MOV       R3,#(`?<Constant "Exception catch!\\r\\n">` >> 8) & 0xff
   \   0000B0   12....       LCALL     `??printf::?relay`; Banked call to: printf
     37            }
     38            FINALLY{
     39              printf("Finnaly!\r\n");
   \                     ??u_macros_2:
   \   0000B3                ; Setup parameters for call to function printf
   \   0000B3   7A..         MOV       R2,#`?<Constant "Finnaly!\\r\\n">` & 0xff
   \   0000B5   7B..         MOV       R3,#(`?<Constant "Finnaly!\\r\\n">` >> 8) & 0xff
   \   0000B7   12....       LCALL     `??printf::?relay`; Banked call to: printf
     40            }
     41            ETRY;
     42          }
   \   0000BA   7439         MOV       A,#0x39
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BF   7F06         MOV       R7,#0x6
   \   0000C1   02....       LJMP      ?BANKED_LEAVE_XDATA
E:\WMNU\IAR_NEW_ARCH\PRJ Test\u_mem_slots.c
      1          #include "utest.h"
      2          #include "stddef.h"
      3          
      4          static int test1(void);
      5          static int test2(void);
      6          static int test3(void);
      7          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      8          struct test_unit UT_MS_1 = {.name = "MS:create-delete", .fun = test1};
   \                     UT_MS_1:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_1>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
      9          struct test_unit UT_MS_2 = {.name = "MS:create-full", .fun = test2};
   \                     UT_MS_2:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_2>`
   \   000022                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     10          struct test_unit UT_MS_3 = {.name = "MS:zone-check", .fun = test3};
   \                     UT_MS_3:
   \   000000                DS 34
   \   000022                REQUIRE `?<Initializer for UT_MS_3>`
   \   000022                REQUIRE __INIT_XDATA_I
     11          
     12          #include "mem_slots.h"
     13          
     14          //int SL_zone_check();
     15          //int SL_available();
     16          //int SL_busy();
     17          //bool SL_free(char *buff);
     18          //char* SL_alloc(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     19          static int test3(void){
   \                     ??test3_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     20            int test_res = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
     21            
     22            if (!SL_zone_check())
   \   000009                ; Setup parameters for call to function SL_zone_check
   \   000009   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   E5..         MOV       A,?V0
   \   000012   45..         ORL       A,?V1
   \   000014   7004         JNZ       ??test3_11
     23              test_res = 1;
   \   000016   7E01         MOV       R6,#0x1
   \   000018   7F00         MOV       R7,#0x0
     24            
     25            // Нарушаем границу во втором слоте
     26            char *sl1 = SL_alloc();
   \                     ??test3_11:
   \   00001A                ; Setup parameters for call to function SL_alloc
   \   00001A   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   85....       MOV       ?V6,?V0
   \   000024   85....       MOV       ?V7,?V1
     27            char *sl2 = SL_alloc();
   \   000027                ; Setup parameters for call to function SL_alloc
   \   000027   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00002A   8A..         MOV       ?V0,R2
   \   00002C   8B..         MOV       ?V1,R3
   \   00002E   85....       MOV       ?V2,?V0
   \   000031   85....       MOV       ?V3,?V1
     28            char *sl3 = SL_alloc();
   \   000034                ; Setup parameters for call to function SL_alloc
   \   000034   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000037   8A..         MOV       ?V4,R2
   \   000039   8B..         MOV       ?V5,R3
   \   00003B   85....       MOV       ?V0,?V4
   \   00003E   85....       MOV       ?V1,?V5
     29            for (int i = 0; i < 180; i++)
   \   000041   7800         MOV       R0,#0x0
   \   000043   7900         MOV       R1,#0x0
   \                     ??test3_12:
   \   000045   C3           CLR       C
   \   000046   E8           MOV       A,R0
   \   000047   94B4         SUBB      A,#-0x4c
   \   000049   E9           MOV       A,R1
   \   00004A   9400         SUBB      A,#0x0
   \   00004C   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00004E   65D0         XRL       A,PSW
   \   000050   33           RLC       A
   \   000051   5014         JNC       ??test3_13
     30              sl3[i] = 0x55;
   \   000053   E5..         MOV       A,?V0
   \   000055   28           ADD       A,R0
   \   000056   F582         MOV       DPL,A
   \   000058   E5..         MOV       A,?V1
   \   00005A   39           ADDC      A,R1
   \   00005B   F583         MOV       DPH,A
   \   00005D   7455         MOV       A,#0x55
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   08           INC       R0
   \   000061   E8           MOV       A,R0
   \   000062   70E1         JNZ       ??test3_12
   \   000064   09           INC       R1
   \   000065   80DE         SJMP      ??test3_12
     31            
     32            if (SL_zone_check()!=2)
   \                     ??test3_13:
   \   000067                ; Setup parameters for call to function SL_zone_check
   \   000067   12....       LCALL     `??SL_zone_check::?relay`; Banked call to: SL_zone_check
   \   00006A   8A..         MOV       ?V4,R2
   \   00006C   8B..         MOV       ?V5,R3
   \   00006E   7402         MOV       A,#0x2
   \   000070   65..         XRL       A,?V4
   \   000072   7004         JNZ       ??test3_14
   \   000074   7400         MOV       A,#0x0
   \   000076   65..         XRL       A,?V5
   \                     ??test3_14:
   \   000078   6004         JZ        ??test3_15
     33              test_res = 2;  
   \   00007A   7E02         MOV       R6,#0x2
   \   00007C   7F00         MOV       R7,#0x0
     34            
     35            return test_res;
   \                     ??test3_15:
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   7F08         MOV       R7,#0x8
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
     36          }
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static int test2(void){
   \                     ??test2_1:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     39          // Используем полностью все фреймы
     40            char *all[20];
     41            int test_res = 0;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
     42            
     43            for (int i = 0; i < 20; i++)
   \   00000E   75..00       MOV       ?V0,#0x0
   \   000011   75..00       MOV       ?V1,#0x0
   \                     ??test2_31:
   \   000014   C3           CLR       C
   \   000015   E5..         MOV       A,?V0
   \   000017   9414         SUBB      A,#0x14
   \   000019   E5..         MOV       A,?V1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   503B         JNC       ??test2_32
     44              all[i] = SL_alloc();
   \   000024                ; Setup parameters for call to function SL_alloc
   \   000024   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000027   A8..         MOV       R0,?V0
   \   000029   A9..         MOV       R1,?V1
   \   00002B   E8           MOV       A,R0
   \   00002C   75F002       MOV       B,#0x2
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   ACF0         MOV       R4,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2C           ADD       A,R4
   \   000038   FC           MOV       R4,A
   \   000039   75F002       MOV       B,#0x2
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2C           ADD       A,R4
   \   00003F   F9           MOV       R1,A
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E582         MOV       A,DPL
   \   000048   28           ADD       A,R0
   \   000049   F582         MOV       DPL,A
   \   00004B   E583         MOV       A,DPH
   \   00004D   39           ADDC      A,R1
   \   00004E   F583         MOV       DPH,A
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   F0           MOVX      @DPTR,A
   \   000055   05..         INC       ?V0
   \   000057   E5..         MOV       A,?V0
   \   000059   70B9         JNZ       ??test2_31
   \   00005B   05..         INC       ?V1
   \   00005D   80B5         SJMP      ??test2_31
     45          
     46          // Нету NULL  
     47            for(int i = 0; i < 20; i++)
   \                     ??test2_32:
   \   00005F   7800         MOV       R0,#0x0
   \   000061   7900         MOV       R1,#0x0
   \                     ??test2_33:
   \   000063   C3           CLR       C
   \   000064   E8           MOV       A,R0
   \   000065   9414         SUBB      A,#0x14
   \   000067   E9           MOV       A,R1
   \   000068   9400         SUBB      A,#0x0
   \   00006A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00006C   65D0         XRL       A,PSW
   \   00006E   33           RLC       A
   \   00006F   503D         JNC       ??test2_34
     48              if (all[i] == NULL)
   \   000071   E8           MOV       A,R0
   \   000072   FA           MOV       R2,A
   \   000073   E9           MOV       A,R1
   \   000074   FB           MOV       R3,A
   \   000075   EA           MOV       A,R2
   \   000076   75F002       MOV       B,#0x2
   \   000079   A4           MUL       AB
   \   00007A   CA           XCH       A,R2
   \   00007B   ACF0         MOV       R4,B
   \   00007D   75F000       MOV       B,#0x0
   \   000080   A4           MUL       AB
   \   000081   2C           ADD       A,R4
   \   000082   FC           MOV       R4,A
   \   000083   75F002       MOV       B,#0x2
   \   000086   EB           MOV       A,R3
   \   000087   A4           MUL       AB
   \   000088   2C           ADD       A,R4
   \   000089   FB           MOV       R3,A
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E582         MOV       A,DPL
   \   000092   2A           ADD       A,R2
   \   000093   F582         MOV       DPL,A
   \   000095   E583         MOV       A,DPH
   \   000097   3B           ADDC      A,R3
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FA           MOV       R2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   FB           MOV       R3,A
   \   00009F   EA           MOV       A,R2
   \   0000A0   4B           ORL       A,R3
   \   0000A1   7004         JNZ       ??test2_35
     49                test_res = 1;
   \   0000A3   7E01         MOV       R6,#0x1
   \   0000A5   7F00         MOV       R7,#0x0
   \                     ??test2_35:
   \   0000A7   08           INC       R0
   \   0000A8   E8           MOV       A,R0
   \   0000A9   70B8         JNZ       ??test2_33
   \   0000AB   09           INC       R1
   \   0000AC   80B5         SJMP      ??test2_33
     50          
     51          // Все слоты должны быть разные 
     52            for(int i = 1; i < 20; i++)
   \                     ??test2_34:
   \   0000AE   7801         MOV       R0,#0x1
   \   0000B0   7900         MOV       R1,#0x0
   \                     ??test2_36:
   \   0000B2   C3           CLR       C
   \   0000B3   E8           MOV       A,R0
   \   0000B4   9414         SUBB      A,#0x14
   \   0000B6   E9           MOV       A,R1
   \   0000B7   9400         SUBB      A,#0x0
   \   0000B9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000BB   65D0         XRL       A,PSW
   \   0000BD   33           RLC       A
   \   0000BE   5078         JNC       ??test2_37
     53              if (all[i] == all[i - 1])
   \   0000C0   E8           MOV       A,R0
   \   0000C1   FA           MOV       R2,A
   \   0000C2   E9           MOV       A,R1
   \   0000C3   FB           MOV       R3,A
   \   0000C4   EA           MOV       A,R2
   \   0000C5   75F002       MOV       B,#0x2
   \   0000C8   A4           MUL       AB
   \   0000C9   CA           XCH       A,R2
   \   0000CA   ACF0         MOV       R4,B
   \   0000CC   75F000       MOV       B,#0x0
   \   0000CF   A4           MUL       AB
   \   0000D0   2C           ADD       A,R4
   \   0000D1   FC           MOV       R4,A
   \   0000D2   75F002       MOV       B,#0x2
   \   0000D5   EB           MOV       A,R3
   \   0000D6   A4           MUL       AB
   \   0000D7   2C           ADD       A,R4
   \   0000D8   FB           MOV       R3,A
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   E582         MOV       A,DPL
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E583         MOV       A,DPH
   \   0000E6   3B           ADDC      A,R3
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   FC           MOV       R4,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FD           MOV       R5,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E9           MOV       A,R1
   \   0000F1   FB           MOV       R3,A
   \   0000F2   EA           MOV       A,R2
   \   0000F3   75F002       MOV       B,#0x2
   \   0000F6   A4           MUL       AB
   \   0000F7   CA           XCH       A,R2
   \   0000F8   85F0..       MOV       ?V0,B
   \   0000FB   75F000       MOV       B,#0x0
   \   0000FE   A4           MUL       AB
   \   0000FF   25..         ADD       A,?V0
   \   000101   F5..         MOV       ?V0,A
   \   000103   75F002       MOV       B,#0x2
   \   000106   EB           MOV       A,R3
   \   000107   A4           MUL       AB
   \   000108   25..         ADD       A,?V0
   \   00010A   FB           MOV       R3,A
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   E582         MOV       A,DPL
   \   000113   2A           ADD       A,R2
   \   000114   FA           MOV       R2,A
   \   000115   E583         MOV       A,DPH
   \   000117   3B           ADDC      A,R3
   \   000118   FB           MOV       R3,A
   \   000119   EA           MOV       A,R2
   \   00011A   24FE         ADD       A,#-0x2
   \   00011C   F582         MOV       DPL,A
   \   00011E   EB           MOV       A,R3
   \   00011F   34FF         ADDC      A,#-0x1
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   6C           XRL       A,R4
   \   000125   7003         JNZ       ??test2_38
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6D           XRL       A,R5
   \                     ??test2_38:
   \   00012A   7004         JNZ       ??test2_39
     54                test_res = 2;  
   \   00012C   7E02         MOV       R6,#0x2
   \   00012E   7F00         MOV       R7,#0x0
   \                     ??test2_39:
   \   000130   08           INC       R0
   \   000131   E8           MOV       A,R0
   \   000132   7001         JNZ       ??test2_40
   \   000134   09           INC       R1
   \                     ??test2_40:
   \   000135   02....       LJMP      ??test2_36 & 0xFFFF
     55          
     56          // Все слоты занятыы
     57            if (SL_busy() != 20)
   \                     ??test2_37:
   \   000138                ; Setup parameters for call to function SL_busy
   \   000138   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00013B   8A..         MOV       ?V0,R2
   \   00013D   8B..         MOV       ?V1,R3
   \   00013F   7414         MOV       A,#0x14
   \   000141   65..         XRL       A,?V0
   \   000143   7004         JNZ       ??test2_41
   \   000145   7400         MOV       A,#0x0
   \   000147   65..         XRL       A,?V1
   \                     ??test2_41:
   \   000149   6004         JZ        ??test2_42
     58              test_res = 3;  
   \   00014B   7E03         MOV       R6,#0x3
   \   00014D   7F00         MOV       R7,#0x0
     59          
     60          // Свободных слотов нет
     61            if (SL_available() != 0)
   \                     ??test2_42:
   \   00014F                ; Setup parameters for call to function SL_available
   \   00014F   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000152   8A..         MOV       ?V0,R2
   \   000154   8B..         MOV       ?V1,R3
   \   000156   E5..         MOV       A,?V0
   \   000158   45..         ORL       A,?V1
   \   00015A   6004         JZ        ??test2_43
     62              test_res = 4;   
   \   00015C   7E04         MOV       R6,#0x4
   \   00015E   7F00         MOV       R7,#0x0
     63            
     64          // Слотов нет и при выделении должен быть NULL  
     65            char *sl =  SL_alloc();
   \                     ??test2_43:
   \   000160                ; Setup parameters for call to function SL_alloc
   \   000160   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   000163   8A..         MOV       ?V0,R2
   \   000165   8B..         MOV       ?V1,R3
   \   000167   85....       MOV       ?V2,?V0
   \   00016A   85....       MOV       ?V3,?V1
     66            if (sl)
   \   00016D   E5..         MOV       A,?V2
   \   00016F   45..         ORL       A,?V3
   \   000171   6007         JZ        ??test2_44
     67              return 5;  
   \   000173   7A05         MOV       R2,#0x5
   \   000175   7B00         MOV       R3,#0x0
   \   000177   02....       LJMP      ??test2_45 & 0xFFFF
     68            
     69          // Убедимся что счетчики не уехали
     70          // Все слоты занятыы
     71            if (SL_busy() != 20)
   \                     ??test2_44:
   \   00017A                ; Setup parameters for call to function SL_busy
   \   00017A   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00017D   8A..         MOV       ?V0,R2
   \   00017F   8B..         MOV       ?V1,R3
   \   000181   7414         MOV       A,#0x14
   \   000183   65..         XRL       A,?V0
   \   000185   7004         JNZ       ??test2_46
   \   000187   7400         MOV       A,#0x0
   \   000189   65..         XRL       A,?V1
   \                     ??test2_46:
   \   00018B   6004         JZ        ??test2_47
     72              test_res = 6;  
   \   00018D   7E06         MOV       R6,#0x6
   \   00018F   7F00         MOV       R7,#0x0
     73          
     74          // Свободных слотов нет
     75            if (SL_available() != 0)
   \                     ??test2_47:
   \   000191                ; Setup parameters for call to function SL_available
   \   000191   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000194   8A..         MOV       ?V0,R2
   \   000196   8B..         MOV       ?V1,R3
   \   000198   E5..         MOV       A,?V0
   \   00019A   45..         ORL       A,?V1
   \   00019C   6004         JZ        ??test2_48
     76              test_res = 7; 
   \   00019E   7E07         MOV       R6,#0x7
   \   0001A0   7F00         MOV       R7,#0x0
     77            
     78          // Удаляем все что создали и контролим результат
     79            for (int i = 0; i < 20; i++)
   \                     ??test2_48:
   \   0001A2   75..00       MOV       ?V0,#0x0
   \   0001A5   75..00       MOV       ?V1,#0x0
   \                     ??test2_49:
   \   0001A8   C3           CLR       C
   \   0001A9   E5..         MOV       A,?V0
   \   0001AB   9414         SUBB      A,#0x14
   \   0001AD   E5..         MOV       A,?V1
   \   0001AF   9400         SUBB      A,#0x0
   \   0001B1   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B3   65D0         XRL       A,PSW
   \   0001B5   33           RLC       A
   \   0001B6   5041         JNC       ??test2_50
     80              if (!SL_free(all[i]))
   \   0001B8                ; Setup parameters for call to function SL_free
   \   0001B8   A8..         MOV       R0,?V0
   \   0001BA   A9..         MOV       R1,?V1
   \   0001BC   E8           MOV       A,R0
   \   0001BD   75F002       MOV       B,#0x2
   \   0001C0   A4           MUL       AB
   \   0001C1   C8           XCH       A,R0
   \   0001C2   AAF0         MOV       R2,B
   \   0001C4   75F000       MOV       B,#0x0
   \   0001C7   A4           MUL       AB
   \   0001C8   2A           ADD       A,R2
   \   0001C9   FA           MOV       R2,A
   \   0001CA   75F002       MOV       B,#0x2
   \   0001CD   E9           MOV       A,R1
   \   0001CE   A4           MUL       AB
   \   0001CF   2A           ADD       A,R2
   \   0001D0   F9           MOV       R1,A
   \   0001D1   85..82       MOV       DPL,?XSP + 0
   \   0001D4   85..83       MOV       DPH,?XSP + 1
   \   0001D7   E582         MOV       A,DPL
   \   0001D9   28           ADD       A,R0
   \   0001DA   F582         MOV       DPL,A
   \   0001DC   E583         MOV       A,DPH
   \   0001DE   39           ADDC      A,R1
   \   0001DF   F583         MOV       DPH,A
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   FA           MOV       R2,A
   \   0001E3   A3           INC       DPTR
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   FB           MOV       R3,A
   \   0001E6   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   0001E9   4004         JC        ??test2_51
     81                test_res = 8; 
   \   0001EB   7E08         MOV       R6,#0x8
   \   0001ED   7F00         MOV       R7,#0x0
   \                     ??test2_51:
   \   0001EF   05..         INC       ?V0
   \   0001F1   E5..         MOV       A,?V0
   \   0001F3   70B3         JNZ       ??test2_49
   \   0001F5   05..         INC       ?V1
   \   0001F7   80AF         SJMP      ??test2_49
     82          
     83          // Все слоты свободны
     84            if (SL_busy() != 0)
   \                     ??test2_50:
   \   0001F9                ; Setup parameters for call to function SL_busy
   \   0001F9   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   0001FC   8A..         MOV       ?V0,R2
   \   0001FE   8B..         MOV       ?V1,R3
   \   000200   E5..         MOV       A,?V0
   \   000202   45..         ORL       A,?V1
   \   000204   6004         JZ        ??test2_52
     85              test_res = 9;  
   \   000206   7E09         MOV       R6,#0x9
   \   000208   7F00         MOV       R7,#0x0
     86          
     87            if (SL_available() != 20)
   \                     ??test2_52:
   \   00020A                ; Setup parameters for call to function SL_available
   \   00020A   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00020D   8A..         MOV       ?V0,R2
   \   00020F   8B..         MOV       ?V1,R3
   \   000211   7414         MOV       A,#0x14
   \   000213   65..         XRL       A,?V0
   \   000215   7004         JNZ       ??test2_53
   \   000217   7400         MOV       A,#0x0
   \   000219   65..         XRL       A,?V1
   \                     ??test2_53:
   \   00021B   6004         JZ        ??test2_54
     88              test_res = 10;
   \   00021D   7E0A         MOV       R6,#0xa
   \   00021F   7F00         MOV       R7,#0x0
     89            
     90          // Пробуем удалить уже удаленное рез. должен быть false  
     91            for (int i = 0; i < 20; i++)
   \                     ??test2_54:
   \   000221   75..00       MOV       ?V0,#0x0
   \   000224   75..00       MOV       ?V1,#0x0
   \                     ??test2_55:
   \   000227   C3           CLR       C
   \   000228   E5..         MOV       A,?V0
   \   00022A   9414         SUBB      A,#0x14
   \   00022C   E5..         MOV       A,?V1
   \   00022E   9400         SUBB      A,#0x0
   \   000230   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000232   65D0         XRL       A,PSW
   \   000234   33           RLC       A
   \   000235   5041         JNC       ??test2_56
     92              if (SL_free(all[i]))
   \   000237                ; Setup parameters for call to function SL_free
   \   000237   A8..         MOV       R0,?V0
   \   000239   A9..         MOV       R1,?V1
   \   00023B   E8           MOV       A,R0
   \   00023C   75F002       MOV       B,#0x2
   \   00023F   A4           MUL       AB
   \   000240   C8           XCH       A,R0
   \   000241   AAF0         MOV       R2,B
   \   000243   75F000       MOV       B,#0x0
   \   000246   A4           MUL       AB
   \   000247   2A           ADD       A,R2
   \   000248   FA           MOV       R2,A
   \   000249   75F002       MOV       B,#0x2
   \   00024C   E9           MOV       A,R1
   \   00024D   A4           MUL       AB
   \   00024E   2A           ADD       A,R2
   \   00024F   F9           MOV       R1,A
   \   000250   85..82       MOV       DPL,?XSP + 0
   \   000253   85..83       MOV       DPH,?XSP + 1
   \   000256   E582         MOV       A,DPL
   \   000258   28           ADD       A,R0
   \   000259   F582         MOV       DPL,A
   \   00025B   E583         MOV       A,DPH
   \   00025D   39           ADDC      A,R1
   \   00025E   F583         MOV       DPH,A
   \   000260   E0           MOVX      A,@DPTR
   \   000261   FA           MOV       R2,A
   \   000262   A3           INC       DPTR
   \   000263   E0           MOVX      A,@DPTR
   \   000264   FB           MOV       R3,A
   \   000265   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
   \   000268   5004         JNC       ??test2_57
     93                test_res = 11;
   \   00026A   7E0B         MOV       R6,#0xb
   \   00026C   7F00         MOV       R7,#0x0
   \                     ??test2_57:
   \   00026E   05..         INC       ?V0
   \   000270   E5..         MOV       A,?V0
   \   000272   70B3         JNZ       ??test2_55
   \   000274   05..         INC       ?V1
   \   000276   80AF         SJMP      ??test2_55
     94            
     95          // Все слоты свободны
     96            if (SL_busy() != 0)
   \                     ??test2_56:
   \   000278                ; Setup parameters for call to function SL_busy
   \   000278   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00027B   8A..         MOV       ?V0,R2
   \   00027D   8B..         MOV       ?V1,R3
   \   00027F   E5..         MOV       A,?V0
   \   000281   45..         ORL       A,?V1
   \   000283   6004         JZ        ??test2_58
     97              test_res = 12;  
   \   000285   7E0C         MOV       R6,#0xc
   \   000287   7F00         MOV       R7,#0x0
     98          
     99            if (SL_available() != 20)
   \                     ??test2_58:
   \   000289                ; Setup parameters for call to function SL_available
   \   000289   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00028C   8A..         MOV       ?V0,R2
   \   00028E   8B..         MOV       ?V1,R3
   \   000290   7414         MOV       A,#0x14
   \   000292   65..         XRL       A,?V0
   \   000294   7004         JNZ       ??test2_59
   \   000296   7400         MOV       A,#0x0
   \   000298   65..         XRL       A,?V1
   \                     ??test2_59:
   \   00029A   6004         JZ        ??test2_60
    100              test_res = 13;
   \   00029C   7E0D         MOV       R6,#0xd
   \   00029E   7F00         MOV       R7,#0x0
    101            
    102            return test_res;
   \                     ??test2_60:
   \   0002A0   EE           MOV       A,R6
   \   0002A1   FA           MOV       R2,A
   \   0002A2   EF           MOV       A,R7
   \   0002A3   FB           MOV       R3,A
   \                     ??test2_45:
   \   0002A4   7428         MOV       A,#0x28
   \   0002A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A9   7F04         MOV       R7,#0x4
   \   0002AB   02....       LJMP      ?BANKED_LEAVE_XDATA
    103          }
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          static int test1(void){
   \                     ??test1_2:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    106            // Простой тест на создание и удаление
    107            bool test_res = 0;
   \   000005   C2..         CLR       ?VB.0
    108            
    109            if (SL_busy() != 0)
   \   000007                ; Setup parameters for call to function SL_busy
   \   000007   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   E5..         MOV       A,?V0
   \   000010   45..         ORL       A,?V1
   \   000012   6002         JZ        ??test1_22
    110              test_res = 1;  
   \   000014   D2..         SETB      ?VB.0
    111          
    112            if (SL_available() != 20)
   \                     ??test1_22:
   \   000016                ; Setup parameters for call to function SL_available
   \   000016   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000019   8A..         MOV       ?V0,R2
   \   00001B   8B..         MOV       ?V1,R3
   \   00001D   7414         MOV       A,#0x14
   \   00001F   65..         XRL       A,?V0
   \   000021   7004         JNZ       ??test1_23
   \   000023   7400         MOV       A,#0x0
   \   000025   65..         XRL       A,?V1
   \                     ??test1_23:
   \   000027   6002         JZ        ??test1_24
    113              test_res = 2;    
   \   000029   D2..         SETB      ?VB.0
    114            
    115            char* slot = SL_alloc();
   \                     ??test1_24:
   \   00002B                ; Setup parameters for call to function SL_alloc
   \   00002B   12....       LCALL     `??SL_alloc::?relay`; Banked call to: SL_alloc
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AE..         MOV       R6,?V0
   \   000034   AF..         MOV       R7,?V1
    116            if (SL_busy() != 1)
   \   000036                ; Setup parameters for call to function SL_busy
   \   000036   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   000039   8A..         MOV       ?V0,R2
   \   00003B   8B..         MOV       ?V1,R3
   \   00003D   7401         MOV       A,#0x1
   \   00003F   65..         XRL       A,?V0
   \   000041   7004         JNZ       ??test1_25
   \   000043   7400         MOV       A,#0x0
   \   000045   65..         XRL       A,?V1
   \                     ??test1_25:
   \   000047   6002         JZ        ??test1_26
    117              test_res = 3;
   \   000049   D2..         SETB      ?VB.0
    118            
    119            if (SL_available() != 19)
   \                     ??test1_26:
   \   00004B                ; Setup parameters for call to function SL_available
   \   00004B   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   00004E   8A..         MOV       ?V0,R2
   \   000050   8B..         MOV       ?V1,R3
   \   000052   7413         MOV       A,#0x13
   \   000054   65..         XRL       A,?V0
   \   000056   7004         JNZ       ??test1_27
   \   000058   7400         MOV       A,#0x0
   \   00005A   65..         XRL       A,?V1
   \                     ??test1_27:
   \   00005C   6002         JZ        ??test1_28
    120              test_res = 4;  
   \   00005E   D2..         SETB      ?VB.0
    121            
    122            SL_free(slot);
   \                     ??test1_28:
   \   000060                ; Setup parameters for call to function SL_free
   \   000060   EE           MOV       A,R6
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??SL_free::?relay`; Banked call to: SL_free
    123            if (SL_busy() != 0)
   \   000067                ; Setup parameters for call to function SL_busy
   \   000067   12....       LCALL     `??SL_busy::?relay`; Banked call to: SL_busy
   \   00006A   8A..         MOV       ?V0,R2
   \   00006C   8B..         MOV       ?V1,R3
   \   00006E   E5..         MOV       A,?V0
   \   000070   45..         ORL       A,?V1
   \   000072   6002         JZ        ??test1_29
    124              test_res = 5;  
   \   000074   D2..         SETB      ?VB.0
    125            
    126            if (SL_available() != 20)
   \                     ??test1_29:
   \   000076                ; Setup parameters for call to function SL_available
   \   000076   12....       LCALL     `??SL_available::?relay`; Banked call to: SL_available
   \   000079   8A..         MOV       ?V0,R2
   \   00007B   8B..         MOV       ?V1,R3
   \   00007D   7414         MOV       A,#0x14
   \   00007F   65..         XRL       A,?V0
   \   000081   7004         JNZ       ??test1_30
   \   000083   7400         MOV       A,#0x0
   \   000085   65..         XRL       A,?V1
   \                     ??test1_30:
   \   000087   6002         JZ        ??test1_31
    127              test_res = 6; 
   \   000089   D2..         SETB      ?VB.0
    128            
    129            return test_res;
   \                     ??test1_31:
   \   00008B   A2..         MOV       C,?VB.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   FA           MOV       R2,A
   \   000090   7B00         MOV       R3,#0x0
   \   000092   7F02         MOV       R7,#0x2
   \   000094   02....       LJMP      ?BANKED_LEAVE_XDATA
    130          }
    131          
E:\WMNU\IAR_new_arch\PRJ Test\u_mem_utils.c
      1          #include "debug.h"
      2          #include "mem_utils.h"
      3          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      4          void u_mem_utils(void){
   \                     u_mem_utils:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
      5            char tst1[10] = {1,2,3,4,5,6,7,8,9,10};
   \   00000A   90....       MOV       DPTR,#`?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1`
   \   00000D   7409         MOV       A,#0x9
   \   00000F   12....       LCALL     ?XSTACK_DISP102_8
   \   000012   740A         MOV       A,#0xa
   \   000014   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
      6            char tst2[10];
      7            int cmp_res;
      8            
      9            struct memcpy memcpy = {.src = tst1, .dst = tst2, .len = sizeof(tst1)};
   \   000017   90....       MOV       DPTR,#`?<Constant {(char *)0, (char *)0, 10}>`
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   7405         MOV       A,#0x5
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000024   7413         MOV       A,#0x13
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E8           MOV       A,R0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
   \   000033   7409         MOV       A,#0x9
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   7406         MOV       A,#0x6
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   F0           MOVX      @DPTR,A
     10            MEM_memcpy(&memcpy);
   \   000042                ; Setup parameters for call to function MEM_memcpy
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     `??MEM_memcpy::?relay`; Banked call to: MEM_memcpy
     11            
     12            for (int i = 0; i < sizeof(tst1); i++){
   \   00004A   75..00       MOV       ?V0,#0x0
   \   00004D   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_0:
   \   000050   C3           CLR       C
   \   000051   E5..         MOV       A,?V0
   \   000053   940A         SUBB      A,#0xa
   \   000055   E5..         MOV       A,?V1
   \   000057   9400         SUBB      A,#0x0
   \   000059   5078         JNC       ??u_mem_utils_1
     13              cmp_res = tst1[i] == tst2[i];
   \   00005B   7409         MOV       A,#0x9
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E582         MOV       A,DPL
   \   000062   25..         ADD       A,?V0
   \   000064   F582         MOV       DPL,A
   \   000066   E583         MOV       A,DPH
   \   000068   35..         ADDC      A,?V1
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F8           MOV       R0,A
   \   00006E   7413         MOV       A,#0x13
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E582         MOV       A,DPL
   \   000075   25..         ADD       A,?V0
   \   000077   F582         MOV       DPL,A
   \   000079   E583         MOV       A,DPH
   \   00007B   35..         ADDC      A,?V1
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   68           XRL       A,R0
   \   000081   7006         JNZ       ??u_mem_utils_2
   \   000083   7E01         MOV       R6,#0x1
   \   000085   7F00         MOV       R7,#0x0
   \   000087   8004         SJMP      ??u_mem_utils_3
   \                     ??u_mem_utils_2:
   \   000089   7E00         MOV       R6,#0x0
   \   00008B   7F00         MOV       R7,#0x0
     14              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_3:
   \   00008D   EE           MOV       A,R6
   \   00008E   4F           ORL       A,R7
   \   00008F   6037         JZ        ??u_mem_utils_4
   \   000091                ; Setup parameters for call to function printf
   \   000091   75....       MOV       ?V2,#??__FUNCTION___14 & 0xff
   \   000094   75....       MOV       ?V3,#(??__FUNCTION___14 >> 8) & 0xff
   \   000097   78..         MOV       R0,#?V2
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   75..0E       MOV       ?V2,#0xe
   \   00009F   75..00       MOV       ?V3,#0x0
   \   0000A2   78..         MOV       R0,#?V2
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0000AA   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   0000B4   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   0000B6   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000B9   7406         MOV       A,#0x6
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE                ; Setup parameters for call to function printf
   \   0000BE   7A..         MOV       R2,#`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` & 0xff
   \   0000C0   7B..         MOV       R3,#(`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   0000C2   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C5                ; Setup parameters for call to function DBG_CORE_HALT
   \   0000C5   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     15              }
   \                     ??u_mem_utils_4:
   \   0000C8   05..         INC       ?V0
   \   0000CA   E5..         MOV       A,?V0
   \   0000CC   7082         JNZ       ??u_mem_utils_0
   \   0000CE   05..         INC       ?V1
   \   0000D0   02....       LJMP      ??u_mem_utils_0 & 0xFFFF
     16            LOG_ON("MEM_memcpy ok!");
   \                     ??u_mem_utils_1:
   \   0000D3                ; Setup parameters for call to function printf
   \   0000D3   75....       MOV       ?V0,#??__FUNCTION___14 & 0xff
   \   0000D6   75....       MOV       ?V1,#(??__FUNCTION___14 >> 8) & 0xff
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   75..10       MOV       ?V0,#0x10
   \   0000E1   75..00       MOV       ?V1,#0x0
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0000EC   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   0000F6   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   0000F8   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000FB   7406         MOV       A,#0x6
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   \   000100                ; Setup parameters for call to function printf
   \   000100   7A..         MOV       R2,#`?<Constant "MEM_memcpy ok!">` & 0xff
   \   000102   7B..         MOV       R3,#(`?<Constant "MEM_memcpy ok!">` >> 8) & 0xff
   \   000104   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000107                ; Setup parameters for call to function printf
   \   000107   7A..         MOV       R2,#`?<Constant "\\r\\n">_1` & 0xff
   \   000109   7B..         MOV       R3,#(`?<Constant "\\r\\n">_1` >> 8) & 0xff
   \   00010B   12....       LCALL     `??printf::?relay`; Banked call to: printf
     17            
     18            struct memset memset = {.dst = tst1, .val = 7, .len = sizeof(tst1)};
   \   00010E   90....       MOV       DPTR,#`?<Constant {(char *)0, 10, 7}>`
   \   000111   AC..         MOV       R4,?XSP + 0
   \   000113   AD..         MOV       R5,?XSP + 1
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00011A   7409         MOV       A,#0x9
   \   00011C   12....       LCALL     ?XSTACK_DISP100_8
   \   00011F   85..82       MOV       DPL,?XSP + 0
   \   000122   85..83       MOV       DPH,?XSP + 1
   \   000125   E8           MOV       A,R0
   \   000126   F0           MOVX      @DPTR,A
   \   000127   A3           INC       DPTR
   \   000128   E9           MOV       A,R1
   \   000129   F0           MOVX      @DPTR,A
     19            MEM_memset(&memset);
   \   00012A                ; Setup parameters for call to function MEM_memset
   \   00012A   AA..         MOV       R2,?XSP + 0
   \   00012C   AB..         MOV       R3,?XSP + 1
   \   00012E   12....       LCALL     `??MEM_memset::?relay`; Banked call to: MEM_memset
     20          
     21            for (int i = 0; i < sizeof(tst1); i++){
   \   000131   75..00       MOV       ?V0,#0x0
   \   000134   75..00       MOV       ?V1,#0x0
   \                     ??u_mem_utils_5:
   \   000137   C3           CLR       C
   \   000138   E5..         MOV       A,?V0
   \   00013A   940A         SUBB      A,#0xa
   \   00013C   E5..         MOV       A,?V1
   \   00013E   9400         SUBB      A,#0x0
   \   000140   5065         JNC       ??u_mem_utils_6
     22              cmp_res = tst1[i] == 7;
   \   000142   7409         MOV       A,#0x9
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   E582         MOV       A,DPL
   \   000149   25..         ADD       A,?V0
   \   00014B   F582         MOV       DPL,A
   \   00014D   E583         MOV       A,DPH
   \   00014F   35..         ADDC      A,?V1
   \   000151   F583         MOV       DPH,A
   \   000153   E0           MOVX      A,@DPTR
   \   000154   6407         XRL       A,#0x7
   \   000156   7006         JNZ       ??u_mem_utils_7
   \   000158   7E01         MOV       R6,#0x1
   \   00015A   7F00         MOV       R7,#0x0
   \   00015C   8004         SJMP      ??u_mem_utils_8
   \                     ??u_mem_utils_7:
   \   00015E   7E00         MOV       R6,#0x0
   \   000160   7F00         MOV       R7,#0x0
     23              ASSERT(cmp_res == 0);
   \                     ??u_mem_utils_8:
   \   000162   EE           MOV       A,R6
   \   000163   4F           ORL       A,R7
   \   000164   6037         JZ        ??u_mem_utils_9
   \   000166                ; Setup parameters for call to function printf
   \   000166   75....       MOV       ?V2,#??__FUNCTION___14 & 0xff
   \   000169   75....       MOV       ?V3,#(??__FUNCTION___14 >> 8) & 0xff
   \   00016C   78..         MOV       R0,#?V2
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000171   75..17       MOV       ?V2,#0x17
   \   000174   75..00       MOV       ?V3,#0x0
   \   000177   78..         MOV       R0,#?V2
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   75....       MOV       ?V2,#`?<Constant "u_mem_utils.c">` & 0xff
   \   00017F   75....       MOV       ?V3,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   000182   78..         MOV       R0,#?V2
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   000189   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   00018B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00018E   7406         MOV       A,#0x6
   \   000190   12....       LCALL     ?DEALLOC_XSTACK8
   \   000193                ; Setup parameters for call to function printf
   \   000193   7A..         MOV       R2,#`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` & 0xff
   \   000195   7B..         MOV       R3,#(`?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">` >> 8) & 0xff
   \   000197   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00019A                ; Setup parameters for call to function DBG_CORE_HALT
   \   00019A   12....       LCALL     `??DBG_CORE_HALT::?relay`; Banked call to: DBG_CORE_HALT
     24              }
   \                     ??u_mem_utils_9:
   \   00019D   05..         INC       ?V0
   \   00019F   E5..         MOV       A,?V0
   \   0001A1   7094         JNZ       ??u_mem_utils_5
   \   0001A3   05..         INC       ?V1
   \   0001A5   8090         SJMP      ??u_mem_utils_5
     25            LOG_ON("MEM_memset ok!");
   \                     ??u_mem_utils_6:
   \   0001A7                ; Setup parameters for call to function printf
   \   0001A7   75....       MOV       ?V0,#??__FUNCTION___14 & 0xff
   \   0001AA   75....       MOV       ?V1,#(??__FUNCTION___14 >> 8) & 0xff
   \   0001AD   78..         MOV       R0,#?V0
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   75..19       MOV       ?V0,#0x19
   \   0001B5   75..00       MOV       ?V1,#0x0
   \   0001B8   78..         MOV       R0,#?V0
   \   0001BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BD   75....       MOV       ?V0,#`?<Constant "u_mem_utils.c">` & 0xff
   \   0001C0   75....       MOV       ?V1,#(`?<Constant "u_mem_utils.c">` >> 8) & 0xff
   \   0001C3   78..         MOV       R0,#?V0
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   7A..         MOV       R2,#`?<Constant "%s:%d:%s -> ">_5` & 0xff
   \   0001CA   7B..         MOV       R3,#(`?<Constant "%s:%d:%s -> ">_5` >> 8) & 0xff
   \   0001CC   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001CF   7406         MOV       A,#0x6
   \   0001D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D4                ; Setup parameters for call to function printf
   \   0001D4   7A..         MOV       R2,#`?<Constant "MEM_memset ok!">` & 0xff
   \   0001D6   7B..         MOV       R3,#(`?<Constant "MEM_memset ok!">` >> 8) & 0xff
   \   0001D8   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0001DB                ; Setup parameters for call to function printf
   \   0001DB   7A..         MOV       R2,#`?<Constant "\\r\\n">_1` & 0xff
   \   0001DD   7B..         MOV       R3,#(`?<Constant "\\r\\n">_1` >> 8) & 0xff
   \   0001DF   12....       LCALL     `??printf::?relay`; Banked call to: printf
     26          }
   \   0001E2   741D         MOV       A,#0x1d
   \   0001E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E7   7F04         MOV       R7,#0x4
   \   0001E9   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, (char *)0, 10}>`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0H
   \   000004   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(char *)0, 10, 7}>`:
   \   000000   0000         DW 0H
   \   000002   0A           DB 10
   \   000003   07           DB 7
E:\WMNU\IAR_NEW_ARCH\PRJ Test\utest.c
      1          #include "utest.h"
      2          #include "macros.h"
      3          #include "stdio.h"
      4          #include "action_manager.h"
      5          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      6          struct test_unit* TEST_FUN[] = TEST_FUN_DEF;
   \                     TEST_FUN:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for TEST_FUN>`
   \   00000E                REQUIRE __INIT_XDATA_I
      7          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          static int passed = 0;
   \                     ??passed:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          static int common_count = 0;
   \                     ??common_count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     10          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          static inline void run_unit_fun(struct test_unit* unit){
   \                     ??run_unit_fun:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
     12            if (!unit->fun){
   \   000009   E5..         MOV       A,?V0
   \   00000B   2420         ADD       A,#0x20
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   35..         ADDC      A,?V1
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   49           ORL       A,R1
   \   00001B   7009         JNZ       ??run_unit_fun_1
     13            printf("Test function not assigned!!!");
   \   00001D                ; Setup parameters for call to function printf
   \   00001D   7A..         MOV       R2,#`?<Constant "Test function not ass...">` & 0xff
   \   00001F   7B..         MOV       R3,#(`?<Constant "Test function not ass...">` >> 8) & 0xff
   \   000021   12....       LCALL     `??printf::?relay`; Banked call to: printf
     14            while(true);
   \                     ??run_unit_fun_2:
   \   000024   80FE         SJMP      ??run_unit_fun_2
     15            }
     16            int res;
     17            common_count++;
   \                     ??run_unit_fun_1:
   \   000026   90....       MOV       DPTR,#??common_count
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2401         ADD       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \   000031   F0           MOVX      @DPTR,A
     18            res = unit->fun();
   \   000032                ; Setup parameters for indirect call
   \   000032   E5..         MOV       A,?V0
   \   000034   2420         ADD       A,#0x20
   \   000036   F582         MOV       DPL,A
   \   000038   E4           CLR       A
   \   000039   35..         ADDC      A,?V1
   \   00003B   F583         MOV       DPH,A
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F583         MOV       DPH,A
   \   000043   8882         MOV       DPL,R0
   \   000045   12....       LCALL     ?CALL_IND
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   85....       MOV       ?V2,?V4
   \   00004F   85....       MOV       ?V3,?V5
     19            
     20            printf("TESTING:\t%-32s", unit->name);
   \   000052                ; Setup parameters for call to function printf
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7A..         MOV       R2,#`?<Constant "TESTING:\\t%-32s">` & 0xff
   \   000059   7B..         MOV       R3,#(`?<Constant "TESTING:\\t%-32s">` >> 8) & 0xff
   \   00005B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
     21            if (res == 0){
   \   000063   E5..         MOV       A,?V2
   \   000065   45..         ORL       A,?V3
   \   000067   7015         JNZ       ??run_unit_fun_3
     22              printf("\tPASSED\r\n");
   \   000069                ; Setup parameters for call to function printf
   \   000069   7A..         MOV       R2,#`?<Constant "\\tPASSED\\r\\n">` & 0xff
   \   00006B   7B..         MOV       R3,#(`?<Constant "\\tPASSED\\r\\n">` >> 8) & 0xff
   \   00006D   12....       LCALL     `??printf::?relay`; Banked call to: printf
     23              passed++;
   \   000070   90....       MOV       DPTR,#??passed
   \   000073   E0           MOVX      A,@DPTR
   \   000074   2401         ADD       A,#0x1
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   3400         ADDC      A,#0x0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   8011         SJMP      ??run_unit_fun_4
     24            }
     25            else
     26              printf("\tERR = %d. FAILED <--------------\r\n", res);           
   \                     ??run_unit_fun_3:
   \   00007E                ; Setup parameters for call to function printf
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   7A..         MOV       R2,#`?<Constant "\\tERR = %d. FAILED <--...">` & 0xff
   \   000085   7B..         MOV       R3,#(`?<Constant "\\tERR = %d. FAILED <--...">` >> 8) & 0xff
   \   000087   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
     27          };
   \                     ??run_unit_fun_4:
   \   00008F   7F06         MOV       R7,#0x6
   \   000091   02....       LJMP      ?BANKED_LEAVE_XDATA
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          static void show_grating(void){
   \                     ??show_grating:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     30            printf("Begin unit test\r\n");
   \   000004                ; Setup parameters for call to function printf
   \   000004   7A..         MOV       R2,#`?<Constant "Begin unit test\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "Begin unit test\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??printf::?relay`; Banked call to: printf
     31          }
   \   00000B   D083         POP       DPH
   \   00000D   D082         POP       DPL
   \   00000F   02....       LJMP      ?BRET
     32          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          static void show_statistic(void){
   \                     ??show_statistic:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     34            printf("\r\n##########################################\r\n");
   \   000004                ; Setup parameters for call to function printf
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n###################...">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n###################...">` >> 8) & 0xff
   \   000008   12....       LCALL     `??printf::?relay`; Banked call to: printf
     35            printf("Test runned: \t%d\r\n", common_count);
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   90....       MOV       DPTR,#??common_count
   \   00000E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000011   7A..         MOV       R2,#`?<Constant "Test runned: \\t%d\\r\\n">` & 0xff
   \   000013   7B..         MOV       R3,#(`?<Constant "Test runned: \\t%d\\r\\n">` >> 8) & 0xff
   \   000015   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?DEALLOC_XSTACK8
     36            printf("Test passed: \t%d\r\n", passed);
   \   00001D                ; Setup parameters for call to function printf
   \   00001D   90....       MOV       DPTR,#??passed
   \   000020   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000023   7A..         MOV       R2,#`?<Constant "Test passed: \\t%d\\r\\n">` & 0xff
   \   000025   7B..         MOV       R3,#(`?<Constant "Test passed: \\t%d\\r\\n">` >> 8) & 0xff
   \   000027   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
     37            if (common_count == passed)
   \   00002F   90....       MOV       DPTR,#??common_count
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   90....       MOV       DPTR,#??passed
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??show_statistic_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   69           XRL       A,R1
   \                     ??show_statistic_1:
   \   000041   7009         JNZ       ??show_statistic_2
     38              printf("Succes!\r\n");
   \   000043                ; Setup parameters for call to function printf
   \   000043   7A..         MOV       R2,#`?<Constant "Succes!\\r\\n">` & 0xff
   \   000045   7B..         MOV       R3,#(`?<Constant "Succes!\\r\\n">` >> 8) & 0xff
   \   000047   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00004A   8007         SJMP      ??show_statistic_3
     39            else
     40              printf("Failed!\r\n");
   \                     ??show_statistic_2:
   \   00004C                ; Setup parameters for call to function printf
   \   00004C   7A..         MOV       R2,#`?<Constant "Failed!\\r\\n">` & 0xff
   \   00004E   7B..         MOV       R3,#(`?<Constant "Failed!\\r\\n">` >> 8) & 0xff
   \   000050   12....       LCALL     `??printf::?relay`; Banked call to: printf
     41          }
   \                     ??show_statistic_3:
   \   000053   D083         POP       DPH
   \   000055   D082         POP       DPL
   \   000057   02....       LJMP      ?BRET
     42          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void run_tests(void){
   \                     run_tests:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     44            show_grating();
   \   000005                ; Setup parameters for call to function show_grating
   \   000005   12....       LCALL     `??show_grating::?relay`; Banked call to: show_grating
     45            struct test_unit* unit;
     46            for (int i = 0; i < sizeof(TEST_FUN)/sizeof(struct test_unit*); i++){
   \   000008   7E00         MOV       R6,#0x0
   \   00000A   7F00         MOV       R7,#0x0
   \                     ??run_tests_0:
   \   00000C   C3           CLR       C
   \   00000D   EE           MOV       A,R6
   \   00000E   9407         SUBB      A,#0x7
   \   000010   EF           MOV       A,R7
   \   000011   9400         SUBB      A,#0x0
   \   000013   503D         JNC       ??run_tests_1
     47              unit = TEST_FUN[i];
   \   000015   EE           MOV       A,R6
   \   000016   F8           MOV       R0,A
   \   000017   EF           MOV       A,R7
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   75F002       MOV       B,#0x2
   \   00001D   A4           MUL       AB
   \   00001E   C8           XCH       A,R0
   \   00001F   AAF0         MOV       R2,B
   \   000021   75F000       MOV       B,#0x0
   \   000024   A4           MUL       AB
   \   000025   2A           ADD       A,R2
   \   000026   FA           MOV       R2,A
   \   000027   75F002       MOV       B,#0x2
   \   00002A   E9           MOV       A,R1
   \   00002B   A4           MUL       AB
   \   00002C   2A           ADD       A,R2
   \   00002D   F9           MOV       R1,A
   \   00002E   74..         MOV       A,#TEST_FUN & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F582         MOV       DPL,A
   \   000033   74..         MOV       A,#(TEST_FUN >> 8) & 0xff
   \   000035   39           ADDC      A,R1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   88..         MOV       ?V0,R0
   \   00003F   89..         MOV       ?V1,R1
     48              AM_SW_Init();
   \   000041                ; Setup parameters for call to function AM_SW_Init
   \   000041   12....       LCALL     `??AM_SW_Init::?relay`; Banked call to: AM_SW_Init
     49              run_unit_fun(unit);
   \   000044                ; Setup parameters for call to function run_unit_fun
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   12....       LCALL     `??run_unit_fun::?relay`; Banked call to: run_unit_fun
     50            };
   \   00004B   0E           INC       R6
   \   00004C   EE           MOV       A,R6
   \   00004D   70BD         JNZ       ??run_tests_0
   \   00004F   0F           INC       R7
   \   000050   80BA         SJMP      ??run_tests_0
     51            show_statistic();  
   \                     ??run_tests_1:
   \   000052                ; Setup parameters for call to function show_statistic
   \   000052   12....       LCALL     `??show_statistic::?relay`; Banked call to: show_statistic
     52          }
   \   000055   7F02         MOV       R7,#0x2
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??TimerCompareInterrupt::??INTVEC 43`:
   \   00002B   02....       LJMP       (TimerCompareInterrupt)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for HW_MOD>`:
   \   000000   ....         DW CPU_MODULE
   \   000002   ....         DW DBG_MODULE
   \   000004   ....         DW AT_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SW_MOD>`:
   \   000000   ....         DW TM_MODULE
   \   000002   ....         DW FR_MODULE
   \   000004   ....         DW MD_MODULE
   \   000006   ....         DW MS_MODULE
   \   000008   ....         DW BF_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for POW_MOD>`:
   \   000000   ....         DW RTC_MODULE

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AT_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for BF_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TX_LIST_HEAD>`:
   \   000000   ....         DW TX_LIST_HEAD
   \   000002   ....         DW TX_LIST_HEAD

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RX_LIST_HEAD>`:
   \   000000   ....         DW RX_LIST_HEAD
   \   000002   ....         DW RX_LIST_HEAD

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CPU_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_1`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DBG_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_2`
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00000A   0000         DB 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FR_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_1`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MS_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_2`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MD_MODULE>`:
   \   000000   ....         DW `??HW_Init::?relay_3`
   \   000002   ....         DW `??SW_Init::?relay_3`
   \   000004   ....         DW `??Sleep::?relay`
   \   000006   ....         DW `??Wakeup::?relay`
   \   000008   ....         DW `??Cold_Start::?relay`
   \   00000A   ....         DW `??Hot_Start::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for RTC_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_4`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TM_MODULE>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW `??SW_Init::?relay_5`
   \   000004   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_BF_1>`:
   \   000000   42463A70     DB "BF:push"
   \            75736800
   \   000008   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000010   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000018   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000020   ....         DW `??test1::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UTEST_DEBUG>`:
   \   000000   44454255     DB "DEBUG MODUL"
   \            47204D4F
   \            44554C00
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001C   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_1>`:
   \   000000   46523A63     DB "FR:create-delete"
   \            72656174
   \            652D6465
   \            6C657465
   \            00      
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  
   \   000020   ....         DW `??test1::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_2>`:
   \   000000   46523A63     DB "FR:create-full"
   \            72656174
   \            652D6675
   \            6C6C00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test2::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_FR_3>`:
   \   000000   46523A68     DB "FR:header manipulation"
   \            65616465
   \            72206D61
   \            6E697075
   \            6C617469
   \            6F6E00  
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test3::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_1>`:
   \   000000   4D533A63     DB "MS:create-delete"
   \            72656174
   \            652D6465
   \            6C657465
   \            00      
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  
   \   000020   ....         DW `??test1::?relay_2`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_2>`:
   \   000000   4D533A63     DB "MS:create-full"
   \            72656174
   \            652D6675
   \            6C6C00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000017   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001F   00           DB 0
   \   000020   ....         DW `??test2::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UT_MS_3>`:
   \   000000   4D533A7A     DB "MS:zone-check"
   \            6F6E652D
   \            63686563
   \            6B00    
   \   00000E   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000016   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001E   0000         DB 0, 0
   \   000020   ....         DW `??test3::?relay_1`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TEST_FUN>`:
   \   000000   ....         DW UT_MS_1
   \   000002   ....         DW UT_MS_2
   \   000004   ....         DW UT_MS_3
   \   000006   ....         DW UT_FR_1
   \   000008   ....         DW UT_FR_2
   \   00000A   ....         DW UT_FR_3
   \   00000C   ....         DW UT_BF_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Cold_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Cold_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Hot_start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Hot_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AM_Wakeup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AM_Wakeup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??IRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??IRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AT_set_alarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AT_set_alarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcCompareTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??calcCompareTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ReadTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ReadTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??loadTimerCompare::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??loadTimerCompare

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??isIRQEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??isIRQEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INIT_LIST_HEAD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??INIT_LIST_HEAD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_add_valid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_add_valid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del_entry_valid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del_entry_valid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_add::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_add

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_add::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_add

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__list_del_entry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__list_del_entry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_del::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_del

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??list_empty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??list_empty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??find_free_node::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??find_free_node

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_push_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_push_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_push_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_push_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??find_node_by_frame_ptr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??find_node_by_frame_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_remove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_remove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_remove_rx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_remove_rx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_remove_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_remove_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BF_next_tx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BF_next_tx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_HALT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_HALT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DBG_CORE_FAULT::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DBG_CORE_FAULT

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_create::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_create

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_add_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_add_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_del_header::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_del_header

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FR_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FR_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??is_array_ptr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??is_array_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??array_index::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??array_index

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??__cli::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??__cli_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??_free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_busy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_busy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_available::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_available

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SL_zone_check::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SL_zone_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MEM_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MEM_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??HW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_3`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Wakeup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Wakeup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Cold_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Cold_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hot_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??Hot_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_4`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_4

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SW_Init::?relay_5`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??SW_Init_5

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_SetAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_SetAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_ClrAlarm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_ClrAlarm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_AdjustTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_AdjustTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TM_IRQ::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TM_IRQ

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_alarm_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_alarm_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ch_cmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ch_cmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ch_cmp_val::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??ch_cmp_val

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test3::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_macros::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_macros

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test3::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test3_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test2::?relay_1`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test2_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??test1::?relay_2`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??test1_2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??u_mem_utils::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    u_mem_utils

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??run_unit_fun::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??run_unit_fun

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??show_grating::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??show_grating

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??show_statistic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ??show_statistic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??run_tests::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    run_tests

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "action_manager.c">`:
   \   000000   61637469     DB "action_manager.c"
   \            6F6E5F6D
   \            616E6167
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"COLD_MOD[i]->Cold_St...">`:
   \   000000   22434F4C     DB "\"COLD_MOD[i]->Cold_Start != NULL\" Faild! \015\012"
   \            445F4D4F
   \            445B695D
   \            2D3E436F
   \            6C645F53
   \            74617274
   \            20213D20
   \            4E554C4C
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"HOT_MOD[i]->Hot_Star...">`:
   \   000000   22484F54     DB "\"HOT_MOD[i]->Hot_Start != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E486F74
   \            5F537461
   \            72742021
   \            3D204E55
   \            4C4C2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"HW_MOD[i]->HW_Init !...">`:
   \   000000   2248575F     DB "\"HW_MOD[i]->HW_Init != NULL\" Faild! \015\012"
   \            4D4F445B
   \            695D2D3E
   \            48575F49
   \            6E697420
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"SW_MOD[i]->SW_Init !...">`:
   \   000000   2253575F     DB "\"SW_MOD[i]->SW_Init != NULL\" Faild! \015\012"
   \            4D4F445B
   \            695D2D3E
   \            53575F49
   \            6E697420
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"POW_MOD[i]->Sleep !=...">`:
   \   000000   22504F57     DB "\"POW_MOD[i]->Sleep != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E536C65
   \            65702021
   \            3D204E55
   \            4C4C2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"POW_MOD[i]->Wakeup !...">`:
   \   000000   22504F57     DB "\"POW_MOD[i]->Wakeup != NULL\" Faild! \015\012"
   \            5F4D4F44
   \            5B695D2D
   \            3E57616B
   \            65757020
   \            213D204E
   \            554C4C22
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_1`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "alarm_timer.c">`:
   \   000000   616C6172     DB "alarm_timer.c"
   \            6D5F7469
   \            6D65722E
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"time <= MAX_NWTIME\\" ...">`:
   \   000000   2274696D     DB "\"time <= MAX_NWTIME\" Faild! \015\012"
   \            65203C3D
   \            204D4158
   \            5F4E5754
   \            494D4522
   \            20466169
   \            6C642120
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"alarm <= MAX_NWTIME\\"...">`:
   \   000000   22616C61     DB "\"alarm <= MAX_NWTIME\" Faild! \015\012"
   \            726D203C
   \            3D204D41
   \            585F4E57
   \            54494D45
   \            22204661
   \            696C6421
   \            200D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_2`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "buffer.c">`:
   \   000000   62756666     DB "buffer.c"
   \            65722E63
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"frame != NULL\\" Faild...">`:
   \   000000   22667261     DB "\"frame != NULL\" Faild! \015\012"
   \            6D652021
   \            3D204E55
   \            4C4C2220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_3`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "mem_slots.c">`:
   \   000000   6D656D5F     DB "mem_slots.c"
   \            736C6F74
   \            732E6300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"slot_busy <= SLOT_PO...">`:
   \   000000   22736C6F     DB "\"slot_busy <= SLOT_POOL_ITEMS\" Faild! \015\012"
   \            745F6275
   \            7379203C
   \            3D20534C
   \            4F545F50
   \            4F4F4C5F
   \            4954454D
   \            53222046
   \            61696C64
   \            21200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_4`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "time_manager.c">`:
   \   000000   74696D65     DB "time_manager.c"
   \            5F6D616E
   \            61676572
   \            2E6300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"slot < MAX_TIME_SLOT...">`:
   \   000000   22736C6F     DB "\"slot < MAX_TIME_SLOTS\" Faild! \015\012"
   \            74203C20
   \            4D41585F
   \            54494D45
   \            5F534C4F
   \            54532220
   \            4661696C
   \            6421200D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1}>`:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d ">`:
   \   000000   25642000     DB "%d "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Try/CATCH macro \\r\\n">`:
   \   000000   5472792F     DB "Try/CATCH macro \015\012"
   \            43415443
   \            48206D61
   \            63726F20
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   436F6465     DB "Code run!\015\012"
   \            2072756E
   \            210D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Exception catch!\\r\\n">`:
   \   000000   45786365     DB "Exception catch!\015\012"
   \            7074696F
   \            6E206361
   \            74636821
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Finnaly!\\r\\n">`:
   \   000000   46696E6E     DB "Finnaly!\015\012"
   \            616C7921
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1`:
   \   000000   01           DB 1
   \   000001   02           DB 2
   \   000002   03           DB 3
   \   000003   04           DB 4
   \   000004   05           DB 5
   \   000005   06           DB 6
   \   000006   07           DB 7
   \   000007   08           DB 8
   \   000008   09           DB 9
   \   000009   0A           DB 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%d:%s -> ">_5`:
   \   000000   25733A25     DB "%s:%d:%s -> "
   \            643A2573
   \            202D3E20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "u_mem_utils.c">`:
   \   000000   755F6D65     DB "u_mem_utils.c"
   \            6D5F7574
   \            696C732E
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"cmp_res == 0\\" Faild! \\r\\n">`:
   \   000000   22636D70     DB "\"cmp_res == 0\" Faild! \015\012"
   \            5F726573
   \            203D3D20
   \            30222046
   \            61696C64
   \            21200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MEM_memcpy ok!">`:
   \   000000   4D454D5F     DB "MEM_memcpy ok!"
   \            6D656D63
   \            7079206F
   \            6B2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">_1`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MEM_memset ok!">`:
   \   000000   4D454D5F     DB "MEM_memset ok!"
   \            6D656D73
   \            6574206F
   \            6B2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test function not ass...">`:
   \   000000   54657374     DB "Test function not assigned!!!"
   \            2066756E
   \            6374696F
   \            6E206E6F
   \            74206173
   \            7369676E
   \            65642121
   \            2100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TESTING:\\t%-32s">`:
   \   000000   54455354     DB "TESTING:\t%-32s"
   \            494E473A
   \            09252D33
   \            327300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\tPASSED\\r\\n">`:
   \   000000   09504153     DB "\tPASSED\015\012"
   \            5345440D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\tERR = %d. FAILED <--...">`:
   \   000000   09455252     DB "\tERR = %d. FAILED <--------------\015\012"
   \            203D2025
   \            642E2046
   \            41494C45
   \            44203C2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Begin unit test\\r\\n">`:
   \   000000   42656769     DB "Begin unit test\015\012"
   \            6E20756E
   \            69742074
   \            6573740D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n###################...">`:
   \   000000   0D0A2323     DB "\015\012##########################################\015\012"
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            23232323
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test runned: \\t%d\\r\\n">`:
   \   000000   54657374     DB "Test runned: \t%d\015\012"
   \            2072756E
   \            6E65643A
   \            20092564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Test passed: \\t%d\\r\\n">`:
   \   000000   54657374     DB "Test passed: \t%d\015\012"
   \            20706173
   \            7365643A
   \            20092564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Succes!\\r\\n">`:
   \   000000   53756363     DB "Succes!\015\012"
   \            6573210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Failed!\\r\\n">`:
   \   000000   4661696C     DB "Failed!\015\012"
   \            6564210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff:
   \   000000   FF7F0000     DD 32767

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffff8000:
   \   000000   0080FFFF     DD 4294934528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8000:
   \   000000   00800000     DD 32768

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffff:
   \   000000   FFFFFF00     DD 16777215

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     16   AM_Cold_start
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_HW_Init
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     25   AM_Hot_start
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     26   AM_SW_Init
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_Sleep
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     16   AM_Wakeup
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     32   AT_set_alarm
        0     12   -> DBG_CORE_HALT
        0     12   -> IRQEnable
        0     12   -> calcCompareTime
        0     12   -> loadTimerCompare
        0     12   -> printf
        0     18   -> printf
      0     20   AT_set_time
        0     14   -> AT_set_alarm
        0     14   -> DBG_CORE_HALT
        0     14   -> ReadTimer
        0     14   -> isIRQEnable
        0     14   -> printf
        0     20   -> printf
      0     31   AT_time
        0     16   -> ReadTimer
      0     18   AT_wait
        0     12   -> DBG_CORE_HALT
        0     12   -> printf
        0     18   -> printf
      0     26   BF_next_tx
        0     12   -> list_empty
      0     23   BF_push_rx
        0      9   -> __cli
        0      9   -> _push
      0     23   BF_push_tx
        0      9   -> __cli
        0      9   -> _push
      0     14   BF_remove_rx
        0     14   -> __cli
        0     14   -> _remove
      0     28   BF_remove_tx
        0     14   -> __cli
        0     14   -> _remove
      0      0   Cold_Start
      0      0   DBG_CORE_FAULT
      0     41   DBG_CORE_HALT
      1     45   FR_add_header
        0     23   -> MEM_memcpy
      2     52   FR_available
        2      0   -> SL_available
      2     52   FR_busy
        2      0   -> SL_busy
      2     52   FR_create
        2      0   -> SL_alloc
      1     40   FR_del_header
        0     18   -> MEM_memcpy
        0     18   -> MEM_memset
      0     61   FR_delete
        0      9   -> SL_free
      2      0   HW_Init
      0      0   HW_Init
      0      0   HW_Init
      0      0   HW_Init
      0      0   Hot_Start
      2      9   INIT_LIST_HEAD
      0     15   IRQEnable
      3     41   MEM_memcpy
      3     41   MEM_memset
      2     22   ReadTimer
      0     65   SL_alloc
        0     13   -> MEM_memset
        0     13   -> __cli
      0     68   SL_available
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     68   SL_busy
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     61   SL_free
        0      9   -> __cli
        0      9   -> _free
      2     16   SL_zone_check
      0      9   SW_Init
        0      9   -> INIT_LIST_HEAD
      0      0   SW_Init
      0      0   SW_Init
      0      0   SW_Init
      0      0   SW_Init
      0     13   SW_Init
        0     13   -> MEM_memset
      0      0   Sleep
      0      0   TM_AdjustTime
      0     16   TM_ClrAlarm
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     24   TM_IRQ
        0      9   -> AM_Hot_start
      0     16   TM_SetAlarm
        0     10   -> DBG_CORE_HALT
        0     10   -> printf
        0     16   -> printf
      0     15   TimerCompareInterrupt
        0     15   -> AT_time
        0     15   -> IRQEnable
        0     15   -> TM_IRQ
        0     15   -> __cli
      0      0   Wakeup
      0     15   __cli
      0     14   __cli
      0     13   __cli
      0     26   __list_add
        0     14   -> __list_add_valid
      0     14   __list_add_valid
      2      9   __list_del
      0     18   __list_del_entry
        0      9   -> __list_del
        0      9   -> __list_del_entry_valid
      0      9   __list_del_entry_valid
      0     23   _free
        0     14   -> array_index
        0     14   -> is_array_ptr
      0     29   _push
        0     14   -> DBG_CORE_HALT
        0     14   -> find_free_node
        0     14   -> list_add
        0     14   -> printf
        0     20   -> printf
      0     30   _remove
        0     16   -> find_node_by_frame_ptr
        0     16   -> list_del
      0     26   array_index
      2     34   calcCompareTime
        0     22   -> ReadTimer
      0     33   ch_cmp
      0     31   ch_cmp_val
      0     23   find_free_node
        0      9   -> INIT_LIST_HEAD
      2     16   find_node_by_frame_ptr
      0     14   isIRQEnable
      0     26   is_array_ptr
      0     26   list_add
        0     12   -> __list_add
      0     25   list_del
        0      9   -> __list_del_entry
      2     12   list_empty
      0     28   loadTimerCompare
      0      0   main
        0      0   -> run_tests
      0     10   run_tests
        0     10   -> AM_SW_Init
        0     10   -> run_unit_fun
        0     10   -> show_grating
        0     10   -> show_statistic
      0     26   run_unit_fun
        0     14   -> printf
        0     16   -> printf
      2     10   show_grating
        2      0   -> printf
      2     12   show_statistic
        2      0   -> printf
        2      2   -> printf
      0     14   test1
        0     14   -> BF_next_tx
        0     14   -> BF_push_rx
        0     14   -> BF_push_tx
        0     14   -> BF_remove_tx
        0     14   -> FR_create
      0     10   test1
        0     10   -> SL_alloc
        0     10   -> SL_available
        0     10   -> SL_busy
        0     10   -> SL_free
      0     12   test1
        0     12   -> FR_available
        0     12   -> FR_busy
        0     12   -> FR_create
        0     12   -> FR_delete
      0     52   test2
        0     52   -> FR_available
        0     52   -> FR_busy
        0     52   -> FR_create
        0     52   -> FR_delete
      0     52   test2
        0     52   -> SL_alloc
        0     52   -> SL_available
        0     52   -> SL_busy
        0     52   -> SL_free
      0     24   test3
        0     22   -> FR_add_header
        0     22   -> FR_create
        0     22   -> FR_del_header
        0     24   -> ch_cmp
        0     22   -> ch_cmp_val
      0     16   test3
        0     16   -> SL_alloc
        0     16   -> SL_zone_check
      0      9   u_alarm_timer
        0      9   -> AT_set_alarm
      0     73   u_macros
        0     71   -> printf
        0     73   -> printf
      0     47   u_mem_utils
        0     41   -> DBG_CORE_HALT
        0     41   -> MEM_memcpy
        0     41   -> MEM_memset
        0     41   -> printf
        0     47   -> printf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d ">
      13  ?<Constant "%s:%d:%s -> ">
      13  ?<Constant "%s:%d:%s -> ">_1
      13  ?<Constant "%s:%d:%s -> ">_2
      13  ?<Constant "%s:%d:%s -> ">_3
      13  ?<Constant "%s:%d:%s -> ">_4
      13  ?<Constant "%s:%d:%s -> ">_5
      18  ?<Constant "Begin unit test\r\n">
      12  ?<Constant "Code run!\r\n">
      19  ?<Constant "Exception catch!\r\n">
      10  ?<Constant "Failed!\r\n">
      11  ?<Constant "Finnaly!\r\n">
      15  ?<Constant "MEM_memcpy ok!">
      15  ?<Constant "MEM_memset ok!">
      10  ?<Constant "Succes!\r\n">
      15  ?<Constant "TESTING:\t%-32s">
      30  ?<Constant "Test function not ass...">
      19  ?<Constant "Test passed: \t%d\r\n">
      19  ?<Constant "Test runned: \t%d\r\n">
      19  ?<Constant "Try/CATCH macro \r\n">
      44  ?<Constant "\"COLD_MOD[i]->Cold_St...">
      42  ?<Constant "\"HOT_MOD[i]->Hot_Star...">
      39  ?<Constant "\"HW_MOD[i]->HW_Init !...">
      38  ?<Constant "\"POW_MOD[i]->Sleep !=...">
      39  ?<Constant "\"POW_MOD[i]->Wakeup !...">
      39  ?<Constant "\"SW_MOD[i]->SW_Init !...">
      32  ?<Constant "\"alarm <= MAX_NWTIME\"...">
      25  ?<Constant "\"cmp_res == 0\" Faild! \r\n">
      26  ?<Constant "\"frame != NULL\" Faild...">
      34  ?<Constant "\"slot < MAX_TIME_SLOT...">
      41  ?<Constant "\"slot_busy <= SLOT_PO...">
      31  ?<Constant "\"time <= MAX_NWTIME\" ...">
       3  ?<Constant "\r\n">
       3  ?<Constant "\r\n">_1
      47  ?<Constant "\r\n###################...">
      36  ?<Constant "\tERR = %d. FAILED <--...">
      10  ?<Constant "\tPASSED\r\n">
      17  ?<Constant "action_manager.c">
      14  ?<Constant "alarm_timer.c">
       9  ?<Constant "buffer.c">
      12  ?<Constant "mem_slots.c">
      15  ?<Constant "time_manager.c">
      14  ?<Constant "u_mem_utils.c">
       5  ?<Constant {(char *)0, (char *)0, 10}>
       4  ?<Constant {(char *)0, 0, 0}>
       4  ?<Constant {(char *)0, 10, 7}>
       4  ?<Constant {(char *)0, 150, 0}>
       4  ?<Constant {(char *)0, 150, 0}>_1
      10  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>
      10  ?<Constant {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}>_1
       2  ?<Constant {1}>
      12  ?<Initializer for AT_MODULE>
      12  ?<Initializer for BF_MODULE>
      12  ?<Initializer for CPU_MODULE>
      12  ?<Initializer for DBG_MODULE>
      12  ?<Initializer for FR_MODULE>
       6  ?<Initializer for HW_MOD>
      12  ?<Initializer for MD_MODULE>
      12  ?<Initializer for MS_MODULE>
       2  ?<Initializer for POW_MOD>
      12  ?<Initializer for RTC_MODULE>
       4  ?<Initializer for RX_LIST_HEAD>
      10  ?<Initializer for SW_MOD>
      14  ?<Initializer for TEST_FUN>
      12  ?<Initializer for TM_MODULE>
       4  ?<Initializer for TX_LIST_HEAD>
      34  ?<Initializer for UTEST_DEBUG>
      34  ?<Initializer for UT_BF_1>
      34  ?<Initializer for UT_FR_1>
      34  ?<Initializer for UT_FR_2>
      34  ?<Initializer for UT_FR_3>
      34  ?<Initializer for UT_MS_1>
      34  ?<Initializer for UT_MS_2>
      34  ?<Initializer for UT_MS_3>
      50  ALARMS
     195  AM_Cold_start
       6  AM_Cold_start::?relay
     186  AM_HW_Init
       6  AM_HW_Init::?relay
     195  AM_Hot_start
       6  AM_Hot_start::?relay
     190  AM_SW_Init
       6  AM_SW_Init::?relay
     191  AM_Sleep
       6  AM_Sleep::?relay
     195  AM_Wakeup
       6  AM_Wakeup::?relay
      12  AT_MODULE
     130  AT_set_alarm
       6  AT_set_alarm::?relay
     144  AT_set_time
       6  AT_set_time::?relay
      55  AT_time
       6  AT_time::?relay
     178  AT_wait
       6  AT_wait::?relay
      12  BF_MODULE
     114  BF_next_tx
       6  BF_next_tx::?relay
      69  BF_push_rx
       6  BF_push_rx::?relay
      69  BF_push_tx
       6  BF_push_tx::?relay
      81  BF_remove_rx
       6  BF_remove_rx::?relay
      93  BF_remove_tx
       6  BF_remove_tx::?relay
       1  CLKCONCMD
       1  CLKCONSTA
       2  COLD_MOD
       4  COMPARE_TIME
      12  CPU_MODULE
       3  Cold_Start
       6  Cold_Start::?relay
       2  DBG_CORE_FAULT
       6  DBG_CORE_FAULT::?relay
       2  DBG_CORE_HALT
       6  DBG_CORE_HALT::?relay
      12  DBG_MODULE
      12  FR_MODULE
     211  FR_add_header
       6  FR_add_header::?relay
      14  FR_available
       6  FR_available::?relay
      14  FR_busy
       6  FR_busy::?relay
      14  FR_create
       6  FR_create::?relay
     179  FR_del_header
       6  FR_del_header::?relay
      21  FR_delete
       6  FR_delete::?relay
       2  HOT_MOD
       3  HW_Init
       3  HW_Init
      21  HW_Init
      39  HW_Init
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_Init::?relay
       6  HW_MOD
       3  Hot_Start
       6  Hot_Start::?relay
      31  INIT_LIST_HEAD
       6  INIT_LIST_HEAD::?relay
      17  IRQEnable
       6  IRQEnable::?relay
      12  MD_MODULE
     116  MEM_memcpy
       6  MEM_memcpy::?relay
      79  MEM_memset
       6  MEM_memset::?relay
      10  MODEL
      12  MS_MODULE
     120  NODE_LIST
       2  POW_MOD
      12  RTC_MODULE
       2  RX_BUFF_FRAME_COUNT
       4  RX_LIST_HEAD
      59  ReadTimer
       6  ReadTimer::?relay
       1  SLEEPSTA
    3060  SLOT_POOL
     145  SL_alloc
       6  SL_alloc::?relay
     100  SL_available
       6  SL_available::?relay
      91  SL_busy
       6  SL_busy::?relay
      49  SL_free
       6  SL_free::?relay
      76  SL_zone_check
       6  SL_zone_check::?relay
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
       3  SW_Init
       3  SW_Init
       3  SW_Init
       3  SW_Init
      87  SW_Init
     117  SW_Init
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
       6  SW_Init::?relay
      10  SW_MOD
       3  Sleep
       6  Sleep::?relay
      14  TEST_FUN
       3  TM_AdjustTime
       6  TM_AdjustTime::?relay
      95  TM_ClrAlarm
       6  TM_ClrAlarm::?relay
      17  TM_IRQ
       6  TM_IRQ::?relay
      12  TM_MODULE
      92  TM_SetAlarm
       6  TM_SetAlarm::?relay
       2  TOFFSET
       2  TX_BUFF_FRAME_COUNT
       4  TX_LIST_HEAD
      49  TimerCompareInterrupt
       3  TimerCompareInterrupt::??INTVEC 43
      34  UTEST_DEBUG
      34  UT_BF_1
      34  UT_FR_1
      34  UT_FR_2
      34  UT_FR_3
      34  UT_MS_1
      34  UT_MS_2
      34  UT_MS_3
       3  Wakeup
       6  Wakeup::?relay
       1  _A_IEN0
       1  _A_IRCON
       4  __Constant_7fff
       4  __Constant_8000
       4  __Constant_ffff8000
       4  __Constant_ffffff
       7  __cli
       7  __cli
       7  __cli
       6  __cli::?relay
       6  __cli::?relay
       6  __cli::?relay
     101  __list_add
       6  __list_add::?relay
       4  __list_add_valid
       6  __list_add_valid::?relay
      31  __list_del
       6  __list_del::?relay
      46  __list_del_entry
       6  __list_del_entry::?relay
       4  __list_del_entry_valid
       6  __list_del_entry_valid::?relay
     136  _free
       6  _free::?relay
     123  _push
       6  _push::?relay
     146  _remove
       6  _remove::?relay
      48  array_index
       6  array_index::?relay
     189  calcCompareTime
       6  calcCompareTime::?relay
      54  ch_cmp
       6  ch_cmp::?relay
      38  ch_cmp_val
       6  ch_cmp_val::?relay
       2  common_count
      65  find_free_node
       6  find_free_node::?relay
      58  find_node_by_frame_ptr
       6  find_node_by_frame_ptr::?relay
       5  isIRQEnable
       6  isIRQEnable::?relay
      60  is_array_ptr
       6  is_array_ptr::?relay
      41  list_add
       6  list_add::?relay
      45  list_del
       6  list_del::?relay
      41  list_empty
       6  list_empty::?relay
      70  loadTimerCompare
       6  loadTimerCompare::?relay
       5  main
       6  main::?relay
       2  passed
       4  ret_val
      90  run_tests
       6  run_tests::?relay
     148  run_unit_fun
       6  run_unit_fun::?relay
      18  show_grating
       6  show_grating::?relay
      90  show_statistic
       6  show_statistic::?relay
       2  slot_busy
     151  test1
     152  test1
     180  test1
       6  test1::?relay
       6  test1::?relay
       6  test1::?relay
     683  test2
     686  test2
       6  test2::?relay
       6  test2::?relay
     135  test3
     291  test3
       6  test3::?relay
       6  test3::?relay
      20  u_alarm_timer
       6  u_alarm_timer::?relay
     196  u_macros
       6  u_macros::?relay
     492  u_mem_utils
       6  u_mem_utils::?relay
       4  val
     164  -- Other

 
 8 469 bytes in segment BANKED_CODE
   534 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
    49 bytes in segment NEAR_CODE
     9 bytes in segment SFR_AN
   420 bytes in segment XDATA_I
   420 bytes in segment XDATA_ID
 1 127 bytes in segment XDATA_ROM_C
 3 268 bytes in segment XDATA_Z
 
 1 003 bytes of CODE     memory (+  3 bytes shared)
 1 111 bytes of CONST    memory (+ 16 bytes shared)
     0 bytes of DATA     memory (+  9 bytes shared)
 8 469 bytes of HUGECODE memory
 3 688 bytes of XDATA    memory

Errors: none
Warnings: 4
