###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2020  21:04:30
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EW5F26.tmp
#        (E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c -lc
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call)
#    Locale             =  Russian_Russia.1251
#    List file          =  E:\WMNU\IAR_new_arch\PRG Node\Debug\List\debug.lst
#    Object file        =  E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj\debug.r51
#
###############################################################################

E:\WMNU\IAR_NEW_ARCH\STACK_CORE_SRC\debug.c
      1          #include "debug.h"
      2          #include "action_manager.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);  
      9          static void uart_init(void);
     10           
     11          module_s DBG_MODULE = {ALIAS(HW_Init)};
     12          
     13          static void HW_Init(void){
     14          #ifndef DEBUG
     15            return;
     16          #endif
     17          #ifdef PRINT_TO_TERMINAL  
     18            uart_init();
     19          #endif
     20          #ifdef SIG_DEBUG
     21            P1DIR |=0x01;
     22            P1_0 |= 0x01;  
     23          #endif
     24          };  
     25          
     26          
     27          void DBG_CORE_HALT(void){
     28            while(1);
     29          }
     30          
     31          void DBG_CORE_FAULT(void){
     32            while(1);
     33          }
     34          
     35          // Настройка порта uart для отладки
     36          static void uart_init(void){
     37            // Выбор расположения UART на выводах
     38            char U0CFG = 0; // 0={TX=P0_3, RX=P0_2
     39            PERCFG |= (U0CFG<<0); 
     40            // U0UCR регистр настройки режима uart. меня устраивает по умолчанию
     41            U0CSR = (1<<7); // Выбираем режим uart  
     42            // Настройка скорости передачи данных на 2М  
     43            U0BAUD = 0;  // табличные значения из pdf
     44            U0GCR =  16;
     45            // Включаем альтернативные функции выводов
     46            P0SEL = (1<<2)|(1<<3);
     47            U0CSR |= (1<<6);
     48          }
     49          
     50          #ifdef PRINT_TO_TERMINAL 
     51          #include <yfuns.h>
     52          _STD_BEGIN
     53          #pragma module_name = "?__write"
     54          
     55          int MyLowLevelPutchar(int x){
     56            while( U0CSR&(1<<0));
     57            U0DBUF = x;
     58            return x;
     59          }
     60          
     61          size_t __write(int handle, const unsigned char * buffer, size_t size){
     62            /* Remove the #if #endif pair to enable the implementation */
     63            size_t nChars = 0;
     64            if (buffer == 0)  {
     65              return 0;
     66            }
     67            /* This template only writes to "standard out" and "standard err",
     68             * for all other file handles it returns failure. */
     69            if (handle != _LLIO_STDOUT && handle != _LLIO_STDERR)  {
     70              return _LLIO_ERROR;
     71            }
     72          
     73            for (/* Empty */; size != 0; --size){
     74              if (MyLowLevelPutchar(*buffer++) < 0){
     75                return _LLIO_ERROR;
     76              }
     77              ++nChars;
     78            }
     79            return nChars;
     80          }
     81          _STD_END
     82          
     83          #endif
     84          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   DBG_CORE_FAULT
      0      0   DBG_CORE_HALT
      2      0   HW_Init
        2      0   -> uart_init
      0     16   MyLowLevelPutchar
      0     18   __write
        0     16   -> MyLowLevelPutchar
      0      0   uart_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for DBG_MODULE>
       2  DBG_CORE_FAULT
       6  DBG_CORE_FAULT::?relay
       2  DBG_CORE_HALT
       6  DBG_CORE_HALT::?relay
       8  DBG_MODULE
      19  HW_Init
       6  HW_Init::?relay
      12  MyLowLevelPutchar
       6  MyLowLevelPutchar::?relay
       1  P0SEL
       1  P1DIR
       1  PERCFG
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
       1  _A_P1
     156  __write
       6  __write::?relay
      23  uart_init
       6  uart_init::?relay

 
 214 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   8 bytes in segment SFR_AN
   8 bytes in segment XDATA_I
   8 bytes in segment XDATA_ID
 
  44 bytes of CODE     memory
   0 bytes of DATA     memory (+ 8 bytes shared)
 214 bytes of HUGECODE memory
   8 bytes of XDATA    memory

Errors: none
Warnings: none
