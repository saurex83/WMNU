###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2020  21:04:31
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_new_arch\Stack_core_src\mem_utils.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EW63B0.tmp
#        (E:\WMNU\IAR_new_arch\Stack_core_src\mem_utils.c -lc
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call)
#    Locale             =  Russian_Russia.1251
#    List file          =  
#        E:\WMNU\IAR_new_arch\PRG Node\Debug\List\mem_utils.lst
#    Object file        =  
#        E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj\mem_utils.r51
#
###############################################################################

E:\WMNU\IAR_new_arch\Stack_core_src\mem_utils.c
      1          #include "mem_utils.h"
      2          #include "debug.h"
      3          
      4          /**
      5          @file Реентерабельное копирование
      6          */
      7          
      8          void MEM_memcpy(struct memcpy *memcpy){
      9            while (memcpy->len > 0){
     10              *memcpy->dst = *memcpy->src;
     11              memcpy->dst++;
     12              memcpy->src++;
     13              memcpy->len--;
     14            }
     15          };
     16          
     17          void MEM_memset(struct memset *memset){
     18            while (memset->len > 0){
     19              *memset->dst = memset->val;
     20              memset->dst++;
     21              memset->len--;
     22            }  
     23          };
     24          
     25          

   Maximum stack usage in bytes:

   ISTACK Function
   ------ --------
      3   MEM_memcpy
      3   MEM_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     116  MEM_memcpy
       6  MEM_memcpy::?relay
      79  MEM_memset
       6  MEM_memset::?relay

 
 195 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 195 bytes of HUGECODE memory

Errors: none
Warnings: none
