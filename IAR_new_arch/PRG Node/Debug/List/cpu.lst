###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2020  20:56:06
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_new_arch\Stack_core_src\cpu.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EWB050.tmp
#        (E:\WMNU\IAR_new_arch\Stack_core_src\cpu.c -lc
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call)
#    Locale             =  Russian_Russia.1251
#    List file          =  E:\WMNU\IAR_new_arch\PRG Node\Debug\List\cpu.lst
#    Object file        =  E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj\cpu.r51
#
###############################################################################

E:\WMNU\IAR_new_arch\Stack_core_src\cpu.c
      1          #include "action_manager.h"
      2          #include "ioCC2530.h"
      3          
      4          /**
      5          @file
      6          */
      7          
      8          static void HW_Init(void);   
      9           
     10          module_s CPU_MODULE = {ALIAS(HW_Init)};
     11          
     12          static void HW_Init(void){
     13            /* Сбрасываем бит OSC32K, будет выбран 32.768 кварц */
     14            CLKCONCMD &= ~(1<<7); 
     15            /* Ждем пока бит не станет 0 */
     16            while (CLKCONSTA & (1<<7)); 
     17            /* Переходим на 32 Мгц */
     18            CLKCONCMD = 0;// (1<<3);
     19            while (CLKCONSTA&(1<<6));
     20            EA = 1;
     21          };  

   Maximum stack usage in bytes:

   ISTACK Function
   ------ --------
      0   HW_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for CPU_MODULE>
       1  CLKCONCMD
       1  CLKCONSTA
       8  CPU_MODULE
      23  HW_Init
       6  HW_Init::?relay
       1  _A_IEN0

 
 23 bytes in segment BANKED_CODE
  6 bytes in segment BANK_RELAYS
  3 bytes in segment SFR_AN
  8 bytes in segment XDATA_I
  8 bytes in segment XDATA_ID
 
 14 bytes of CODE     memory
  0 bytes of DATA     memory (+ 3 bytes shared)
 23 bytes of HUGECODE memory
  8 bytes of XDATA    memory

Errors: none
Warnings: none
