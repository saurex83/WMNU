###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2020  21:04:31
# Copyright 2004-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\WMNU\IAR_new_arch\Stack_core_src\rtc.c
#    Command line       =  
#        -f C:\Users\08A4~1\AppData\Local\Temp\EW65F5.tmp
#        (E:\WMNU\IAR_new_arch\Stack_core_src\rtc.c -lc
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\List" -o
#        "E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj" -e --debug --core=plain
#        --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data
#        --nr_virtual_regs 8 --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\8051\LIB\DLIB\dl8051Normal.h"
#        --no_path_in_file_macros -I E:\WMNU\IAR_new_arch\Stack_core_src\ -On
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call)
#    Locale             =  Russian_Russia.1251
#    List file          =  E:\WMNU\IAR_new_arch\PRG Node\Debug\List\rtc.lst
#    Object file        =  E:\WMNU\IAR_new_arch\PRG Node\Debug\Obj\rtc.r51
#
###############################################################################

E:\WMNU\IAR_new_arch\Stack_core_src\rtc.c
      1          #include "action_manager.h"
      2          #include "model.h"
      3           
      4          static void SW_Init(void); 
      5          static void Cold_Start(void);
      6          static void Hot_Start(void);
      7          
      8          module_s RTC_MODULE = {ALIAS(SW_Init), ALIAS(Cold_Start), 
      9            ALIAS(Hot_Start)};
     10           
     11          static void SW_Init(void){}; 
     12          static void Cold_Start(void){};
     13          
     14          
     15          static void Hot_Start(void){
     16            if (MODEL.TM.timeslot != 0)
     17              return;    
     18            MODEL.RTC.uptime++;
     19            MODEL.RTC.rtc++;
     20          };

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      0   Cold_Start
     12   Hot_Start
      0   SW_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for RTC_MODULE>
       4  ?<Initializer for __Constant_1>
       3  Cold_Start
       6  Cold_Start::?relay
      48  Hot_Start
       6  Hot_Start::?relay
       8  RTC_MODULE
       3  SW_Init
       6  SW_Init::?relay
       4  __Constant_1

 
 54 bytes in segment BANKED_CODE
 18 bytes in segment BANK_RELAYS
 12 bytes in segment XDATA_I
 12 bytes in segment XDATA_ID
 
 26 bytes of CODE     memory (+ 4 bytes shared)
 54 bytes of HUGECODE memory
  8 bytes of XDATA    memory (+ 4 bytes shared)

Errors: none
Warnings: none
